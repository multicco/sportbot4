
# –ú–û–î–£–õ–¨ –ê–ù–ê–õ–ò–¢–ò–ö–ò RPE –ò –ò–°–¢–û–†–ò–ò –¢–†–ï–ù–ò–†–û–í–û–ö

from aiogram import Router
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import F
from datetime import datetime, timedelta
from typing import Dict, List
import statistics

rpe_analytics_router = Router()

@rpe_analytics_router.callback_query(F.data == "my_workout_history")
async def show_workout_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    sessions = await get_user_workout_sessions(user['id'], limit=20)

    if not sessions:
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üèÅ –ù–∞—á–∞—Ç—å –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="enhanced_training_menu")
        keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="enhanced_training_menu")
        keyboard.adjust(1)

        await callback.message.edit_text(
            "üìä **–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫**\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n"
            "–ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
    completed = [s for s in sessions if s['status'] == 'completed']
    in_progress = [s for s in sessions if s['status'] == 'in_progress']
    abandoned = [s for s in sessions if s['status'] == 'abandoned']

    keyboard = InlineKeyboardBuilder()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    for session in sessions[:10]:
        status_emoji = {
            'completed': '‚úÖ',
            'in_progress': 'üîÑ', 
            'abandoned': '‚èπÔ∏è'
        }.get(session['status'], '‚ùì')

        date_str = session['started_at'].strftime('%d.%m')
        time_str = session['started_at'].strftime('%H:%M')

        rpe_text = f" RPE:{session['rpe']}" if session['rpe'] else ""
        duration_text = f" {session['total_duration_minutes']}–º–∏–Ω" if session['total_duration_minutes'] else ""

        keyboard.button(
            text=f"{status_emoji} {session['workout_name']} - {date_str} {time_str}{rpe_text}{duration_text}",
            callback_data=f"view_session_{session['id']}"
        )

    keyboard.adjust(1)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    keyboard.row(InlineKeyboardButton(text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ RPE", callback_data="rpe_analytics"))
    keyboard.row(InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="workout_statistics"))
    keyboard.row(InlineKeyboardButton(text="üîô –ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º", callback_data="enhanced_training_menu"))

    text = f"üìä **–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫**\n\n"
    text += f"‚úÖ **–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö:** {len(completed)}\n"
    text += f"üîÑ **–í –ø—Ä–æ—Ü–µ—Å—Å–µ:** {len(in_progress)}\n"
    text += f"‚èπÔ∏è **–ü—Ä–µ—Ä–≤–∞–Ω–Ω—ã—Ö:** {len(abandoned)}\n\n"

    if completed:
        # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        avg_rpe = statistics.mean([s['rpe'] for s in completed if s['rpe']])
        avg_duration = statistics.mean([s['total_duration_minutes'] for s in completed if s['total_duration_minutes']])

        text += f"üìà **–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n"
        text += f"‚Ä¢ RPE: {avg_rpe:.1f}/10\n"
        text += f"‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {avg_duration:.0f} –º–∏–Ω—É—Ç\n\n"

    text += f"**–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:**"

    await callback.message.edit_text(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

@rpe_analytics_router.callback_query(F.data.startswith("view_session_"))
async def view_session_details(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π —Å–µ—Å—Å–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    session_id = int(callback.data.split("_")[2])

    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    session = await get_session_details(session_id, user['id'])

    if not session:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –°—Ç–∞—Ç—É—Å —ç–º–æ–¥–∑–∏
    status_info = {
        'completed': {'emoji': '‚úÖ', 'name': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'},
        'in_progress': {'emoji': 'üîÑ', 'name': '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'},
        'abandoned': {'emoji': '‚èπÔ∏è', 'name': '–ü—Ä–µ—Ä–≤–∞–Ω–∞'}
    }

    status = status_info.get(session['status'], {'emoji': '‚ùì', 'name': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})

    text = f"üìã **–î–µ—Ç–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏**\n\n"
    text += f"üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {session['workout_name']}\n"
    text += f"üÜî **ID —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:** {session.get('workout_unique_id', 'N/A')}\n"
    text += f"üìÖ **–î–∞—Ç–∞:** {session['started_at'].strftime('%d.%m.%Y')}\n"
    text += f"‚è∞ **–ù–∞—á–∞–ª–æ:** {session['started_at'].strftime('%H:%M')}\n"

    if session['completed_at']:
        text += f"üèÅ **–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ:** {session['completed_at'].strftime('%H:%M')}\n"

    text += f"üîÑ **–°—Ç–∞—Ç—É—Å:** {status['emoji']} {status['name']}\n"

    if session['total_duration_minutes']:
        hours = session['total_duration_minutes'] // 60
        minutes = session['total_duration_minutes'] % 60
        if hours > 0:
            text += f"‚è±Ô∏è **–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {hours}—á {minutes}–º–∏–Ω\n"
        else:
            text += f"‚è±Ô∏è **–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {minutes} –º–∏–Ω—É—Ç\n"

    if session['rpe']:
        rpe_info = RPE_SCALE.get(session['rpe'], {'emoji': '‚ùì', 'name': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})
        text += f"üìä **RPE:** {rpe_info['emoji']} {session['rpe']}/10 - {rpe_info['name']}\n"

    if session['session_notes']:
        text += f"\nüìù **–ó–∞–º–µ—Ç–∫–∏:**\n_{session['session_notes']}_\n"

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    exercises_stats = await get_session_exercises_stats(session_id)
    if exercises_stats:
        text += f"\nüèãÔ∏è **–í—ã–ø–æ–ª–Ω–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:** {exercises_stats['completed_exercises']}\n"
        text += f"üìä **–í—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–æ–≤:** {exercises_stats['total_sets']}\n"

        if exercises_stats['total_weight']:
            text += f"‚öñÔ∏è **–û–±—â–∏–π —Ç–æ–Ω–Ω–∞–∂:** {exercises_stats['total_weight']:.0f} –∫–≥\n"

    keyboard = InlineKeyboardBuilder()

    if session['status'] == 'in_progress':
        keyboard.button(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data=f"resume_session_{session_id}")

    keyboard.button(text="üìä –î–µ—Ç–∞–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π", callback_data=f"session_exercises_{session_id}")
    keyboard.button(text="üîô –ö –∏—Å—Ç–æ—Ä–∏–∏", callback_data="my_workout_history")
    keyboard.adjust(1)

    await callback.message.edit_text(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

@rpe_analytics_router.callback_query(F.data == "rpe_analytics")
async def show_rpe_analytics(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É RPE"""
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ RPE –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
    rpe_7_days = await get_rpe_analytics(user['id'], days=7)
    rpe_30_days = await get_rpe_analytics(user['id'], days=30)
    rpe_all_time = await get_rpe_analytics(user['id'], days=9999)

    text = f"üìà **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ RPE**\n\n"

    if not rpe_all_time['sessions']:
        text += "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n–í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å –æ—Ü–µ–Ω–∫–æ–π RPE."

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üîô –ö –∏—Å—Ç–æ—Ä–∏–∏", callback_data="my_workout_history")

        await callback.message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
        return

    # 7 –¥–Ω–µ–π
    if rpe_7_days['sessions'] > 0:
        text += f"üìÖ **–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:**\n"
        text += f"‚Ä¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {rpe_7_days['sessions']}\n"
        text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π RPE: {rpe_7_days['avg_rpe']:.1f}/10\n"
        text += f"‚Ä¢ –ú–∞–∫—Å RPE: {rpe_7_days['max_rpe']}/10\n\n"

    # 30 –¥–Ω–µ–π  
    if rpe_30_days['sessions'] > 0:
        text += f"üìÖ **–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:**\n"
        text += f"‚Ä¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {rpe_30_days['sessions']}\n"
        text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π RPE: {rpe_30_days['avg_rpe']:.1f}/10\n"
        text += f"‚Ä¢ –ú–∞–∫—Å RPE: {rpe_30_days['max_rpe']}/10\n\n"

    # –í—Å–µ –≤—Ä–µ–º—è
    text += f"üìà **–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è:**\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {rpe_all_time['sessions']}\n"
    text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π RPE: {rpe_all_time['avg_rpe']:.1f}/10\n"
    text += f"‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: {rpe_all_time['min_rpe']}-{rpe_all_time['max_rpe']}/10\n\n"

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º RPE
    rpe_distribution = await get_rpe_distribution(user['id'])
    if rpe_distribution:
        text += f"üìä **–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏:**\n"
        for rpe_level, count in sorted(rpe_distribution.items()):
            rpe_info = RPE_SCALE.get(rpe_level, {'emoji': '‚ùì', 'name': f'RPE {rpe_level}'})
            percentage = (count / rpe_all_time['sessions']) * 100
            text += f"{rpe_info['emoji']} **{rpe_level}** ({rpe_info['name']}): {count} —Ä–∞–∑ ({percentage:.0f}%)\n"

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if rpe_30_days['avg_rpe'] > 8:
        text += f"\nüí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –í–∞—à —Å—Ä–µ–¥–Ω–∏–π RPE –¥–æ–≤–æ–ª—å–Ω–æ –≤—ã—Å–æ–∫ ({rpe_30_days['avg_rpe']:.1f}). –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –±–æ–ª–µ–µ –ª–µ–≥–∫–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è."
    elif rpe_30_days['avg_rpe'] < 5:
        text += f"\nüí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –í–∞—à —Å—Ä–µ–¥–Ω–∏–π RPE –Ω–µ–≤—ã—Å–æ–∫ ({rpe_30_days['avg_rpe']:.1f}). –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."
    else:
        text += f"\n‚úÖ **–•–æ—Ä–æ—à–æ!** –í–∞—à —Å—Ä–µ–¥–Ω–∏–π RPE –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ ({rpe_30_days['avg_rpe']:.1f})."

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_rpe_stats")
    keyboard.button(text="üìä –ì—Ä–∞—Ñ–∏–∫ RPE", callback_data="rpe_chart")
    keyboard.button(text="üîô –ö –∏—Å—Ç–æ—Ä–∏–∏", callback_data="my_workout_history")
    keyboard.adjust(1)

    await callback.message.edit_text(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

@rpe_analytics_router.callback_query(F.data == "workout_statistics")
async def show_workout_statistics(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)

    stats = await get_comprehensive_workout_stats(user['id'])

    if not stats['total_sessions']:
        await callback.message.edit_text(
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫**\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n"
            "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!"
        )
        return

    text = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫**\n\n"

    # –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    text += f"üèãÔ∏è **–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {stats['total_sessions']}\n"
    text += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {stats['completed_sessions']} ({stats['completion_rate']:.0f}%)\n"
    text += f"‚Ä¢ –í —Å—Ä–µ–¥–Ω–µ–º –≤ –Ω–µ–¥–µ–ª—é: {stats['avg_sessions_per_week']:.1f}\n\n"

    # –í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    if stats['avg_duration']:
        text += f"‚è±Ô∏è **–í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:**\n"
        text += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats['avg_duration']:.0f} –º–∏–Ω—É—Ç\n"
        text += f"‚Ä¢ –°–∞–º–∞—è –∫–æ—Ä–æ—Ç–∫–∞—è: {stats['min_duration']} –º–∏–Ω—É—Ç\n"
        text += f"‚Ä¢ –°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è: {stats['max_duration']} –º–∏–Ω—É—Ç\n"
        text += f"‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: {stats['total_duration_hours']:.1f} —á–∞—Å–æ–≤\n\n"

    # RPE —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if stats['avg_rpe']:
        text += f"üìà **–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å (RPE):**\n"
        text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π RPE: {stats['avg_rpe']:.1f}/10\n"
        text += f"‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: {stats['min_rpe']}-{stats['max_rpe']}/10\n\n"

    # –õ—é–±–∏–º—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    if stats['favorite_workouts']:
        text += f"‚≠ê **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:**\n"
        for workout in stats['favorite_workouts'][:3]:
            text += f"‚Ä¢ {workout['name']}: {workout['count']} —Ä–∞–∑\n"
        text += f"\n"

    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    if stats['activity_by_weekday']:
        text += f"üìÖ **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:**\n"
        weekdays = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
        for day, count in stats['activity_by_weekday'].items():
            percentage = (count / stats['completed_sessions']) * 100 if stats['completed_sessions'] > 0 else 0
            text += f"‚Ä¢ {weekdays[day]}: {count} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ({percentage:.0f}%)\n"

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ RPE", callback_data="rpe_analytics")
    keyboard.button(text="üìÖ –ü–æ –º–µ—Å—è—Ü–∞–º", callback_data="monthly_stats")
    keyboard.button(text="üîô –ö –∏—Å—Ç–æ—Ä–∏–∏", callback_data="my_workout_history")
    keyboard.adjust(1)

    await callback.message.edit_text(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async def get_user_workout_sessions(user_id: int, limit: int = 20) -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with db_manager.pool.acquire() as conn:
        sql = """
        SELECT ws.*, w.name as workout_name, w.unique_id as workout_unique_id
        FROM workout_sessions ws
        JOIN workouts w ON ws.workout_id = w.id
        WHERE ws.user_id = $1
        ORDER BY ws.started_at DESC
        LIMIT $2
        """
        rows = await conn.fetch(sql, user_id, limit)
        return [dict(row) for row in rows]

async def get_session_details(session_id: int, user_id: int) -> Dict:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–µ—Å—Å–∏–∏"""
    async with db_manager.pool.acquire() as conn:
        sql = """
        SELECT ws.*, w.name as workout_name, w.unique_id as workout_unique_id
        FROM workout_sessions ws
        JOIN workouts w ON ws.workout_id = w.id
        WHERE ws.id = $1 AND ws.user_id = $2
        """
        row = await conn.fetchrow(sql, session_id, user_id)
        return dict(row) if row else None

async def get_session_exercises_stats(session_id: int) -> Dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å–µ—Å—Å–∏–∏"""
    async with db_manager.pool.acquire() as conn:
        sql = """
        SELECT 
            COUNT(*) as completed_exercises,
            SUM(completed_sets) as total_sets,
            SUM(CASE 
                WHEN actual_weights IS NOT NULL 
                THEN (SELECT SUM(weight) FROM unnest(actual_weights) as weight)
                ELSE 0 
            END) as total_weight
        FROM workout_session_exercises
        WHERE session_id = $1 AND completed_at IS NOT NULL
        """
        row = await conn.fetchrow(sql, session_id)
        return dict(row) if row else {}

async def get_rpe_analytics(user_id: int, days: int) -> Dict:
    """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É RPE –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    async with db_manager.pool.acquire() as conn:
        sql = """
        SELECT 
            COUNT(*) as sessions,
            AVG(rpe) as avg_rpe,
            MIN(rpe) as min_rpe,
            MAX(rpe) as max_rpe
        FROM workout_sessions
        WHERE user_id = $1 
        AND status = 'completed' 
        AND rpe IS NOT NULL
        AND started_at >= CURRENT_DATE - INTERVAL '%s days' % $2
        """
        row = await conn.fetchrow(sql, user_id, days)

        if row and row['sessions']:
            return {
                'sessions': row['sessions'],
                'avg_rpe': float(row['avg_rpe']),
                'min_rpe': row['min_rpe'],
                'max_rpe': row['max_rpe']
            }
        else:
            return {'sessions': 0, 'avg_rpe': 0, 'min_rpe': 0, 'max_rpe': 0}

async def get_rpe_distribution(user_id: int) -> Dict[int, int]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ RPE –ø–æ —É—Ä–æ–≤–Ω—è–º"""
    async with db_manager.pool.acquire() as conn:
        sql = """
        SELECT rpe, COUNT(*) as count
        FROM workout_sessions
        WHERE user_id = $1 AND status = 'completed' AND rpe IS NOT NULL
        GROUP BY rpe
        ORDER BY rpe
        """
        rows = await conn.fetch(sql, user_id)
        return {row['rpe']: row['count'] for row in rows}

async def get_comprehensive_workout_stats(user_id: int) -> Dict:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    async with db_manager.pool.acquire() as conn:
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        basic_stats = await conn.fetchrow("""
            SELECT 
                COUNT(*) as total_sessions,
                COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed_sessions,
                AVG(CASE WHEN status = 'completed' THEN total_duration_minutes END) as avg_duration,
                MIN(CASE WHEN status = 'completed' THEN total_duration_minutes END) as min_duration,
                MAX(CASE WHEN status = 'completed' THEN total_duration_minutes END) as max_duration,
                SUM(CASE WHEN status = 'completed' THEN total_duration_minutes ELSE 0 END) / 60.0 as total_duration_hours,
                AVG(CASE WHEN status = 'completed' THEN rpe END) as avg_rpe,
                MIN(CASE WHEN status = 'completed' THEN rpe END) as min_rpe,
                MAX(CASE WHEN status = 'completed' THEN rpe END) as max_rpe,
                MIN(started_at) as first_workout,
                MAX(started_at) as last_workout
            FROM workout_sessions 
            WHERE user_id = $1
        """, user_id)

        if not basic_stats or basic_stats['total_sessions'] == 0:
            return {'total_sessions': 0}

        stats = dict(basic_stats)

        # –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        stats['completion_rate'] = (stats['completed_sessions'] / stats['total_sessions']) * 100

        # –°—Ä–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é
        if stats['first_workout'] and stats['last_workout']:
            days_diff = (stats['last_workout'] - stats['first_workout']).days + 1
            weeks = days_diff / 7
            stats['avg_sessions_per_week'] = stats['completed_sessions'] / max(weeks, 1)
        else:
            stats['avg_sessions_per_week'] = 0

        # –õ—é–±–∏–º—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        favorite_workouts = await conn.fetch("""
            SELECT w.name, COUNT(*) as count
            FROM workout_sessions ws
            JOIN workouts w ON ws.workout_id = w.id
            WHERE ws.user_id = $1 AND ws.status = 'completed'
            GROUP BY w.id, w.name
            ORDER BY count DESC
            LIMIT 5
        """, user_id)

        stats['favorite_workouts'] = [dict(row) for row in favorite_workouts]

        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ (0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
        weekday_stats = await conn.fetch("""
            SELECT EXTRACT(DOW FROM started_at) as weekday, COUNT(*) as count
            FROM workout_sessions
            WHERE user_id = $1 AND status = 'completed'
            GROUP BY EXTRACT(DOW FROM started_at)
            ORDER BY weekday
        """, user_id)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Sunday(0) -> Monday(0)
        activity_by_weekday = {}
        for row in weekday_stats:
            dow = int(row['weekday'])
            # Postgres: 0=Sunday, 1=Monday ... 6=Saturday
            # –ù–∞–º –Ω—É–∂–Ω–æ: 0=Monday, 1=Tuesday ... 6=Sunday
            adjusted_dow = (dow + 6) % 7
            activity_by_weekday[adjusted_dow] = row['count']

        stats['activity_by_weekday'] = activity_by_weekday

        return stats
