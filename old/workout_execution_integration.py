
# –ü–û–õ–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –í–´–ü–û–õ–ù–ï–ù–ò–Ø –¢–†–ï–ù–ò–†–û–í–û–ö –° RPE

from aiogram import Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ò–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
from workout_execution_module import workout_execution_router, WorkoutExecutionStates, RPE_SCALE
from rpe_analytics_module import rpe_analytics_router

# –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
workout_execution_system_router = Router()

# –í–∫–ª—é—á–∞–µ–º –≤—Å–µ –ø–æ–¥—Ä–æ—É—Ç–µ—Ä—ã
workout_execution_system_router.include_router(workout_execution_router)
workout_execution_system_router.include_router(rpe_analytics_router)

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
def get_workout_execution_menu(user_role: str) -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    keyboard = InlineKeyboardBuilder()

    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    keyboard.button(text="üìã –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="my_enhanced_workouts")
    keyboard.button(text="üìä –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", callback_data="my_workout_history")

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="create_enhanced_workout")
    keyboard.button(text="üîç –ù–∞–π—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="search_workout_by_id")
    keyboard.adjust(2)

    # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    keyboard.row(InlineKeyboardButton(text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ RPE", callback_data="rpe_analytics"))
    keyboard.row(InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", callback_data="workout_statistics"))
    keyboard.row(InlineKeyboardButton(text="üåç –ü—É–±–ª–∏—á–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="browse_public_workouts"))

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤
    if user_role in ['coach', 'admin']:
        keyboard.row(InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π", callback_data="team_management"))

    keyboard.row(InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))

    return keyboard.as_markup()

@workout_execution_system_router.callback_query(F.data == "workout_execution_menu")
async def show_workout_execution_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    role = user['role'] if user else 'player'

    # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    quick_stats = await get_user_quick_stats(user['id'])

    menu_text = "üèãÔ∏è **–°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫**\n\n"

    if quick_stats['total_sessions'] > 0:
        menu_text += f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        menu_text += f"‚Ä¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {quick_stats['completed_sessions']}\n"
        if quick_stats['avg_rpe']:
            menu_text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π RPE: {quick_stats['avg_rpe']:.1f}/10\n"
        if quick_stats['last_workout']:
            days_ago = (datetime.now().date() - quick_stats['last_workout'].date()).days
            if days_ago == 0:
                menu_text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: —Å–µ–≥–æ–¥–Ω—è\n"
            elif days_ago == 1:
                menu_text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: –≤—á–µ—Ä–∞\n"
            else:
                menu_text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {days_ago} –¥–Ω–µ–π –Ω–∞–∑–∞–¥\n"
        menu_text += f"\n"

    menu_text += f"**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã:**\n"
    menu_text += f"üèÅ –ü–æ—à–∞–≥–æ–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
    menu_text += f"üìä –û—Ü–µ–Ω–∫–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —à–∫–∞–ª–µ RPE (1-10)\n"
    menu_text += f"üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
    menu_text += f"‚è±Ô∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
    menu_text += f"üåç –û–±–º–µ–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏ —Å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º\n\n"

    menu_text += f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    await callback.message.edit_text(
        menu_text,
        reply_markup=get_workout_execution_menu(role),
        parse_mode="Markdown"
    )
    await callback.answer()

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
@workout_execution_system_router.callback_query(F.data.startswith("view_player_workout_"))
async def view_player_workout_enhanced(callback: CallbackQuery):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–≥—Ä–æ–∫–æ–º —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    workout_id = int(callback.data.split("_")[3])

    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    workout = await get_workout_details(workout_id)

    if not workout or not await check_workout_access(user['id'], workout):
        await callback.answer("‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    execution_history = await get_workout_execution_history(user['id'], workout_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    text = f"üèãÔ∏è **{workout['name']}**\n\n"

    if workout['description']:
        text += f"üìÑ {workout['description']}\n\n"

    if workout.get('unique_id'):
        text += f"üÜî **ID:** {workout['unique_id']}\n"

    # –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    if execution_history:
        last_session = execution_history[0]
        text += f"\nüìä **–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**\n"
        text += f"‚Ä¢ –í—ã–ø–æ–ª–Ω—è–ª–∞—Å—å {len(execution_history)} —Ä–∞–∑\n"
        text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑: {last_session['started_at'].strftime('%d.%m.%Y')}\n"
        if last_session['rpe']:
            rpe_info = RPE_SCALE.get(last_session['rpe'], {'emoji': '‚ùì', 'name': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})
            text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π RPE: {rpe_info['emoji']} {last_session['rpe']}/10\n"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    text += f"\n**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:**\n"
    exercises_by_phase = workout['exercises_by_phase']

    for phase_key, phase_info in WORKOUT_PHASES.items():
        phase_exercises = exercises_by_phase.get(phase_key, [])

        if phase_exercises:
            text += f"\n{phase_info['emoji']} **{phase_info['name']}** ({len(phase_exercises)} —É–ø—Ä.)\n"

            for i, ex in enumerate(phase_exercises[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                reps_display = f"{ex['reps_min']}-{ex['reps_max']}" if ex['reps_min'] != ex['reps_max'] else str(ex['reps_min'])

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                weight_display = ""
                if ex['one_rm_percent']:
                    calc_weight = await calculate_weight_from_1rm(user['id'], ex['exercise_id'], ex['one_rm_percent'])
                    if calc_weight:
                        weight_display = f" - **{calc_weight:.1f}–∫–≥**"
                    else:
                        weight_display = f" - {ex['one_rm_percent']}% –æ—Ç 1–ü–ú"
                elif ex['fixed_weight'] and ex['fixed_weight'] > 0:
                    weight_display = f" - **{ex['fixed_weight']}–∫–≥**"

                text += f"{i}. {ex['exercise_name']} - {ex['sets']}x{reps_display}{weight_display}\n"

            if len(phase_exercises) > 3:
                text += f"... –∏ –µ—â–µ {len(phase_exercises) - 3} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardBuilder()

    # –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    keyboard.row(InlineKeyboardButton(text="üöÄ –ù–ê–ß–ê–¢–¨ –¢–†–ï–ù–ò–†–û–í–ö–£", callback_data=f"start_workout_{workout_id}"))

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    keyboard.button(text="üìä –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", callback_data=f"workout_execution_history_{workout_id}")
    keyboard.button(text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data=f"copy_found_workout_{workout_id}")
    keyboard.adjust(2)

    keyboard.row(InlineKeyboardButton(text="üîô –ö –º–æ–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º", callback_data="my_enhanced_workouts"))

    await callback.message.edit_text(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

@workout_execution_system_router.callback_query(F.data.startswith("workout_execution_history_"))
async def show_workout_execution_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    workout_id = int(callback.data.split("_")[3])

    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    history = await get_workout_execution_history(user['id'], workout_id, limit=10)
    workout = await get_workout_details(workout_id)

    if not history:
        await callback.message.edit_text(
            f"üìä **–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è**\n\n"
            f"–í—ã –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏ —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.\n"
            f"–ù–∞—á–Ω–∏—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!"
        )
        return

    text = f"üìä **–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è**\n"
    text += f"üèãÔ∏è **–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:** {workout['name']}\n\n"

    text += f"**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
    completed_sessions = [s for s in history if s['status'] == 'completed']

    if completed_sessions:
        avg_duration = statistics.mean([s['total_duration_minutes'] for s in completed_sessions if s['total_duration_minutes']])
        avg_rpe = statistics.mean([s['rpe'] for s in completed_sessions if s['rpe']])

        text += f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {len(completed_sessions)} —Ä–∞–∑\n"
        text += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {avg_duration:.0f} –º–∏–Ω—É—Ç\n"
        text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π RPE: {avg_rpe:.1f}/10\n\n"

    text += f"**–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏:**\n"

    for i, session in enumerate(history[:7], 1):
        date_str = session['started_at'].strftime('%d.%m')
        time_str = session['started_at'].strftime('%H:%M')

        status_emoji = {
            'completed': '‚úÖ',
            'in_progress': 'üîÑ',
            'abandoned': '‚èπÔ∏è'
        }.get(session['status'], '‚ùì')

        duration_text = f" ({session['total_duration_minutes']}–º–∏–Ω)" if session['total_duration_minutes'] else ""
        rpe_text = f" RPE:{session['rpe']}" if session['rpe'] else ""

        text += f"{i}. {status_emoji} {date_str} {time_str}{duration_text}{rpe_text}\n"

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üöÄ –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"start_workout_{workout_id}")
    keyboard.button(text="üîô –ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ", callback_data=f"view_player_workout_{workout_id}")
    keyboard.adjust(1)

    await callback.message.edit_text(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
async def get_user_quick_stats(user_id: int) -> Dict:
    """–ü–æ–ª—É—á–∏—Ç—å –±—ã—Å—Ç—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with db_manager.pool.acquire() as conn:
        row = await conn.fetchrow("""
            SELECT 
                COUNT(*) as total_sessions,
                COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed_sessions,
                AVG(CASE WHEN status = 'completed' THEN rpe END) as avg_rpe,
                MAX(CASE WHEN status = 'completed' THEN completed_at END) as last_workout
            FROM workout_sessions 
            WHERE user_id = $1
        """, user_id)

        if row:
            return {
                'total_sessions': row['total_sessions'],
                'completed_sessions': row['completed_sessions'], 
                'avg_rpe': float(row['avg_rpe']) if row['avg_rpe'] else None,
                'last_workout': row['last_workout']
            }
        else:
            return {
                'total_sessions': 0,
                'completed_sessions': 0,
                'avg_rpe': None,
                'last_workout': None
            }

async def get_workout_execution_history(user_id: int, workout_id: int, limit: int = 10) -> List[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    async with db_manager.pool.acquire() as conn:
        sql = """
        SELECT *
        FROM workout_sessions
        WHERE user_id = $1 AND workout_id = $2
        ORDER BY started_at DESC
        LIMIT $3
        """
        rows = await conn.fetch(sql, user_id, workout_id, limit)
        return [dict(row) for row in rows]

# Middleware –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ RPE
class RPEAnalyticsMiddleware:
    """Middleware –¥–ª—è —Å–±–æ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ RPE"""

    async def __call__(self, handler, event, data):
        result = await handler(event, data)

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å RPE
        if hasattr(event, 'data') and event.data.startswith('select_rpe_'):
            user_id = event.from_user.id
            rpe = int(event.data.split('_')[2])

            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            logger.info(f"User {user_id} completed workout with RPE {rpe}")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä—É –ø—Ä–∏ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö RPE
            await notify_coach_about_extreme_rpe(user_id, rpe)

        return result

async def notify_coach_about_extreme_rpe(user_id: int, rpe: int):
    """–£–≤–µ–¥–æ–º–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞ –æ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–º RPE"""
    if rpe >= 9:  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π RPE
        # –ù–∞–π—Ç–∏ —Ç—Ä–µ–Ω–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        coach = await get_user_coach(user_id)
        if coach:
            user = await db_manager.get_user_by_id(user_id)
            message = f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ò–≥—Ä–æ–∫ {user['first_name']} –∑–∞–∫–æ–Ω—á–∏–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å RPE {rpe}/10 (–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å). –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É."
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä—É
            # await send_notification_to_coach(coach['telegram_id'], message)

async def get_user_coach(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with db_manager.pool.acquire() as conn:
        sql = """
        SELECT u.* FROM users u
        JOIN team_members tm ON u.id = tm.user_id
        JOIN teams t ON tm.team_id = t.id
        WHERE t.created_by = u.id AND tm.user_id = $1 AND tm.is_active = true
        """
        row = await conn.fetchrow(sql, user_id)
        return dict(row) if row else None

# –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
async def init_workout_execution_system():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""

    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω–¥–µ–∫—Å—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    async with db_manager.pool.acquire() as conn:
        await conn.execute("CREATE INDEX IF NOT EXISTS idx_workout_sessions_user_status ON workout_sessions(user_id, status)")
        await conn.execute("CREATE INDEX IF NOT EXISTS idx_workout_sessions_workout_user ON workout_sessions(workout_id, user_id)")
        await conn.execute("CREATE INDEX IF NOT EXISTS idx_workout_sessions_rpe ON workout_sessions(rpe) WHERE rpe IS NOT NULL")

    logger.info("Workout execution system initialized")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
async def setup_workout_execution_system(dp):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç–µ—Ä
    dp.include_router(workout_execution_system_router)

    # –î–æ–±–∞–≤–ª—è–µ–º middleware
    dp.callback_query.middleware(RPEAnalyticsMiddleware())

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
    await init_workout_execution_system()

    logger.info("üèãÔ∏è Workout execution system with RPE analytics is ready!")
