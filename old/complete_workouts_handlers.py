# ===== –ü–û–õ–ù–´–ô –û–ë–ù–û–í–õ–ï–ù–ù–´–ô handlers/workouts.py =====

from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database import db_manager
from states.workout_states import CreateWorkoutStates

# ===== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –¢–†–ï–ù–ò–†–û–í–û–ö =====
async def workouts_menu(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    
    try:
        async with db_manager.pool.acquire() as conn:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            stats = await conn.fetchrow("""
                SELECT COUNT(*) as total_workouts,
                       COUNT(*) FILTER (WHERE created_at > NOW() - INTERVAL '7 days') as recent_workouts
                FROM workouts WHERE created_by = $1
            """, user['id'])
    
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üèãÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="my_workouts")
        keyboard.button(text="üîç –ù–∞–π—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="find_workout")
        keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="create_workout")
        keyboard.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="workout_stats")
        keyboard.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        keyboard.adjust(2)
        
        text = f"üèãÔ∏è **–°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫**\n\n"
        
        total_workouts = stats['total_workouts'] or 0
        if total_workouts > 0:
            text += f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: **{total_workouts}**\n"
            text += f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: **{stats['recent_workouts'] or 0}**\n\n"
        else:
            text += f"üÜï **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!**\n\n"
            text += f"üí™ **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
            text += f"‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
            text += f"‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä—É–π—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –±–ª–æ–∫–∏\n"
            text += f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
            text += f"‚Ä¢ –î–µ–ª–∏—Ç–µ—Å—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏ —Å –∫–æ–º–∞–Ω–¥–æ–π\n\n"
        
        text += f"**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**"
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await callback.answer()

# ===== –ú–û–ò –¢–†–ï–ù–ò–†–û–í–ö–ò =====
async def my_workouts(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    
    try:
        async with db_manager.pool.acquire() as conn:
            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            workouts = await conn.fetch("""
                SELECT w.*, COUNT(DISTINCT wb.id) as blocks_count,
                       COUNT(DISTINCT wbe.id) as exercises_count
                FROM workouts w
                LEFT JOIN workout_blocks wb ON w.id = wb.workout_id
                LEFT JOIN workout_block_exercises wbe ON wb.id = wbe.workout_block_id
                WHERE w.created_by = $1
                GROUP BY w.id
                ORDER BY w.created_at DESC
                LIMIT 10
            """, user['id'])
        
        if workouts:
            text = f"üèãÔ∏è **–í–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ({len(workouts)}):**\n\n"
            
            keyboard = InlineKeyboardBuilder()
            
            for workout in workouts:
                text += f"üí™ **{workout['name']}**\n"
                text += f"üìä –ë–ª–æ–∫–æ–≤: {workout['blocks_count']} ‚Ä¢ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {workout['exercises_count']}\n"
                
                if workout['description']:
                    text += f"üìù _{workout['description'][:50]}{'...' if len(workout['description']) > 50 else ''}_\n"
                
                text += f"üìÖ {workout['created_at'].strftime('%d.%m.%Y')}\n\n"
                
                keyboard.button(
                    text=f"üí™ {workout['name'][:20]}{'...' if len(workout['name']) > 20 else ''}", 
                    callback_data=f"view_workout_{workout['id']}"
                )
            
            keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é", callback_data="create_workout")
            keyboard.button(text="üîô –ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º", callback_data="workouts_menu")
            keyboard.adjust(1)
            
        else:
            text = f"üèãÔ∏è **–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫**\n\n"
            text += f"–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!\n\n"
            text += f"üí° **–ò–¥–µ–∏ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:**\n"
            text += f"‚Ä¢ –°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤–µ—Ä—Ö–∞\n"
            text += f"‚Ä¢ –ö–∞—Ä–¥–∏–æ + —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ\n"
            text += f"‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞\n"
            text += f"‚Ä¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–æ–º–∞"
            
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="create_workout")
            keyboard.button(text="üîç –ù–∞–π—Ç–∏ –≥–æ—Ç–æ–≤—É—é", callback_data="find_workout")
            keyboard.button(text="üîô –ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º", callback_data="workouts_menu")
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await callback.answer()

# ===== –ü–†–û–°–ú–û–¢–† –¢–†–ï–ù–ò–†–û–í–ö–ò =====
async def view_workout_details(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    workout_id = int(callback.data.split("_")[2])  # view_workout_{id}
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    
    try:
        async with db_manager.pool.acquire() as conn:
            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
            workout = await conn.fetchrow("""
                SELECT * FROM workouts 
                WHERE id = $1 AND created_by = $2
            """, workout_id, user['id'])
            
            if not workout:
                await callback.answer("‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            blocks = await conn.fetch("""
                SELECT wb.*, COUNT(wbe.id) as exercises_count
                FROM workout_blocks wb
                LEFT JOIN workout_block_exercises wbe ON wb.id = wbe.workout_block_id
                WHERE wb.workout_id = $1
                GROUP BY wb.id
                ORDER BY wb.block_order
            """, workout_id)
        
        text = f"üí™ **{workout['name']}**\n\n"
        text += f"üìÖ **–°–æ–∑–¥–∞–Ω–æ:** {workout['created_at'].strftime('%d.%m.%Y')}\n"
        
        if workout['description']:
            text += f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {workout['description']}\n"
        
        text += f"üìä **–ë–ª–æ–∫–æ–≤:** {len(blocks)}\n\n"
        
        if blocks:
            text += f"üèóÔ∏è **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:**\n"
            block_icons = {
                'warmup': 'üî•',
                'cns': 'üß†',
                'main': 'üí™',
                'cooldown': 'üßò'
            }
            for i, block in enumerate(blocks, 1):
                icon = block_icons.get(block.get('block_type', 'main'), 'üí™')
                text += f"{i}. {icon} **{block['name']}** ({block['exercises_count']} —É–ø—Ä.)\n"
                if block['description']:
                    text += f"   _{block['description'][:40]}{'...' if len(block['description']) > 40 else ''}_\n"
        else:
            text += f"üì≠ **–ë–ª–æ–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç**\n"
            text += f"–î–æ–±–∞–≤—å—Ç–µ –±–ª–æ–∫–∏ —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏."
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üèóÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_workout_{workout_id}")
        keyboard.button(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data=f"start_workout_{workout_id}")
        keyboard.button(text="üìã –î–µ—Ç–∞–ª–∏ –±–ª–æ–∫–æ–≤", callback_data=f"workout_blocks_{workout_id}")
        keyboard.button(text="üèãÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="my_workouts")
        keyboard.adjust(1)
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await callback.answer()

# ===== –°–û–ó–î–ê–ù–ò–ï –¢–†–ï–ù–ò–†–û–í–ö–ò =====
async def create_workout(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="workouts_menu")
    
    await callback.message.edit_text(
        "üí™ **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏**\n\n"
        "üéØ **–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:**\n"
        "‚Ä¢ –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
        "‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ü–µ–ª—å (—Å–∏–ª–∞, –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å, –ø–æ—Ö—É–¥–µ–Ω–∏–µ)\n"
        "‚Ä¢ –†–∞–∑–±–µ–π—Ç–µ –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –±–ª–æ–∫–∏\n"
        "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ 4-8 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –∫–∞–∂–¥—ã–π –±–ª–æ–∫\n\n"
        "üìã **–ü—Ä–∏–º–µ—Ä—ã –Ω–∞–∑–≤–∞–Ω–∏–π:**\n"
        "‚Ä¢ '–°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤–µ—Ä—Ö–∞'\n"
        "‚Ä¢ '–ö–∞—Ä–¥–∏–æ + –ø—Ä–µ—Å—Å'\n"
        "‚Ä¢ '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞'\n\n"
        "üìù **–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:**",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await state.set_state(CreateWorkoutStates.waiting_name)
    await callback.answer()

async def process_workout_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    workout_name = message.text.strip()
    
    if len(workout_name) < 3:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
        return
        
    if len(workout_name) > 100:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(name=workout_name)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="skip_workout_description")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_workout_creation")
    
    await message.answer(
        f"‚úÖ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {workout_name}\n\n"
        f"üìù **–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏** (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n"
        f"_–ù–∞–ø—Ä–∏–º–µ—Ä: '–°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤–µ—Ä—Ö–∞ —Ç–µ–ª–∞'_\n\n"
        f"–ò–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥:",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await state.set_state(CreateWorkoutStates.waiting_description)

async def process_workout_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    description = message.text.strip()
    
    if len(description) > 500:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(description=description)
    await create_workout_constructor(message, state)

async def skip_workout_description(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É"""
    await state.update_data(description="")
    await create_workout_constructor(callback.message, state)
    await callback.answer()

# ===== –ö–û–ù–°–¢–†–£–ö–¢–û–† –¢–†–ï–ù–ò–†–û–í–ö–ò =====
async def create_workout_constructor(message, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""
    data = await state.get_data()
    
    text = f"üèóÔ∏è **–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏**\n\n"
    text += f"üí™ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {data['name']}\n"
    
    if data.get('description'):
        text += f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {data['description']}\n"
    
    text += f"\nüéØ **–°–æ–∑–¥–∞–¥–∏–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:**\n\n"
    text += f"**–≠—Ç–∞–ø 1:** üî• **–†–∞–∑–º–∏–Ω–∫–∞** (5-10 –º–∏–Ω)\n"
    text += f"‚Ä¢ –û–±—â–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–ª–∞ –∫ –Ω–∞–≥—Ä—É–∑–∫–µ\n\n"
    text += f"**–≠—Ç–∞–ø 2:** üß† **–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã** (5-10 –º–∏–Ω)\n"
    text += f"‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –¶–ù–° –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π\n\n"
    text += f"**–≠—Ç–∞–ø 3:** üí™ **–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å** (30-45 –º–∏–Ω)\n"
    text += f"‚Ä¢ –¶–µ–ª–µ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n\n"
    text += f"**–≠—Ç–∞–ø 4:** üßò **–ó–∞–º–∏–Ω–∫–∞** (5-10 –º–∏–Ω)\n"
    text += f"‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–∞–≥—Ä—É–∑–∫–∏\n\n"
    text += f"**–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:**"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üî• –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–º–∏–Ω–∫—É", callback_data="add_warmup_block")
    keyboard.button(text="üß† –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¶–ù–°", callback_data="add_cns_block")
    keyboard.button(text="üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å", callback_data="add_main_block")
    keyboard.button(text="üßò –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–∏–Ω–∫—É", callback_data="add_cooldown_block")
    keyboard.button(text="üìã –°–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="save_empty_workout")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_workout_creation")
    keyboard.adjust(1)
    
    await message.answer(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )

# ===== –î–û–ë–ê–í–õ–ï–ù–ò–ï –ë–õ–û–ö–û–í =====
async def add_warmup_block(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞ —Ä–∞–∑–º–∏–Ω–∫–∏"""
    await state.update_data(current_block_type="warmup")
    
    text = f"üî• **–°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–∞ —Ä–∞–∑–º–∏–Ω–∫–∏**\n\n"
    text += f"üí° **–†–∞–∑–º–∏–Ω–∫–∞ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–ª–æ –∫ –Ω–∞–≥—Ä—É–∑–∫–µ:**\n"
    text += f"‚Ä¢ –õ–µ–≥–∫–æ–µ –∫–∞—Ä–¥–∏–æ (5-7 –º–∏–Ω—É—Ç)\n"
    text += f"‚Ä¢ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞\n"
    text += f"‚Ä¢ –°—É—Å—Ç–∞–≤–Ω–∞—è –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞\n"
    text += f"‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º—ã—à—Ü\n\n"
    text += f"üìù **–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞ —Ä–∞–∑–º–∏–Ω–∫–∏:**\n"
    text += f"_–ù–∞–ø—Ä–∏–º–µ—Ä: '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–º–∏–Ω–∫–∞' –∏–ª–∏ '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ'_"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É", callback_data="back_to_constructor")
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await state.set_state(CreateWorkoutStates.adding_block_description)
    await callback.answer()

async def add_cns_block(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    await state.update_data(current_block_type="cns")
    
    text = f"üß† **–°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¶–ù–°**\n\n"
    text += f"‚ö° **–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞:**\n\n"
    text += f"üéØ **–¶–µ–ª–∏ –±–ª–æ–∫–∞:**\n"
    text += f"‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã\n"
    text += f"‚Ä¢ –ü–æ–≤—ã—à–µ–Ω–∏–µ –Ω–µ—Ä–≤–Ω–æ-–º—ã—à–µ—á–Ω–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏\n"
    text += f"‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —É—Å–∏–ª–∏—è–º\n"
    text += f"‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n\n"
    text += f"üí° **–¢–∏–ø–∏—á–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:**\n"
    text += f"‚Ä¢ –ü–æ–¥–≤–æ–¥—è—â–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è —Å –ª–µ–≥–∫–∏–º –≤–µ—Å–æ–º (30-50% –æ—Ç —Ä–∞–±–æ—á–µ–≥–æ)\n"
    text += f"‚Ä¢ –í–∑—Ä—ã–≤–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è (–ø—Ä—ã–∂–∫–∏, –±—Ä–æ—Å–∫–∏)\n"
    text += f"‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä–æ–≤\n"
    text += f"‚Ä¢ –ù–µ–π—Ä–æ–º—ã—à–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã\n\n"
    text += f"üìù **–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞ –¶–ù–°:**\n"
    text += f"_–ù–∞–ø—Ä–∏–º–µ—Ä: '–ê–∫—Ç–∏–≤–∞—Ü–∏—è –¶–ù–°', '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã' –∏–ª–∏ '–ù–µ–π—Ä–æ–º—ã—à–µ—á–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞'_"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É", callback_data="back_to_constructor")
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await state.set_state(CreateWorkoutStates.adding_block_description)
    await callback.answer()

async def add_main_block(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞"""
    await state.update_data(current_block_type="main")
    
    text = f"üí™ **–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞**\n\n"
    text += f"üéØ **–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å - —è–¥—Ä–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:**\n"
    text += f"‚Ä¢ –°–∏–ª–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n"
    text += f"‚Ä¢ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è\n"
    text += f"‚Ä¢ –ö–∞—Ä–¥–∏–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã\n"
    text += f"‚Ä¢ –ò–∑–æ–ª–∏—Ä—É—é—â–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n\n"
    text += f"üìù **–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞:**\n"
    text += f"_–ù–∞–ø—Ä–∏–º–µ—Ä: '–°–∏–ª–æ–≤–∞—è —á–∞—Å—Ç—å', '–í–µ—Ä—Ö —Ç–µ–ª–∞' –∏–ª–∏ '–ö–∞—Ä–¥–∏–æ –±–ª–æ–∫'_"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É", callback_data="back_to_constructor")
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await state.set_state(CreateWorkoutStates.adding_block_description)
    await callback.answer()

async def add_cooldown_block(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞ –∑–∞–º–∏–Ω–∫–∏"""
    await state.update_data(current_block_type="cooldown")
    
    text = f"üßò **–°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–∞ –∑–∞–º–∏–Ω–∫–∏**\n\n"
    text += f"üòå **–ó–∞–º–∏–Ω–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–º:**\n"
    text += f"‚Ä¢ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞\n"
    text += f"‚Ä¢ –î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n"
    text += f"‚Ä¢ –õ–µ–≥–∫–∞—è —Ö–æ–¥—å–±–∞\n"
    text += f"‚Ä¢ –†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ –º—ã—à—Ü\n\n"
    text += f"üìù **–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞ –∑–∞–º–∏–Ω–∫–∏:**\n"
    text += f"_–ù–∞–ø—Ä–∏–º–µ—Ä: '–†–∞—Å—Ç—è–∂–∫–∞', '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ' –∏–ª–∏ '–†–µ–ª–∞–∫—Å –±–ª–æ–∫'_"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É", callback_data="back_to_constructor")
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await state.set_state(CreateWorkoutStates.adding_block_description)
    await callback.answer()

async def process_block_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª–æ–∫–∞"""
    block_name = message.text.strip()
    data = await state.get_data()
    block_type = data.get('current_block_type')
    
    if len(block_name) < 2:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
        return
        
    if len(block_name) > 100:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–ª–æ–∫ –≤ state
    blocks = data.get('workout_blocks', [])
    block_info = {
        'name': block_name,
        'type': block_type,
        'exercises': []
    }
    blocks.append(block_info)
    await state.update_data(workout_blocks=blocks)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –±–ª–æ–∫
    type_names = {
        'warmup': 'üî• —Ä–∞–∑–º–∏–Ω–∫–∏',
        'cns': 'üß† –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¶–ù–°',
        'main': 'üí™ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞', 
        'cooldown': 'üßò –∑–∞–º–∏–Ω–∫–∏'
    }
    
    type_tips = {
        'warmup': '–ª–µ–≥–∫–∏–µ –∫–∞—Ä–¥–∏–æ –∏ —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è',
        'cns': '–ø–æ–¥–≤–æ–¥—è—â–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è —Å –ª–µ–≥–∫–∏–º –≤–µ—Å–æ–º, –≤–∑—Ä—ã–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è',
        'main': '—Ü–µ–ª–µ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å —Ä–∞–±–æ—á–∏–º–∏ –≤–µ—Å–∞–º–∏',
        'cooldown': '—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞ –∏ —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è'
    }
    
    text = f"‚úÖ **–ë–ª–æ–∫ {type_names.get(block_type)} —Å–æ–∑–¥–∞–Ω!**\n\n"
    text += f"üìã **–ù–∞–∑–≤–∞–Ω–∏–µ:** {block_name}\n\n"
    text += f"üí° **–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å:** {type_tips.get(block_type)}\n\n"
    text += f"‚ûï **–î–æ–±–∞–≤–∏–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –±–ª–æ–∫:**"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data="search_exercise_for_block")
    keyboard.button(text="üìÇ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="browse_categories_for_block")
    keyboard.button(text="üí™ –ü–æ –≥—Ä—É–ø–ø–∞–º –º—ã—à—Ü", callback_data="browse_muscles_for_block")
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –±–ª–æ–∫–∞ –¶–ù–°
    if block_type == 'cns':
        keyboard.button(text="‚ö° –í–∑—Ä—ã–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", callback_data="explosive_exercises_for_cns")
        keyboard.button(text="üéØ –ü–æ–¥–≤–æ–¥—è—â–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è", callback_data="preparatory_exercises_for_cns")
    
    keyboard.button(text="üìã –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–ª–æ–∫", callback_data="finish_current_block")
    keyboard.button(text="üîô –ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É", callback_data="back_to_constructor")
    keyboard.adjust(1)
    
    await message.answer(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await state.set_state(CreateWorkoutStates.selecting_exercises)

# ===== –ù–ê–í–ò–ì–ê–¶–ò–Ø =====
async def back_to_constructor(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    await create_workout_constructor(callback.message, state)
    await callback.answer()

async def cancel_workout_creation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    await state.clear()
    await my_workouts(callback)

# ===== –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–£–°–¢–û–ô –¢–†–ï–ù–ò–†–û–í–ö–ò =====
async def save_empty_workout(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—É—Å—Ç–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    data = await state.get_data()
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    
    try:
        async with db_manager.pool.acquire() as conn:
            workout_id = await conn.fetchval("""
                INSERT INTO workouts (name, description, created_by)
                VALUES ($1, $2, $3)
                RETURNING id
            """, data['name'], data.get('description', ''), user['id'])
        
        text = f"üìã **–ü—É—Å—Ç–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞**\n\n"
        text += f"üí™ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {data['name']}\n"
        text += f"üì≠ **–ë–ª–æ–∫–æ–≤:** 0 (–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ)\n\n"
        text += f"üéØ **–î–æ–±–∞–≤—å—Ç–µ –±–ª–æ–∫–∏ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã!**"
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üèóÔ∏è –î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫–∏", callback_data=f"edit_workout_{workout_id}")
        keyboard.button(text="üí™ –ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ", callback_data=f"view_workout_{workout_id}")
        keyboard.button(text="üèãÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="my_workouts")
        keyboard.adjust(1)
        
        await callback.message.edit_text(
            text, reply_markup=keyboard.as_markup(), parse_mode="Markdown"
        )
        await state.clear()
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await callback.answer()

# ===== –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –£–ü–†–ê–ñ–ù–ï–ù–ò–ô –í –ë–õ–û–ö–ê–• =====
async def search_exercise_for_block(callback: CallbackQuery):
    """–ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –±–ª–æ–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - –ø–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –±–ª–æ–∫–∞")

async def browse_categories_for_block(callback: CallbackQuery):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –±–ª–æ–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")

async def browse_muscles_for_block(callback: CallbackQuery):
    """–ì—Ä—É–ø–ø—ã –º—ã—à—Ü –¥–ª—è –±–ª–æ–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - –≥—Ä—É–ø–ø—ã –º—ã—à—Ü")

async def finish_current_block(callback: CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–ª–æ–∫–∞")

async def explosive_exercises_for_cns(callback: CallbackQuery):
    """–í–∑—Ä—ã–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¶–ù–°"""
    text = f"‚ö° **–í–∑—Ä—ã–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¶–ù–°:**\n\n"
    text += f"üöß **–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ**\n\n"
    text += f"üí° **–ë—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã:**\n"
    text += f"‚Ä¢ –ü—Ä—ã–∂–∫–∏ –Ω–∞ —Ç—É–º–±—É\n"
    text += f"‚Ä¢ –ú–µ–¥–±–æ–ª –±—Ä–æ—Å–∫–∏\n"
    text += f"‚Ä¢ –í–∑—Ä—ã–≤–Ω—ã–µ –æ—Ç–∂–∏–º–∞–Ω–∏—è\n"
    text += f"‚Ä¢ –ë–∞–ª–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è\n"
    text += f"‚Ä¢ –ü–ª–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ö –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π", callback_data="back_to_adding_exercises")
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

async def preparatory_exercises_for_cns(callback: CallbackQuery):
    """–ü–æ–¥–≤–æ–¥—è—â–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¶–ù–°"""
    text = f"üéØ **–ü–æ–¥–≤–æ–¥—è—â–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¶–ù–°:**\n\n"
    text += f"üöß **–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ**\n\n"
    text += f"üí° **–ë—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã:**\n"
    text += f"‚Ä¢ –ñ–∏–º —Å 30-50% –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞\n"
    text += f"‚Ä¢ –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å –ª–µ–≥–∫–∏–º –≤–µ—Å–æ–º\n"
    text += f"‚Ä¢ –¢—è–≥–∏ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å\n"
    text += f"‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è\n"
    text += f"‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ-–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ö –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π", callback_data="back_to_adding_exercises")
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

async def back_to_adding_exercises(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫"""
    await callback.answer("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")

# ===== –û–°–¢–ê–õ–¨–ù–´–ï –ó–ê–ì–õ–£–®–ö–ò =====
async def find_workout(callback: CallbackQuery):
    """–ü–æ–∏—Å–∫ –≥–æ—Ç–æ–≤—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - –ø–æ–∏—Å–∫ –≥–æ—Ç–æ–≤—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")

async def workout_stats(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")

async def edit_workout(callback: CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")

async def start_workout(callback: CallbackQuery):
    """–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")

async def workout_blocks(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –±–ª–æ–∫–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - –¥–µ—Ç–∞–ª–∏ –±–ª–æ–∫–æ–≤")

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô =====
async def process_workout_text_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    current_state = await state.get_state()
    
    if current_state == CreateWorkoutStates.waiting_name:
        await process_workout_name(message, state)
    elif current_state == CreateWorkoutStates.waiting_description:
        await process_workout_description(message, state)
    elif current_state == CreateWorkoutStates.adding_block_description:
        await process_block_name(message, state)
    else:
        await message.answer("üöß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")

# ===== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í =====
def register_workout_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    dp.callback_query.register(workouts_menu, F.data == "workouts_menu")
    
    # –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    dp.callback_query.register(my_workouts, F.data == "my_workouts")
    dp.callback_query.register(view_workout_details, F.data.startswith("view_workout_"))
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    dp.callback_query.register(create_workout, F.data == "create_workout")
    dp.callback_query.register(skip_workout_description, F.data == "skip_workout_description")
    dp.callback_query.register(cancel_workout_creation, F.data == "cancel_workout_creation")
    
    # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤
    dp.callback_query.register(add_warmup_block, F.data == "add_warmup_block")
    dp.callback_query.register(add_cns_block, F.data == "add_cns_block")
    dp.callback_query.register(add_main_block, F.data == "add_main_block")
    dp.callback_query.register(add_cooldown_block, F.data == "add_cooldown_block")
    dp.callback_query.register(back_to_constructor, F.data == "back_to_constructor")
    dp.callback_query.register(save_empty_workout, F.data == "save_empty_workout")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –±–ª–æ–∫–∏ - –∑–∞–≥–ª—É—à–∫–∏
    dp.callback_query.register(search_exercise_for_block, F.data == "search_exercise_for_block")
    dp.callback_query.register(browse_categories_for_block, F.data == "browse_categories_for_block")
    dp.callback_query.register(browse_muscles_for_block, F.data == "browse_muscles_for_block")
    dp.callback_query.register(finish_current_block, F.data == "finish_current_block")
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –¶–ù–°
    dp.callback_query.register(explosive_exercises_for_cns, F.data == "explosive_exercises_for_cns")
    dp.callback_query.register(preparatory_exercises_for_cns, F.data == "preparatory_exercises_for_cns")
    dp.callback_query.register(back_to_adding_exercises, F.data == "back_to_adding_exercises")
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏
    dp.callback_query.register(find_workout, F.data == "find_workout")
    dp.callback_query.register(workout_stats, F.data == "workout_stats")
    dp.callback_query.register(edit_workout, F.data.startswith("edit_workout_"))
    dp.callback_query.register(start_workout, F.data.startswith("start_workout_"))
    dp.callback_query.register(workout_blocks, F.data.startswith("workout_blocks_"))

__all__ = [
    'register_workout_handlers',
    'process_workout_text_input'
]