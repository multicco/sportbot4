# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–†–ï–ù–ò–†–û–í–û–ö =====

from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database import db_manager
from states.workout_states import CreateWorkoutStates
from keyboards.workout_keyboards import (
    get_workout_blocks_keyboard, get_block_description_keyboard,
    get_block_exercises_keyboard, get_exercise_config_keyboard,
    get_workout_creation_success_keyboard, get_workout_description_keyboard,
    get_block_categories_keyboard, get_block_exercise_list_keyboard,
    get_advanced_config_no_1rm_keyboard
)
from utils.validators import validate_workout_name, validate_exercise_config
from utils.formatters import (
    format_workout_block_info, format_exercise_list,
    format_block_summary, format_weight_recommendation
)
from handlers.one_rm import get_user_1rm_for_exercise

def register_workout_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    dp.callback_query.register(start_create_workout, F.data == "create_workout")
    dp.callback_query.register(cancel_workout_creation, F.data == "cancel_workout_creation")
    dp.callback_query.register(skip_description, F.data == "skip_description")
    
    # –†–∞–±–æ—Ç–∞ —Å –±–ª–æ–∫–∞–º–∏
    dp.callback_query.register(select_workout_block, F.data.startswith("select_block_"))
    dp.callback_query.register(add_block_description, F.data == "add_block_description")
    dp.callback_query.register(skip_block_description, F.data == "skip_block_description")
    dp.callback_query.register(skip_entire_block, F.data == "skip_entire_block")
    dp.callback_query.register(back_to_blocks, F.data == "back_to_blocks")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –±–ª–æ–∫–∏
    dp.callback_query.register(find_exercise_for_block, F.data == "find_exercise_for_block")
    dp.callback_query.register(browse_categories_for_block, F.data == "browse_categories_for_block")
    dp.callback_query.register(show_block_category_exercises, F.data.startswith("block_cat_"))
    dp.callback_query.register(back_to_block_exercises, F.data == "back_to_block_exercises")
    dp.callback_query.register(add_exercise_to_block, F.data.startswith("add_block_ex_"))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    dp.callback_query.register(simple_block_config, F.data == "simple_block_config")
    dp.callback_query.register(advanced_block_config, F.data == "advanced_block_config")
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    dp.callback_query.register(finish_current_block, F.data == "finish_current_block")
    dp.callback_query.register(finish_workout_creation, F.data == "finish_workout_creation")

# ===== –°–û–ó–î–ê–ù–ò–ï –¢–†–ï–ù–ò–†–û–í–ö–ò =====
async def start_create_workout(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    await callback.message.edit_text(
        "üèãÔ∏è **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏**\n\n"
        "üÜï **–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –±–ª–æ—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞!**\n"
        "‚Ä¢ üî• –†–∞–∑–º–∏–Ω–∫–∞\n"
        "‚Ä¢ ‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã\n"
        "‚Ä¢ üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å\n"
        "‚Ä¢ üßò –ó–∞–º–∏–Ω–∫–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n"
        "_–ù–∞–ø—Ä–∏–º–µ—Ä: \"–°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤–µ—Ä—Ö–∞\" –∏–ª–∏ \"–û–§–ü –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤\"_",
        parse_mode="Markdown"
    )
    await state.set_state(CreateWorkoutStates.waiting_name)
    await callback.answer()

async def cancel_workout_creation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå **–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ**",
        parse_mode="Markdown"
    )
    await callback.answer()

async def skip_description(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    await state.update_data(description="")
    await show_block_selection_menu(callback.message, state)
    await callback.answer()

# ===== –†–ê–ë–û–¢–ê –° –ë–õ–û–ö–ê–ú–ò =====
async def show_block_selection_menu(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –±–ª–æ–∫–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    data = await state.get_data()
    selected_blocks = data.get('selected_blocks', {})
    
    text = f"üèóÔ∏è **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {data['name']}**\n\n"
    text += f"üìã **–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫–∏ –¥–ª—è –≤–∞—à–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:**\n\n"
    
    blocks = {
        'warmup': 'üî• –†–∞–∑–º–∏–Ω–∫–∞',
        'nervous_prep': '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã', 
        'main': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å',
        'cooldown': 'üßò –ó–∞–º–∏–Ω–∫–∞'
    }
    
    for block_key, block_name in blocks.items():
        status = "‚úÖ" if block_key in selected_blocks else "‚≠ï"
        text += f"{status} **{block_name}**"
        if block_key in selected_blocks:
            exercises_count = len(selected_blocks[block_key].get('exercises', []))
            text += f" ({exercises_count} —É–ø—Ä.)"
            if selected_blocks[block_key].get('description'):
                text += f"\n   _üìù {selected_blocks[block_key]['description'][:50]}..._"
        text += "\n\n"
    
    keyboard = get_workout_blocks_keyboard(selected_blocks)
    
    try:
        await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    except:
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
    
    await state.set_state(CreateWorkoutStates.selecting_blocks)

async def select_workout_block(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –±–ª–æ–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    block_key = callback.data.split("_", 2)[2]
    
    block_info = {
        'warmup': {
            'name': 'üî• –†–∞–∑–º–∏–Ω–∫–∞',
            'description': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–ª–∞ –∫ –Ω–∞–≥—Ä—É–∑–∫–µ, —Ä–∞–∑–æ–≥—Ä–µ–≤ –º—ã—à—Ü –∏ —Å—É—Å—Ç–∞–≤–æ–≤',
            'examples': '–õ–µ–≥–∫–æ–µ –∫–∞—Ä–¥–∏–æ, –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞, —Å—É—Å—Ç–∞–≤–Ω–∞—è –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞'
        },
        'nervous_prep': {
            'name': '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã',
            'description': '–ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π',
            'examples': '–í–∑—Ä—ã–≤–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è, –∞–∫—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –ø–ª–∏–æ–º–µ—Ç—Ä–∏–∫–∞'
        },
        'main': {
            'name': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å',
            'description': '–ì–ª–∞–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞',
            'examples': '–û—Å–Ω–æ–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, —Å–∏–ª–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã'
        },
        'cooldown': {
            'name': 'üßò –ó–∞–º–∏–Ω–∫–∞',
            'description': '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
            'examples': '–°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞, –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ'
        }
    }
    
    info = block_info[block_key]
    await state.update_data(current_block=block_key)
    
    text = f"üìã **{info['name']}**\n\n"
    text += f"**–û–ø–∏—Å–∞–Ω–∏–µ:**\n{info['description']}\n\n"
    text += f"**–ü—Ä–∏–º–µ—Ä—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:**\n{info['examples']}\n\n"
    text += f"**–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º –±–ª–æ–∫–æ–º?**"
    
    keyboard = get_block_description_keyboard()
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

async def add_block_description(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –±–ª–æ–∫–∞"""
    data = await state.get_data()
    block_key = data.get('current_block')
    
    block_names = {
        'warmup': 'üî• –†–∞–∑–º–∏–Ω–∫–∞',
        'nervous_prep': '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã',
        'main': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å', 
        'cooldown': 'üßò –ó–∞–º–∏–Ω–∫–∞'
    }
    
    await callback.message.edit_text(
        f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–∫–∞: {block_names[block_key]}**\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞:\n"
        f"_–ù–∞–ø—Ä–∏–º–µ—Ä: \"10 –º–∏–Ω—É—Ç –ª–µ–≥–∫–æ–≥–æ –∫–∞—Ä–¥–∏–æ + —Å—É—Å—Ç–∞–≤–Ω–∞—è —Ä–∞–∑–º–∏–Ω–∫–∞\"_\n\n"
        f"–ò–ª–∏ –æ–ø–∏—à–∏—Ç–µ —Ü–µ–ª–∏ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞.",
        parse_mode="Markdown"
    )
    await state.set_state(CreateWorkoutStates.adding_block_description)
    await callback.answer()

async def skip_block_description(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –æ–ø–∏—Å–∞–Ω–∏—è –±–ª–æ–∫–∞"""
    await state.update_data(current_block_description="")
    await show_block_exercises_menu(callback.message, state)
    await callback.answer()

async def skip_entire_block(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –≤—Å–µ–≥–æ –±–ª–æ–∫–∞"""
    await show_block_selection_menu(callback.message, state)
    await callback.answer()

async def back_to_blocks(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –±–ª–æ–∫–æ–≤"""
    await show_block_selection_menu(callback.message, state)
    await callback.answer()

# ===== –î–û–ë–ê–í–õ–ï–ù–ò–ï –£–ü–†–ê–ñ–ù–ï–ù–ò–ô –í –ë–õ–û–ö–ò =====
async def show_block_exercises_menu(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –±–ª–æ–∫"""
    data = await state.get_data()
    block_key = data.get('current_block')
    selected_blocks = data.get('selected_blocks', {})
    current_block_data = selected_blocks.get(block_key, {'exercises': [], 'description': data.get('current_block_description', '')})
    
    block_names = {
        'warmup': 'üî• –†–∞–∑–º–∏–Ω–∫–∞',
        'nervous_prep': '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã',
        'main': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å',
        'cooldown': 'üßò –ó–∞–º–∏–Ω–∫–∞'
    }
    
    exercises = current_block_data['exercises']
    
    text = f"üèãÔ∏è **{block_names[block_key]}**\n\n"
    
    if current_block_data['description']:
        text += f"üìù _{current_block_data['description']}_\n\n"
    
    if exercises:
        text += format_exercise_list(exercises) + "\n"
    
    text += "‚ûï **–î–æ–±–∞–≤—å—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –±–ª–æ–∫:**"
    
    keyboard = get_block_exercises_keyboard(bool(exercises))
    
    try:
        await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    except:
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
    
    await state.set_state(CreateWorkoutStates.adding_exercises)

async def find_exercise_for_block(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–ª–æ–∫"""
    await callback.message.edit_text(
        "üîç **–ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –±–ª–æ–∫–∞**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n"
        "_–ù–∞–ø—Ä–∏–º–µ—Ä: –∂–∏–º, –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è, –ø–ª–∞–Ω–∫–∞, —Ä–∞—Å—Ç—è–∂–∫–∞_",
        parse_mode="Markdown"
    )
    await state.set_state("searching_exercise_for_block")
    await callback.answer()

async def browse_categories_for_block(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –±–ª–æ–∫–∞"""
    try:
        async with db_manager.pool.acquire() as conn:
            categories = await conn.fetch("SELECT DISTINCT category FROM exercises ORDER BY category")
        
        keyboard = get_block_categories_keyboard(categories)
        
        await callback.message.edit_text(
            "üìÇ **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:**",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await callback.answer()

async def show_block_category_exercises(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±–ª–æ–∫–∞"""
    category = callback.data[10:]  # –£–±–∏—Ä–∞–µ–º "block_cat_"
    
    try:
        async with db_manager.pool.acquire() as conn:
            exercises = await conn.fetch(
                "SELECT id, name, muscle_group FROM exercises WHERE category = $1 ORDER BY name",
                category
            )
        
        if exercises:
            text = f"üìÇ **{category} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:**\n\n"
            keyboard = get_block_exercise_list_keyboard(exercises)
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        else:
            await callback.message.edit_text(f"‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await callback.answer()

async def back_to_block_exercises(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º –±–ª–æ–∫–∞"""
    await show_block_exercises_menu(callback.message, state)
    await callback.answer()

async def add_exercise_to_block(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –±–ª–æ–∫"""
    exercise_id = int(callback.data.split("_")[3])
    
    try:
        async with db_manager.pool.acquire() as conn:
            exercise = await conn.fetchrow(
                "SELECT id, name, category, muscle_group FROM exercises WHERE id = $1", 
                exercise_id
            )
        
        if exercise:
            await state.update_data(
                current_exercise_id=exercise_id,
                current_exercise_name=exercise['name']
            )
            
            text = f"‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –±–ª–æ–∫–∞**\n\n"
            text += f"üí™ **{exercise['name']}**\n"
            text += f"üìÇ {exercise['category']} ‚Ä¢ {exercise['muscle_group']}\n\n"
            text += f"**–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**"
            
            keyboard = get_exercise_config_keyboard()
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await callback.answer()

# ===== –ù–ê–°–¢–†–û–ô–ö–ê –£–ü–†–ê–ñ–ù–ï–ù–ò–ô =====
async def simple_block_config(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    data = await state.get_data()
    exercise_name = data.get('current_exercise_name', '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ')
    
    text = f"üèãÔ∏è **–ü—Ä–æ—Å—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: {exercise_name}**\n\n"
    text += f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
    text += f"`–ø–æ–¥—Ö–æ–¥—ã –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è_–º–∏–Ω –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è_–º–∞–∫—Å`\n\n"
    text += f"**–ü—Ä–∏–º–µ—Ä—ã:**\n"
    text += f"‚Ä¢ `3 8 12` - 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 8-12 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
    text += f"‚Ä¢ `4 6 8` - 4 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 6-8 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
    text += f"‚Ä¢ `1 60 60` - 1 –ø–æ–¥—Ö–æ–¥ –Ω–∞ 60 —Å–µ–∫—É–Ω–¥ (–¥–ª—è –ø–ª–∞–Ω–∫–∏)\n"
    text += f"‚Ä¢ `2 10 15` - 2 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 10-15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"
    
    await callback.message.edit_text(text, parse_mode="Markdown")
    await state.set_state("simple_block_config")
    await callback.answer()

async def advanced_block_config(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å 1–ü–ú"""
    data = await state.get_data()
    exercise_name = data.get('current_exercise_name', '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ')
    exercise_id = data.get('current_exercise_id')
    
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º 1–ü–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    current_1rm = await get_user_1rm_for_exercise(user['id'], exercise_id)
    
    text = f"üìä **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å 1–ü–ú: {exercise_name}**\n\n"
    
    if current_1rm:
        text += f"üí™ **–í–∞—à —Ç–µ–∫—É—â–∏–π 1–ü–ú:** {current_1rm} –∫–≥\n\n"
        text += f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        text += f"`–ø–æ–¥—Ö–æ–¥—ã –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è_–º–∏–Ω –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è_–º–∞–∫—Å –ø—Ä–æ—Ü–µ–Ω—Ç_1–ü–ú`\n\n"
        text += f"**–ü—Ä–∏–º–µ—Ä—ã:**\n"
        text += f"‚Ä¢ `4 6 8 80` - 4√ó6-8 –Ω–∞ 80% (‚âà{round(current_1rm * 0.8, 1)}–∫–≥)\n"
        text += f"‚Ä¢ `3 8 12 70` - 3√ó8-12 –Ω–∞ 70% (‚âà{round(current_1rm * 0.7, 1)}–∫–≥)\n"
        text += f"‚Ä¢ `5 3 5 85` - 5√ó3-5 –Ω–∞ 85% (‚âà{round(current_1rm * 0.85, 1)}–∫–≥)"
        
        await callback.message.edit_text(text, parse_mode="Markdown")
        await state.set_state("advanced_block_config")
    else:
        text += f"‚ö†Ô∏è **–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ 1–ü–ú –¥–ª—è —ç—Ç–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è**\n\n"
        text += f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ë–ï–ó –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∏–ª–∏ –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç 1–ü–ú."
        
        keyboard = get_advanced_config_no_1rm_keyboard(exercise_id)
        
        await callback.message.edit_text(
            text, 
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    await callback.answer()

# ===== –ó–ê–í–ï–†–®–ï–ù–ò–ï –°–û–ó–î–ê–ù–ò–Ø =====
async def finish_current_block(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞"""
    data = await state.get_data()
    block_key = data.get('current_block')
    selected_blocks = data.get('selected_blocks', {})
    
    current_block_data = selected_blocks.get(block_key, {'exercises': [], 'description': ''})
    current_block_data['description'] = data.get('current_block_description', '')
    selected_blocks[block_key] = current_block_data
    
    await state.update_data(selected_blocks=selected_blocks)
    await callback.answer("‚úÖ –ë–ª–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    await show_block_selection_menu(callback.message, state)

async def finish_workout_creation(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    data = await state.get_data()
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    selected_blocks = data.get('selected_blocks', {})
    
    try:
        total_exercises = sum(len(block_data['exercises']) for block_data in selected_blocks.values())
        
        if total_exercises == 0:
            await callback.answer("‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ!")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ –ë–î
        async with db_manager.pool.acquire() as conn:
            workout_id = await conn.fetchval("""
                INSERT INTO workouts (name, description, created_by, visibility, difficulty_level, estimated_duration_minutes)
                VALUES ($1, $2, $3, 'private', 'intermediate', $4)
                RETURNING id
            """, data['name'], data.get('description', ''), user['id'], total_exercises * 8)
            
            workout_unique_id = await conn.fetchval("SELECT unique_id FROM workouts WHERE id = $1", workout_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
            exercise_order = 0
            for phase, block_data in selected_blocks.items():
                for exercise in block_data['exercises']:
                    exercise_order += 1
                    await conn.execute("""
                        INSERT INTO workout_exercises (
                            workout_id, exercise_id, phase, order_in_phase, sets, 
                            reps_min, reps_max, one_rm_percent, rest_seconds
                        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
                    """, workout_id, exercise['id'], phase, exercise_order, exercise['sets'], 
                         exercise['reps_min'], exercise['reps_max'], 
                         exercise['one_rm_percent'], exercise['rest_seconds'])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        text = f"üéâ **–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n"
        text += f"üèãÔ∏è **–ù–∞–∑–≤–∞–Ω–∏–µ:** {data['name']}\n"
        text += f"üÜî **–ö–æ–¥:** `{workout_unique_id}`\n"
        text += f"üìã **–í—Å–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:** {total_exercises}\n\n"
        
        text += format_block_summary(selected_blocks)
        
        text += f"\nüí° **–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–¥–æ–º** `{workout_unique_id}` —Å –¥—Ä—É–≥–∏–º–∏!"
        
        keyboard = get_workout_creation_success_keyboard()
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        await state.clear()
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    await callback.answer()

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô =====
async def process_workout_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    workout_name = message.text.strip()
    validation = validate_workout_name(workout_name)
    
    if not validation['valid']:
        await message.answer(validation['error'])
        return
    
    await state.update_data(name=workout_name)
    
    keyboard = get_workout_description_keyboard()
    
    await message.answer(
        f"‚úÖ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {workout_name}\n\n"
        f"üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n"
        f"_–ù–∞–ø—Ä–∏–º–µ—Ä: \"–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∏–ª—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –≥—Ä—É–ø–ø –º—ã—à—Ü\"_\n\n"
        f"–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await state.set_state(CreateWorkoutStates.waiting_description)

async def process_workout_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    description = message.text.strip()
    await state.update_data(description=description)
    await show_block_selection_menu(message, state)

async def process_block_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –±–ª–æ–∫–∞"""
    description = message.text.strip()
    
    if len(description) > 200:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
        
    await state.update_data(current_block_description=description)
    
    await message.answer(
        f"‚úÖ **–û–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:**\n\n"
        f"_{description}_\n\n"
        f"–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –±–ª–æ–∫...",
        parse_mode="Markdown"
    )
    
    await show_block_exercises_menu(message, state)

async def handle_block_exercise_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –±–ª–æ–∫–∞"""
    search_term = message.text.lower()
    
    try:
        async with db_manager.pool.acquire() as conn:
            exercises = await conn.fetch("""
                SELECT id, name, category, muscle_group 
                FROM exercises 
                WHERE LOWER(name) LIKE $1 
                   OR LOWER(muscle_group) LIKE $1
                ORDER BY name
                LIMIT 10
            """, f"%{search_term}%")
        
        if exercises:
            text = f"üîç **–ù–∞–π–¥–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {len(exercises)}**\n\n"
            keyboard = get_block_exercise_list_keyboard(exercises)
            
            await message.answer(
                text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            await state.set_state(CreateWorkoutStates.adding_exercises)
        else:
            await message.answer(f"‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

async def process_simple_block_config(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–ª–æ–∫–∞"""
    parts = message.text.split()
    validation = validate_exercise_config(
        parts[0] if len(parts) > 0 else "",
        parts[1] if len(parts) > 1 else "",
        parts[2] if len(parts) > 2 else ""
    )
    
    if not validation['valid']:
        await message.answer(validation['error'])
        return
    
    await add_exercise_to_block_data(message, state, 
                                   validation['sets'], 
                                   validation['reps_min'], 
                                   validation['reps_max'])

async def process_advanced_block_config(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–ª–æ–∫–∞ —Å 1–ü–ú"""
    parts = message.text.split()
    one_rm_percent = parts[3] if len(parts) == 4 else None
    
    validation = validate_exercise_config(
        parts[0] if len(parts) > 0 else "",
        parts[1] if len(parts) > 1 else "",
        parts[2] if len(parts) > 2 else "",
        one_rm_percent
    )
    
    if not validation['valid']:
        await message.answer(validation['error'])
        return
    
    await add_exercise_to_block_data(message, state,
                                   validation['sets'],
                                   validation['reps_min'], 
                                   validation['reps_max'],
                                   validation['one_rm_percent'])

async def add_exercise_to_block_data(message: Message, state: FSMContext, sets: int, reps_min: int, reps_max: int, one_rm_percent: int = None):
    """–î–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤ –±–ª–æ–∫"""
    data = await state.get_data()
    block_key = data.get('current_block')
    selected_blocks = data.get('selected_blocks', {})
    
    current_block_data = selected_blocks.get(block_key, {'exercises': [], 'description': data.get('current_block_description', '')})
    
    exercise_data = {
        'id': data['current_exercise_id'],
        'name': data['current_exercise_name'],
        'sets': sets,
        'reps_min': reps_min,
        'reps_max': reps_max,
        'one_rm_percent': one_rm_percent,
        'rest_seconds': 90
    }
    
    current_block_data['exercises'].append(exercise_data)
    selected_blocks[block_key] = current_block_data
    await state.update_data(selected_blocks=selected_blocks)
    
    text = f"‚úÖ **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–ª–æ–∫!**\n\n"
    text += f"üí™ {exercise_data['name']}\n"
    text += f"üìä {sets}√ó{reps_min}-{reps_max}"
    if one_rm_percent:
        text += f" ({one_rm_percent}% 1–ü–ú)"
    
    await message.answer(text, parse_mode="Markdown")
    await show_block_exercises_menu(message, state)

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –°–û–°–¢–û–Ø–ù–ò–ô =====
async def process_workout_text_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    current_state = await state.get_state()
    
    if current_state == CreateWorkoutStates.waiting_name:
        await process_workout_name(message, state)
    
    elif current_state == CreateWorkoutStates.waiting_description:
        await process_workout_description(message, state)
    
    elif current_state == CreateWorkoutStates.adding_block_description:
        await process_block_description(message, state)
        
    elif current_state == "simple_block_config":
        await process_simple_block_config(message, state)
        
    elif current_state == "advanced_block_config":
        await process_advanced_block_config(message, state)
    
    elif current_state == "searching_exercise_for_block":
        await handle_block_exercise_search(message, state)

__all__ = ['register_workout_handlers', 'process_workout_text_input']