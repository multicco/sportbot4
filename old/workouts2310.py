# ===== FIXED handlers/workouts.py =====
import logging
from typing import Optional, List, Dict

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database import db_manager
from states.workout_states import CreateWorkoutStates

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–∑ handlers/exercises
# (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ–∞–π–ª handlers/exercises.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–º –∂–µ –ø–∞–∫–µ—Ç–µ)
try:
    from handlers.exercises import search_exercise_menu
except Exception:
    # –ï—Å–ª–∏ –ø—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º None, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º
    search_exercise_menu = None

logger = logging.getLogger(__name__)

# –†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
workouts_router = Router()

# ===== –£–¢–ò–õ–ò–¢–´ =====

def parse_callback_id(callback_data: str, expected_prefix: str = None) -> int:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ ID –∏–∑ callback_data"""
    try:
        if expected_prefix and callback_data.startswith(expected_prefix):
            return int(callback_data.replace(expected_prefix, ""))

        parts = callback_data.split("_")
        if len(parts) < 2:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback_data}")

        return int(parts[-1])

    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data '{callback_data}': {e}")
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑ callback_data: {callback_data}")


# ===== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –¢–†–ï–ù–ò–†–û–í–û–ö =====
@workouts_router.callback_query(F.data == "workouts_menu")
async def workouts_menu(callback: CallbackQuery):
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üèãÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="my_workouts")
    keyboard.button(text="üîç –ù–∞–π—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="find_workout")
    keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="create_workout")
    keyboard.button(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="workout_statistics")
    keyboard.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    keyboard.adjust(2)

    await callback.message.edit_text(
        "üèãÔ∏è **–ú–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫**\n\n"
        "üÜï **–ë–ª–æ—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:**\n"
        "‚Ä¢ üî• –†–∞–∑–º–∏–Ω–∫–∞\n"
        "‚Ä¢ ‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã\n"
        "‚Ä¢ üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å\n"
        "‚Ä¢ üßò –ó–∞–º–∏–Ω–∫–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()


# ===== –°–û–ó–î–ê–ù–ò–ï –¢–†–ï–ù–ò–†–û–í–ö–ò =====
@workouts_router.callback_query(F.data == "create_workout")
async def start_create_workout(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üèãÔ∏è **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏**\n\n"
        "üÜï **–ë–ª–æ—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:**\n"
        "‚Ä¢ üî• –†–∞–∑–º–∏–Ω–∫–∞ - –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–ª–∞\n"
        "‚Ä¢ ‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ù–° - –∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã\n"
        "‚Ä¢ üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å - –≥–ª–∞–≤–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞\n"
        "‚Ä¢ üßò –ó–∞–º–∏–Ω–∫–∞ - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n"
        "_–ù–∞–ø—Ä–∏–º–µ—Ä: \"–°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤–µ—Ä—Ö–∞\" –∏–ª–∏ \"–û–§–ü –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤\"_",
        parse_mode="Markdown"
    )
    await state.set_state(CreateWorkoutStates.waiting_workout_name)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–ª–æ–∫–æ–≤
    await state.update_data(selected_blocks={})

    await callback.answer()


@workouts_router.callback_query(F.data == "skip_workout_description")
async def skip_description(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    data = await state.get_data()

    if 'name' not in data:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", show_alert=True)
        await callback.message.edit_text(
            "üèãÔ∏è **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n"
            "_–ù–∞–ø—Ä–∏–º–µ—Ä: \"–°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤–µ—Ä—Ö–∞\" –∏–ª–∏ \"–û–§–ü –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤\"_",
            parse_mode="Markdown"
        )
        await state.set_state(CreateWorkoutStates.waiting_workout_name)
        return

    await state.update_data(description="")
    await show_block_selection_menu(callback.message, state)
    await callback.answer()


# ===== –í–´–ë–û–† –ë–õ–û–ö–û–í =====
async def show_block_selection_menu(message: Message, state: FSMContext):
    data = await state.get_data()

    workout_name = data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    selected_blocks = data.get('selected_blocks', {})

    text = f"üèóÔ∏è **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {workout_name}**\n\n"
    text += f"üìã **–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫–∏ –¥–ª—è –≤–∞—à–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:**\n\n"

    blocks = {
        'warmup': 'üî• –†–∞–∑–º–∏–Ω–∫–∞',
        'nervous_prep': '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã',   
        'main': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å',
        'cooldown': 'üßò –ó–∞–º–∏–Ω–∫–∞'
    }

    for block_key, block_name in blocks.items():
        status = "‚úÖ" if block_key in selected_blocks else "‚≠ï"
        text += f"{status} **{block_name}**"
        if block_key in selected_blocks:
            exercises_count = len(selected_blocks[block_key].get('exercises', []))
            text += f" ({exercises_count} —É–ø—Ä.)"
            if selected_blocks[block_key].get('description'):
                text += f"\n _{selected_blocks[block_key]['description'][:50]}..._"
        text += "\n\n"

    keyboard = InlineKeyboardBuilder()

    for block_key, block_name in blocks.items():
        action = "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å" if block_key in selected_blocks else "‚ûï –î–æ–±–∞–≤–∏—Ç—å"
        keyboard.button(
            text=f"{action} {block_name.split(' ', 1)[1]}", 
            callback_data=f"select_block_{block_key}"
        )

    if selected_blocks:
        keyboard.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="finish_workout_creation")

    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_workout_creation")
    keyboard.adjust(2)

    try:
        await message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
    except Exception:
        await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")

    await state.set_state(CreateWorkoutStates.selecting_blocks)


@workouts_router.callback_query(F.data.startswith("select_block_"))
async def select_workout_block(callback: CallbackQuery, state: FSMContext):
    block_key = callback.data.split("_")[2]

    block_info = {
        'warmup': {
            'name': 'üî• –†–∞–∑–º–∏–Ω–∫–∞',
            'description': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–ª–∞ –∫ –Ω–∞–≥—Ä—É–∑–∫–µ, —Ä–∞–∑–æ–≥—Ä–µ–≤ –º—ã—à—Ü –∏ —Å—É—Å—Ç–∞–≤–æ–≤',
            'examples': '–õ–µ–≥–∫–æ–µ –∫–∞—Ä–¥–∏–æ, –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞, —Å—É—Å—Ç–∞–≤–Ω–∞—è –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞'
        },
        'nervous_prep': {
            'name': '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã',
            'description': '–ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π',
            'examples': '–í–∑—Ä—ã–≤–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è, –∞–∫—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –ø–ª–∏–æ–º–µ—Ç—Ä–∏–∫–∞'
        },
        'main': {
            'name': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å',
            'description': '–ì–ª–∞–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞',
            'examples': '–û—Å–Ω–æ–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, —Å–∏–ª–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã'
        },
        'cooldown': {
            'name': 'üßò –ó–∞–º–∏–Ω–∫–∞',
            'description': '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
            'examples': '–°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞, –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ'
        }
    }

    info = block_info.get(block_key)
    if not info:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –±–ª–æ–∫", show_alert=True)
        return

    await state.update_data(current_block=block_key)

    text = f"üìã **{info['name']}**\n\n"
    text += f"**–û–ø–∏—Å–∞–Ω–∏–µ:**\n{info['description']}\n\n"
    text += f"**–ü—Ä–∏–º–µ—Ä—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:**\n{info['examples']}\n\n"
    text += f"**–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º –±–ª–æ–∫–æ–º?**"

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìù –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–∫–∞", callback_data="add_block_description")
    keyboard.button(text="‚è≠Ô∏è –°—Ä–∞–∑—É –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º", callback_data="skip_block_description")
    keyboard.button(text="üóëÔ∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –±–ª–æ–∫", callback_data="skip_entire_block")
    keyboard.button(text="üîô –ö –≤—ã–±–æ—Ä—É –±–ª–æ–∫–æ–≤", callback_data="back_to_blocks")
    keyboard.adjust(1)

    await callback.message.edit_text(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()


@workouts_router.callback_query(F.data == "add_block_description")
async def add_block_description(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –±–ª–æ–∫—É"""
    data = await state.get_data()
    block_key = data.get('current_block')

    if not block_key:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫", show_alert=True)
        await show_block_selection_menu(callback.message, state)
        return

    block_names = {
        'warmup': 'üî• –†–∞–∑–º–∏–Ω–∫–∞',
        'nervous_prep': '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã',
        'main': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å',   
        'cooldown': 'üßò –ó–∞–º–∏–Ω–∫–∞'
    }

    await callback.message.edit_text(
        f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–∫–∞: {block_names[block_key]}**\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞:\n"
        f"_–ù–∞–ø—Ä–∏–º–µ—Ä: \"10 –º–∏–Ω—É—Ç –ª–µ–≥–∫–æ–≥–æ –∫–∞—Ä–¥–∏–æ + —Å—É—Å—Ç–∞–≤–Ω–∞—è —Ä–∞–∑–º–∏–Ω–∫–∞\"_\n\n"
        f"–ò–ª–∏ –æ–ø–∏—à–∏—Ç–µ —Ü–µ–ª–∏ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞.",
        parse_mode="Markdown"
    )
    await state.set_state(CreateWorkoutStates.adding_block_description)
    await callback.answer()


# ===== –ü–ï–†–ï–•–û–î –ö –ü–û–ò–°–ö–£ –£–ü–†–ê–ñ–ù–ï–ù–ò–ô =====
@workouts_router.callback_query(F.data == "skip_block_description")
async def skip_block_description(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–∫–∞ –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∏—Å–∫—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
    data = await state.get_data()

    if 'current_block' not in data or not data.get('current_block'):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –±–ª–æ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω", show_alert=True)
        await show_block_selection_menu(callback.message, state)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å –¥–æ–±–∞–≤–ª—è–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤ –±–ª–æ–∫
    await state.update_data(adding_exercise_for_block=data['current_block'])

    # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π ‚Äî –≤—ã–∑—ã–≤–∞–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
    if search_exercise_menu:
        await search_exercise_menu(callback)
        # search_exercise_menu —Å–µ–±–µ –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–≤ exercises.py)
    else:
        # –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –∫ –ø–æ–∏—Å–∫—É
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üîç –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∏—Å–∫—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π", callback_data="search_exercise")
        keyboard.button(text="üîô –ù–∞–∑–∞–¥ –∫ –±–ª–æ–∫—É", callback_data="select_block_" + data['current_block'])
        keyboard.adjust(1)

        await callback.message.edit_text(
            "üîç –ú–µ–Ω—é –ø–æ–∏—Å–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (–∏–º–ø–æ—Ä—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω).\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∏—Å–∫—É.",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )

    await callback.answer()


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í–´–ë–†–ê–ù–ù–û–ì–û –£–ü–†–ê–ñ–ù–ï–ù–ò–Ø –í –ë–õ–û–ö =====
@workouts_router.callback_query(F.data.startswith("use_in_workout_"))
async def use_exercise_in_workout(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    try:
        exercise_id = parse_callback_id(callback.data, "use_in_workout_")
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", show_alert=True)
        return

    data = await state.get_data()
    current_block = data.get('adding_exercise_for_block') or data.get('current_block')

    if not current_block:
        await callback.answer("‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–ª–æ–∫–∞ –ø–æ—Ç–µ—Ä—è–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        await show_block_selection_menu(callback.message, state)
        return

    try:
        async with db_manager.pool.acquire() as conn:
            exercise = await conn.fetchrow(
                "SELECT id, name, muscle_group, category FROM exercises WHERE id = $1",
                exercise_id
            )

        if not exercise:
            await callback.answer("‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É selected_blocks
        selected_blocks = data.get('selected_blocks', {})
        if current_block not in selected_blocks:
            selected_blocks[current_block] = {'description': None, 'exercises': []}

        # –î–æ–±–∞–≤–ª—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        exercise_entry = {
            'id': exercise['id'],
            'name': exercise['name'],
            'muscle_group': exercise['muscle_group'],
            'category': exercise['category'],
            # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ)
            'sets': 3,
            'reps_min': 8,
            'reps_max': 12,
            'one_rm_percent': None,
            'rest_seconds': 90
        }

        selected_blocks[current_block]['exercises'].append(exercise_entry)

        await state.update_data(selected_blocks=selected_blocks)

        await callback.message.edit_text(
            f"‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ **{exercise['name']}** –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–ª–æ–∫!\n\n"
            f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –±–ª–æ–∫–æ–≤...",
            parse_mode="Markdown"
        )

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        await state.update_data(adding_exercise_for_block=None)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –±–ª–æ–∫–æ–≤ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
        await show_block_selection_menu(callback.message, state)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –±–ª–æ–∫: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", show_alert=True)


# ===== –î–û–ë–ê–í–õ–ï–ù–ò–ï –û–ü–ò–°–ê–ù–ò–Ø –ë–õ–û–ö–ê (–¢–ï–ö–°–¢–û–í–´–ô –í–í–û–î) =====
async def process_block_description(message: Message, state: FSMContext):
    description = message.text.strip()

    if len(description) > 200:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    data = await state.get_data()
    current_block = data.get('current_block')

    if not current_block:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –±–ª–æ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω")
        await show_block_selection_menu(message, state)
        return

    selected_blocks = data.get('selected_blocks', {})
    if current_block not in selected_blocks:
        selected_blocks[current_block] = {'description': description, 'exercises': []}
    else:
        selected_blocks[current_block]['description'] = description

    await state.update_data(selected_blocks=selected_blocks)

    await message.answer(
        f"‚úÖ **–û–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ**\n\n"
        f"_{description}_\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –±–ª–æ–∫ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫.",
        parse_mode="Markdown"
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –±–ª–æ–∫–æ–≤
    await show_block_selection_menu(message, state)


# ===== –ó–ê–í–ï–†–®–ï–ù–ò–ï –°–û–ó–î–ê–ù–ò–Ø –¢–†–ï–ù–ò–†–û–í–ö–ò =====
@workouts_router.callback_query(F.data == "finish_workout_creation")
async def finish_workout_creation(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    selected_blocks = data.get('selected_blocks', {})

    try:
        total_exercises = sum(len(block_data.get('exercises', [])) for block_data in selected_blocks.values())

        if total_exercises == 0:
            await callback.answer("‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ!")
            return

        async with db_manager.pool.acquire() as conn:
            workout_id = await conn.fetchval("""
                INSERT INTO workouts (name, description, created_by, visibility, difficulty_level, estimated_duration_minutes)
                VALUES ($1, $2, $3, 'private', 'intermediate', $4)
                RETURNING id
            """, data['name'], data.get('description', ''), user['id'], total_exercises * 8)

            workout_unique_id = await conn.fetchval("SELECT unique_id FROM workouts WHERE id = $1", workout_id)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
            for phase, block_data in selected_blocks.items():
                order_in_phase = 0
                for exercise in block_data.get('exercises', []):
                    order_in_phase += 1
                    await conn.execute("""
                        INSERT INTO workout_exercises (
                            workout_id, exercise_id, phase, order_in_phase, sets,   
                            reps_min, reps_max, one_rm_percent, rest_seconds
                        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
                    """, workout_id, exercise['id'], phase, order_in_phase, exercise['sets'],
                    exercise['reps_min'], exercise['reps_max'], exercise['one_rm_percent'], exercise['rest_seconds'])

        text = f"üéâ **–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n"
        text += f"üèãÔ∏è **–ù–∞–∑–≤–∞–Ω–∏–µ:** {data['name']}\n"
        text += f"üÜî **–ö–æ–¥:** `{workout_unique_id}`\n"
        text += f"üìã **–í—Å–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:** {total_exercises}\n\n"

        block_names = {
            'warmup': 'üî• –†–∞–∑–º–∏–Ω–∫–∞',
            'nervous_prep': '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ù–°',
            'main': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å',
            'cooldown': 'üßò –ó–∞–º–∏–Ω–∫–∞'
        }

        for phase, block_data in selected_blocks.items():
            if block_data.get('exercises'):
                text += f"**{block_names.get(phase, phase)}:** {len(block_data['exercises'])} —É–ø—Ä.\n"
                if block_data.get('description'):
                    text += f" _{block_data['description']}_\n"

        text += f"\nüí° **–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–¥–æ–º** `{workout_unique_id}` —Å –¥—Ä—É–≥–∏–º–∏!"

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üèãÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="my_workouts")
        keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="create_workout")
        keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        keyboard.adjust(2)

        await callback.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )

        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    await callback.answer()


# ===== –û–¢–ú–ï–ù–ê =====
@workouts_router.callback_query(F.data == "cancel_workout_creation")
async def cancel_workout_creation(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üèãÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="my_workouts")
    keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é", callback_data="create_workout")
    keyboard.button(text="üîô –ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º", callback_data="workouts_menu")
    keyboard.adjust(2)

    await callback.message.edit_text(
        "‚ùå **–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n\n"
        "–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()



# ===== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–û–ì–û –í–í–û–î–ê =====
async def process_workout_text_input(message: Message, state: FSMContext):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    data = await state.get_data()
    current_state = await state.get_state()

    # === 1. –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ===
    if current_state == CreateWorkoutStates.waiting_workout_name.state:
        workout_name = message.text.strip()

        if len(workout_name) < 3:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
            return
        if len(workout_name) > 50:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        await state.update_data(name=workout_name)

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üìù –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="add_workout_description")
        keyboard.button(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="skip_workout_description")
        keyboard.adjust(1)

        await message.answer(
            f"‚úÖ **–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:** {workout_name}\n\n"
            f"–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        await state.set_state(CreateWorkoutStates.waiting_workout_description)
        return

    # === 2. –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ===
    if current_state == CreateWorkoutStates.waiting_workout_description.state:
        description = message.text.strip()
        if len(description) > 200:
            await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        await state.update_data(description=description)
        await show_block_selection_menu(message, state)
        return

    # === 3. –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –±–ª–æ–∫–∞ ===
    if current_state == CreateWorkoutStates.adding_block_description.state:
        await process_block_description(message, state)
        return

    # === –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∏ –ø–æ–¥ –æ–¥–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ===
    await message.answer("‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")


# ===== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø =====

def register_workout_handlers(dp):
    dp.include_router(workouts_router)
    logger.info("üèãÔ∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


__all__ = [
    'workouts_router', 'register_workout_handlers', 'process_workout_text_input'
]
