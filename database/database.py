
"""
database.py - –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
–°–æ–≤–º–µ—Å—Ç–∏–º —Å —Ç–≤–æ–∏–º existing –∫–æ–¥–æ–º –≤ main.py
"""

import asyncpg
import logging
from typing import Optional
import os

logger = logging.getLogger(__name__)

class DatabaseManager:
    def __init__(self):
        self.pool: Optional[asyncpg.Pool] = None
        self.database_url = None

    async def init_database(self, config):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º DATABASE_URL –∏–∑ config
            if hasattr(config, 'DATABASE_URL') and config.DATABASE_URL:
                self.database_url = config.DATABASE_URL
            else:
                # –°–æ—Å—Ç–∞–≤–ª—è–µ–º URL –∏–∑ —á–∞—Å—Ç–µ–π
                host = getattr(config, 'DATABASE_HOST', 'localhost')
                port = getattr(config, 'DATABASE_PORT', 5432)
                user = getattr(config, 'DATABASE_USER', 'postgres')
                password = getattr(config, 'DATABASE_PASSWORD', '')
                database = getattr(config, 'DATABASE_NAME', 'sportbot')

                self.database_url = f"postgresql://{user}:{password}@{host}:{port}/{database}"

            # –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            self.pool = await asyncpg.create_pool(
                self.database_url,
                min_size=2,
                max_size=10,
                command_timeout=60,
                server_settings={
                    'jit': 'off',
                    'application_name': 'SportBot'
                }
            )

            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            logger.info(f"üìä Pool —Å–æ–∑–¥–∞–Ω: min=2, max=10")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            async with self.pool.acquire() as conn:
                result = await conn.fetchval("SELECT version();")
                logger.info(f"üîó PostgreSQL: {result.split()[1]}")

            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            if self.pool:
                await self.pool.close()
                self.pool = None
            raise

    async def close_pool(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        if self.pool:
            await self.pool.close()
            self.pool = None
            logger.info("üìä Database pool –∑–∞–∫—Ä—ã—Ç")

    def get_pool(self) -> asyncpg.Pool:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        return self.pool
    async def get_user_by_telegram_id(self, telegram_id: int):
        async with self.pool.acquire() as conn:
            user = await conn.fetchrow(
                "SELECT * FROM users WHERE telegram_id = $1",
                telegram_id
            )
            return user

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î
db_manager = DatabaseManager()

async def init_database():
    """–§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ç–≤–æ–∏–º –∫–æ–¥–æ–º)"""
    from config import config
    return await db_manager.init_database(config)

# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–≤–æ–µ–≥–æ main.py
__all__ = ['init_database', 'db_manager', 'DatabaseManager']
