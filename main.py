
# ===== –ì–õ–ê–í–ù–´–ô –§–ê–ô–õ –ó–ê–ü–£–°–ö–ê –°–ü–û–†–¢–ò–í–ù–û–ì–û –ë–û–¢–ê =====

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent))

from database import init_database, db_manager
from handlers import register_all_handlers
from config import config

# –í–ê–ñ–ù–û: –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∑–¥–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º FSM storage
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode


from handlers.teams import init_teams_database

from database import db_manager


# –°–æ–∑–¥–∞–µ–º storage –¥–ª—è FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π
storage = MemoryStorage()

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = Bot(
    token=config.BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å storage
dp = Dispatcher(storage=storage)

# ===== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø =====
logging.basicConfig(
    level=getattr(logging, config.LOG_LEVEL, logging.INFO),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log', encoding='utf-8')
    ]
)

logger = logging.getLogger(__name__)

async def setup_bot_commands():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    try:
        from aiogram.types import BotCommand, BotCommandScopeDefault

        commands = [
            BotCommand(command='start', description='üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
            BotCommand(command='menu', description='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
            BotCommand(command='teams', description='üèÜ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏'),
            BotCommand(command='help', description='‚ùì –ü–æ–º–æ—â—å'),
            BotCommand(command='stats', description='üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'),
        ]

        await bot.set_my_commands(commands, BotCommandScopeDefault())
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã: {e}")

async def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        if not db_manager.pool:
            raise Exception("–ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        async with db_manager.pool.acquire() as conn:
            result = await conn.fetchval("SELECT 1")
            if result != 1:
                raise Exception("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ë–î")

        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ")
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return False

# async def register_team_handlers_integration():
#     """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è –∫–æ–º–∞–Ω–¥ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø)"""
#     try:
#         # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∏–∑ handlers
#         from handlers import teams

#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è register_team_handlers
#         if hasattr(teams, 'register_team_handlers'):
#             teams.register_team_handlers(dp)
#             logger.info("üèÜ –ú–æ–¥—É–ª—å –∫–æ–º–∞–Ω–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ register_team_handlers")

#         # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç–∞—Ä–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–æ –µ—Å—Ç—å —Ä–æ—É—Ç–µ—Ä (–¥–ª—è –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è)
#         elif hasattr(teams, 'teams_router'):
#             dp.include_router(teams.teams_router)
#             logger.info("üèÜ –ú–æ–¥—É–ª—å –∫–æ–º–∞–Ω–¥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ teams_router")

#         # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —Ç–æ–≥–æ, –Ω–∏ –¥—Ä—É–≥–æ–≥–æ - —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
#         else:
#             logger.warning("‚ö†Ô∏è –í handlers/teams.py –Ω–µ—Ç –Ω—É–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")

#             # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /teams
#             from aiogram.types import Message
#             from aiogram.filters import Command

#             @dp.message(Command("teams"))
#             async def teams_command(message: Message):
#                 await message.answer(
#                     "üèÜ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏</b>\n\n"
#                     "‚ö†Ô∏è –ú–æ–¥—É–ª—å –∫–æ–º–∞–Ω–¥ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
#                     "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏!",
#                     parse_mode="HTML"
#                 )

#             logger.info("üèÜ –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /teams —Å–æ–∑–¥–∞–Ω")

#     except ImportError as e:
#         logger.warning(f"‚ö†Ô∏è –ú–æ–¥—É–ª—å handlers.teams –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")

#         # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –µ—Å–ª–∏ –º–æ–¥—É–ª—å teams –≤–æ–æ–±—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω
#         from aiogram.types import Message
#         from aiogram.filters import Command

#         @dp.message(Command("teams"))
#         async def teams_not_found(message: Message):
#             await message.answer(
#                 "‚ùå <b>–ú–æ–¥—É–ª—å –∫–æ–º–∞–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
#                 "–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª handlers/teams.py –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–∞–º–∏.",
#                 parse_mode="HTML"
#             )

#         logger.info("üö´ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è /teams (–º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω)")

#     except Exception as e:
#         logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è –∫–æ–º–∞–Ω–¥: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞...")
    

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not config.BOT_TOKEN:
            raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

        if not hasattr(config, 'DATABASE_PASSWORD') or not config.DATABASE_PASSWORD:
            logger.warning("‚ö†Ô∏è DATABASE_PASSWORD –Ω–µ –∑–∞–¥–∞–Ω")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        await init_database()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        db_ok = await check_database_connection()
        if not db_ok:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        logger.info("üîó –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
        register_all_handlers(dp)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è –∫–æ–º–∞–Ω–¥ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø!)
        # logger.info("üèÜ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è –∫–æ–º–∞–Ω–¥...")
        # await register_team_handlers_integration()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
        await setup_bot_commands()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
        bot_info = await bot.get_me()
        logger.info(f"ü§ñ –ë–æ—Ç: {bot_info.first_name} (@{bot_info.username})")
        logger.info(f"üÜî ID: {bot_info.id}")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞—Ö
        if hasattr(config, 'ADMIN_USER_IDS') and config.ADMIN_USER_IDS:
            logger.info(f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {len(config.ADMIN_USER_IDS)} —á–µ–ª.")

        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–ª–∏–Ω–≥...")

        # –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞
        await dp.start_polling(
            bot,
            skip_updates=True,
            allowed_updates=dp.resolve_used_update_types()
        )

    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

    finally:
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")

        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î
        try:
            await db_manager.close_pool()
            logger.info("üìä –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î –∑–∞–∫—Ä—ã—Ç—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ë–î: {e}")

        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞
        try:
            await bot.session.close()
            logger.info("ü§ñ –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")

        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    run_bot()
