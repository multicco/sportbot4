# ===== –ü–û–õ–ù–´–ô –§–ê–ô–õ main.py –î–õ–Ø –°–ü–û–†–¢–ò–í–ù–û–ì–û –ë–û–¢–ê =====

import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import BotCommand, BotCommandScopeDefault
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import F

from config import config
from database import init_database, db_manager

# ===== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø =====
logging.basicConfig(
    level=getattr(logging, config.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# ===== –°–û–ó–î–ê–ù–ò–ï –ë–û–¢–ê –ò –î–ò–°–ü–ï–¢–ß–ï–†–ê =====
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# ===== FSM –°–û–°–¢–û–Ø–ù–ò–Ø =====
class CreateWorkoutStates(StatesGroup):
    waiting_name = State()
    waiting_description = State()  
    selecting_blocks = State()
    adding_block_description = State()
    adding_exercises = State()
    configuring_exercise = State()

# ===== –ö–û–ú–ê–ù–î–ê /START =====
@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    existing_user = await db_manager.get_user_by_telegram_id(user.id)
    
    if not existing_user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db_manager.create_user(
            telegram_id=user.id,
            first_name=user.first_name,
            last_name=user.last_name,
            username=user.username
        )
        welcome_text = f"üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!**\n\n"
        welcome_text += f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–º –±–æ—Ç–µ.\n"
    else:
        welcome_text = f"üëã **–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!**\n\n"
    
    welcome_text += f"üèãÔ∏è **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:**\n"
    welcome_text += f"‚Ä¢ üí™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 1–ü–ú –¥–ª—è –ª—é–±—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n"
    welcome_text += f"‚Ä¢ üèãÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
    welcome_text += f"‚Ä¢ üìä –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ RPE\n"
    welcome_text += f"‚Ä¢ üë• –ö–æ–º–∞–Ω–¥–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
    welcome_text += f"‚Ä¢ üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n\n"
    welcome_text += f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="workouts_menu")
    keyboard.button(text="üí™ –¢–µ—Å—Ç 1–ü–ú", callback_data="one_rm_menu")
    keyboard.button(text="üîç –ù–∞–π—Ç–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", callback_data="search_exercise")
    keyboard.button(text="üë• –ö–æ–º–∞–Ω–¥—ã", callback_data="teams_menu")
    keyboard.adjust(2)
    
    await message.answer(
        welcome_text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ =====
@dp.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = callback.from_user
    
    text = f"üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
    text += f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n"
    text += f"üèãÔ∏è **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:**\n"
    text += f"‚Ä¢ üí™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 1–ü–ú –¥–ª—è –ª—é–±—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n"
    text += f"‚Ä¢ üèãÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å –±–ª–æ–∫–∞–º–∏\n"
    text += f"‚Ä¢ üìä –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ RPE\n"
    text += f"‚Ä¢ üë• –ö–æ–º–∞–Ω–¥–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
    text += f"‚Ä¢ üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n\n"
    text += f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="workouts_menu")
    keyboard.button(text="üí™ –¢–µ—Å—Ç 1–ü–ú", callback_data="one_rm_menu")
    keyboard.button(text="üîç –ù–∞–π—Ç–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", callback_data="search_exercise")
    keyboard.button(text="üë• –ö–æ–º–∞–Ω–¥—ã", callback_data="teams_menu")
    keyboard.adjust(2)
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

# ===== –ú–ï–ù–Æ –¢–†–ï–ù–ò–†–û–í–û–ö =====
@dp.callback_query(F.data == "workouts_menu")
async def workouts_menu(callback: CallbackQuery):
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üèãÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="my_workouts")
    keyboard.button(text="üîç –ù–∞–π—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="find_workout")
    keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="create_workout")
    keyboard.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    keyboard.adjust(1)
    
    await callback.message.edit_text(
        "üèãÔ∏è **–ú–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫**\n\n"
        "üÜï **–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ë–ª–æ—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞!**\n"
        "‚Ä¢ üî• –†–∞–∑–º–∏–Ω–∫–∞\n"
        "‚Ä¢ ‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã\n"
        "‚Ä¢ üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å\n"
        "‚Ä¢ üßò –ó–∞–º–∏–Ω–∫–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

# ===== –ú–ï–ù–Æ 1–ü–ú –¢–ï–°–¢–û–í =====
@dp.callback_query(F.data == "one_rm_menu")
async def one_rm_menu(callback: CallbackQuery):
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üí™ –ù–æ–≤—ã–π —Ç–µ—Å—Ç 1–ü–ú", callback_data="new_1rm_test")
    keyboard.button(text="üìä –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="my_1rm_results")
    keyboard.button(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="1rm_stats")
    keyboard.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    keyboard.adjust(1)
    
    await callback.message.edit_text(
        "üí™ **–¢–µ—Å—Ç—ã 1–ü–ú**\n\n"
        "üî¨ **–ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞:**\n"
        "‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª—é–±—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n"
        "‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –ø–æ 3 —Ñ–æ—Ä–º—É–ª–∞–º\n"
        "‚Ä¢ –£—á–µ—Ç –≤–µ—Å–∞ —Ç–µ–ª–∞\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

# ===== –ú–ï–ù–Æ –ü–û–ò–°–ö–ê –£–ü–†–ê–ñ–ù–ï–ù–ò–ô =====
@dp.callback_query(F.data == "search_exercise")
async def search_exercise_menu(callback: CallbackQuery):
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data="search_by_name")
    keyboard.button(text="üìÇ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="search_by_category")
    keyboard.button(text="üí™ –ü–æ –≥—Ä—É–ø–ø–∞–º –º—ã—à—Ü", callback_data="search_by_muscle")
    keyboard.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    keyboard.adjust(1)
    
    await callback.message.edit_text(
        "üîç **–ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π**\n\n"
        "–ë–∞–∑–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç 25+ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø –º—ã—à—Ü\n"
        "–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

# ===== –ú–ï–ù–Æ –ö–û–ú–ê–ù–î =====
@dp.callback_query(F.data == "teams_menu")
async def teams_menu(callback: CallbackQuery):
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    
    keyboard = InlineKeyboardBuilder()
    
    if user['role'] in ['coach', 'admin']:
        keyboard.button(text="üèóÔ∏è –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="create_team")
        keyboard.button(text="üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ", callback_data="add_student")
        keyboard.button(text="üèÜ –ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã", callback_data="my_teams")
        keyboard.button(text="üë• –ú–æ–∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–µ", callback_data="my_students")
    else:
        keyboard.button(text="üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ", callback_data="join_team")
        keyboard.button(text="üë®‚Äçüè´ –ù–∞–π—Ç–∏ —Ç—Ä–µ–Ω–µ—Ä–∞", callback_data="find_coach")
        keyboard.button(text="üë• –ú–æ—è –∫–æ–º–∞–Ω–¥–∞", callback_data="my_team")
    
    keyboard.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    keyboard.adjust(1)
    
    role_text = "—Ç—Ä–µ–Ω–µ—Ä–∞" if user['role'] in ['coach', 'admin'] else "–∏–≥—Ä–æ–∫–∞"
    
    await callback.message.edit_text(
        f"üë• **–ö–æ–º–∞–Ω–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞**\n\n"
        f"**–í–∞—à–∞ —Ä–æ–ª—å:** {role_text.title()}\n\n"
        f"üéØ **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
        f"‚Ä¢ –ö–æ–º–∞–Ω–¥–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        f"‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Ç—Ä–µ–Ω–µ—Ä—Å—Ç–≤–æ\n"
        f"‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
        f"‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∫–æ–¥–æ–≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

# ===== –ü–û–ò–°–ö –£–ü–†–ê–ñ–ù–ï–ù–ò–ô =====
@dp.callback_query(F.data == "search_by_name")
async def search_exercise_by_name(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üîç **–ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `–∂–∏–º`, `–ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è`, `–ø–ª–∞–Ω–∫–∞`",
        parse_mode="Markdown"
    )
    await state.set_state("waiting_search")
    await callback.answer()

@dp.callback_query(F.data == "search_by_category")
async def search_by_category(callback: CallbackQuery):
    try:
        async with db_manager.pool.acquire() as conn:
            categories = await conn.fetch("SELECT DISTINCT category FROM exercises ORDER BY category")
        
        keyboard = InlineKeyboardBuilder()
        for cat in categories:
            keyboard.button(text=f"üìÇ {cat['category']}", callback_data=f"cat_{cat['category']}")
        keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="search_exercise")
        keyboard.adjust(2)
        
        await callback.message.edit_text(
            "üìÇ **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:**",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await callback.answer()

@dp.callback_query(F.data.startswith("cat_"))
async def show_category_exercises(callback: CallbackQuery):
    category = callback.data[4:]
    
    try:
        async with db_manager.pool.acquire() as conn:
            exercises = await conn.fetch(
                "SELECT name, muscle_group, description FROM exercises WHERE category = $1 ORDER BY name",
                category
            )
        
        if exercises:
            text = f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}**\n\n"
            for ex in exercises[:15]:
                text += f"üí™ **{ex['name']}**\n"
                text += f"üéØ {ex['muscle_group']}\n"
                text += f"üìù {ex['description'][:80]}...\n\n"
        else:
            text = f"‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="search_by_category")
        keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await callback.answer()

# ===== –¢–ï–°–¢–´ 1–ü–ú =====
@dp.callback_query(F.data == "new_1rm_test")
async def new_1rm_test(callback: CallbackQuery):
    try:
        async with db_manager.pool.acquire() as conn:
            exercises = await conn.fetch("""
                SELECT id, name, category, muscle_group
                FROM exercises 
                WHERE category = '–°–∏–ª–æ–≤—ã–µ'
                ORDER BY name
                LIMIT 15
            """)
        
        if exercises:
            text = "üí™ **–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞ 1–ü–ú:**\n\n"
            keyboard = InlineKeyboardBuilder()
            
            for ex in exercises:
                keyboard.button(
                    text=f"üí™ {ex['name']}", 
                    callback_data=f"1rm_{ex['id']}"
                )
            
            keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="one_rm_menu")
            keyboard.adjust(1)
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
        else:
            await callback.message.edit_text(
                "‚ùå –°–∏–ª–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ë–î.",
                parse_mode="Markdown"
            )
            
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await callback.answer()

@dp.callback_query(F.data.startswith("1rm_"))
async def select_1rm_exercise(callback: CallbackQuery, state: FSMContext):
    exercise_id = callback.data.split("_")[1]
    
    try:
        async with db_manager.pool.acquire() as conn:
            exercise = await conn.fetchrow("SELECT name, category FROM exercises WHERE id = $1", int(exercise_id))
        
        if exercise:
            await state.update_data(exercise_id=exercise_id, exercise_name=exercise['name'])
            
            await callback.message.edit_text(
                f"üí™ **–¢–µ—Å—Ç 1–ü–ú: {exercise['name']}**\n\n"
                f"üî¨ **–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:**\n"
                f"`–≤–µ—Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è`\n\n"
                f"**–ü—Ä–∏–º–µ—Ä—ã:**\n"
                f"‚Ä¢ `80 5` (80 –∫–≥ –Ω–∞ 5 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π)\n"
                f"‚Ä¢ `60 10` (60 –∫–≥ –Ω–∞ 10 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π)\n\n"
                f"–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç 1–ü–ú –ø–æ 3 —Ñ–æ—Ä–º—É–ª–∞–º –∏ –≤—ã–≤–µ–¥–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ!",
                parse_mode="Markdown"
            )
            await state.set_state("waiting_1rm_data")
        else:
            await callback.message.edit_text("‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await callback.answer()

@dp.callback_query(F.data == "my_1rm_results")
async def show_my_1rm_results(callback: CallbackQuery):
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    
    try:
        async with db_manager.pool.acquire() as conn:
            results = await conn.fetch("""
                SELECT e.name, orm.weight, orm.tested_at, orm.reps, orm.test_weight
                FROM one_rep_max orm
                JOIN exercises e ON orm.exercise_id = e.id
                WHERE orm.user_id = $1
                ORDER BY orm.tested_at DESC
                LIMIT 10
            """, user['id'])
        
        if results:
            text = f"üìä **–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã 1–ü–ú:**\n\n"
            for result in results:
                date = result['tested_at'].strftime('%d.%m.%Y')
                text += f"üí™ **{result['name']}**\n"
                text += f"üèãÔ∏è 1–ü–ú: **{result['weight']} –∫–≥**\n"
                text += f"üìù –¢–µ—Å—Ç: {result['test_weight']}–∫–≥ √ó {result['reps']} —Ä–∞–∑\n"
                text += f"üìÖ {date}\n\n"
        else:
            text = "üìä **–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ 1–ü–ú**\n\n" \
                   "–ü—Ä–æ–π–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞!"
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üí™ –ù–æ–≤—ã–π —Ç–µ—Å—Ç", callback_data="new_1rm_test")
        keyboard.button(text="üîô –ö —Ç–µ—Å—Ç–∞–º", callback_data="one_rm_menu")
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await callback.answer()

# ===== –°–û–ó–î–ê–ù–ò–ï –¢–†–ï–ù–ò–†–û–í–ö–ò –° –ë–õ–û–ö–ê–ú–ò =====
@dp.callback_query(F.data == "create_workout")
async def start_create_workout(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üèãÔ∏è **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏**\n\n"
        "üÜï **–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –±–ª–æ—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞!**\n"
        "‚Ä¢ üî• –†–∞–∑–º–∏–Ω–∫–∞\n"
        "‚Ä¢ ‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã\n"
        "‚Ä¢ üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å\n"
        "‚Ä¢ üßò –ó–∞–º–∏–Ω–∫–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n"
        "_–ù–∞–ø—Ä–∏–º–µ—Ä: \"–°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤–µ—Ä—Ö–∞\" –∏–ª–∏ \"–û–§–ü –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤\"_",
        parse_mode="Markdown"
    )
    await state.set_state(CreateWorkoutStates.waiting_name)
    await callback.answer()

@dp.callback_query(F.data == "skip_description")
async def skip_description(callback: CallbackQuery, state: FSMContext):
    await state.update_data(description="")
    await show_block_selection_menu(callback.message, state)
    await callback.answer()

async def show_block_selection_menu(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –±–ª–æ–∫–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    data = await state.get_data()
    selected_blocks = data.get('selected_blocks', {})
    
    text = f"üèóÔ∏è **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {data['name']}**\n\n"
    text += f"üìã **–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫–∏ –¥–ª—è –≤–∞—à–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:**\n\n"
    
    blocks = {
        'warmup': 'üî• –†–∞–∑–º–∏–Ω–∫–∞',
        'nervous_prep': '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã', 
        'main': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å',
        'cooldown': 'üßò –ó–∞–º–∏–Ω–∫–∞'
    }
    
    for block_key, block_name in blocks.items():
        status = "‚úÖ" if block_key in selected_blocks else "‚≠ï"
        text += f"{status} **{block_name}**"
        if block_key in selected_blocks:
            exercises_count = len(selected_blocks[block_key].get('exercises', []))
            text += f" ({exercises_count} —É–ø—Ä.)"
            if selected_blocks[block_key].get('description'):
                text += f"\n   _üìù {selected_blocks[block_key]['description'][:50]}..._"
        text += "\n\n"
    
    keyboard = InlineKeyboardBuilder()
    
    for block_key, block_name in blocks.items():
        action = "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å" if block_key in selected_blocks else "‚ûï –î–æ–±–∞–≤–∏—Ç—å"
        keyboard.button(
            text=f"{action} {block_name.split(' ', 1)[1]}", 
            callback_data=f"select_block_{block_key}"
        )
    
    if selected_blocks:
        keyboard.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="finish_workout_creation")
    
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_workout_creation")
    keyboard.adjust(2)
    
    try:
        await message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
    except:
        await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
    
    await state.set_state(CreateWorkoutStates.selecting_blocks)

@dp.callback_query(F.data.startswith("select_block_"))
async def select_workout_block(callback: CallbackQuery, state: FSMContext):
    block_key = callback.data.split("_", 2)[2]
    
    block_info = {
        'warmup': {
            'name': 'üî• –†–∞–∑–º–∏–Ω–∫–∞',
            'description': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–ª–∞ –∫ –Ω–∞–≥—Ä—É–∑–∫–µ, —Ä–∞–∑–æ–≥—Ä–µ–≤ –º—ã—à—Ü –∏ —Å—É—Å—Ç–∞–≤–æ–≤',
            'examples': '–õ–µ–≥–∫–æ–µ –∫–∞—Ä–¥–∏–æ, –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞, —Å—É—Å—Ç–∞–≤–Ω–∞—è –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞'
        },
        'nervous_prep': {
            'name': '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã',
            'description': '–ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π',
            'examples': '–í–∑—Ä—ã–≤–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è, –∞–∫—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –ø–ª–∏–æ–º–µ—Ç—Ä–∏–∫–∞'
        },
        'main': {
            'name': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å',
            'description': '–ì–ª–∞–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞',
            'examples': '–û—Å–Ω–æ–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, —Å–∏–ª–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã'
        },
        'cooldown': {
            'name': 'üßò –ó–∞–º–∏–Ω–∫–∞',
            'description': '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
            'examples': '–°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞, –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ'
        }
    }
    
    info = block_info[block_key]
    await state.update_data(current_block=block_key)
    
    text = f"üìã **{info['name']}**\n\n"
    text += f"**–û–ø–∏—Å–∞–Ω–∏–µ:**\n{info['description']}\n\n"
    text += f"**–ü—Ä–∏–º–µ—Ä—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:**\n{info['examples']}\n\n"
    text += f"**–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º –±–ª–æ–∫–æ–º?**"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìù –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–∫–∞", callback_data="add_block_description")
    keyboard.button(text="‚è≠Ô∏è –°—Ä–∞–∑—É –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º", callback_data="skip_block_description")
    keyboard.button(text="üóëÔ∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –±–ª–æ–∫", callback_data="skip_entire_block")
    keyboard.button(text="üîô –ö –≤—ã–±–æ—Ä—É –±–ª–æ–∫–æ–≤", callback_data="back_to_blocks")
    keyboard.adjust(1)
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.callback_query(F.data == "add_block_description")
async def add_block_description(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    block_key = data.get('current_block')
    
    block_names = {
        'warmup': 'üî• –†–∞–∑–º–∏–Ω–∫–∞',
        'nervous_prep': '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã',
        'main': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å', 
        'cooldown': 'üßò –ó–∞–º–∏–Ω–∫–∞'
    }
    
    await callback.message.edit_text(
        f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–∫–∞: {block_names[block_key]}**\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞:\n"
        f"_–ù–∞–ø—Ä–∏–º–µ—Ä: \"10 –º–∏–Ω—É—Ç –ª–µ–≥–∫–æ–≥–æ –∫–∞—Ä–¥–∏–æ + —Å—É—Å—Ç–∞–≤–Ω–∞—è —Ä–∞–∑–º–∏–Ω–∫–∞\"_\n\n"
        f"–ò–ª–∏ –æ–ø–∏—à–∏—Ç–µ —Ü–µ–ª–∏ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞.",
        parse_mode="Markdown"
    )
    await state.set_state(CreateWorkoutStates.adding_block_description)
    await callback.answer()

@dp.callback_query(F.data == "skip_block_description")
async def skip_block_description(callback: CallbackQuery, state: FSMContext):
    await state.update_data(current_block_description="")
    await show_block_exercises_menu(callback.message, state)
    await callback.answer()

@dp.callback_query(F.data == "skip_entire_block")
async def skip_entire_block(callback: CallbackQuery, state: FSMContext):
    await show_block_selection_menu(callback.message, state)
    await callback.answer()

@dp.callback_query(F.data == "back_to_blocks")
async def back_to_blocks(callback: CallbackQuery, state: FSMContext):
    await show_block_selection_menu(callback.message, state)
    await callback.answer()

async def show_block_exercises_menu(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –±–ª–æ–∫"""
    data = await state.get_data()
    block_key = data.get('current_block')
    selected_blocks = data.get('selected_blocks', {})
    current_block_data = selected_blocks.get(block_key, {'exercises': [], 'description': data.get('current_block_description', '')})
    
    block_names = {
        'warmup': 'üî• –†–∞–∑–º–∏–Ω–∫–∞',
        'nervous_prep': '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã',
        'main': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å',
        'cooldown': 'üßò –ó–∞–º–∏–Ω–∫–∞'
    }
    
    exercises = current_block_data['exercises']
    
    text = f"üèãÔ∏è **{block_names[block_key]}**\n\n"
    
    if current_block_data['description']:
        text += f"üìù _{current_block_data['description']}_\n\n"
    
    if exercises:
        text += f"**üìã –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –±–ª–æ–∫–µ: {len(exercises)}**\n"
        for i, ex in enumerate(exercises, 1):
            text += f"{i}. {ex['name']} - {ex['sets']}√ó{ex['reps_min']}-{ex['reps_max']}"
            if ex.get('one_rm_percent'):
                text += f" ({ex['one_rm_percent']}% 1–ü–ú)"
            text += "\n"
        text += "\n"
    
    text += "‚ûï **–î–æ–±–∞–≤—å—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –±–ª–æ–∫:**"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîç –ù–∞–π—Ç–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", callback_data="find_exercise_for_block")
    keyboard.button(text="üìÇ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="browse_categories_for_block")
    
    if exercises:
        keyboard.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–ª–æ–∫", callback_data="finish_current_block")
        keyboard.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ", callback_data="remove_last_block_exercise")
    else:
        keyboard.button(text="‚úÖ –ü—É—Å—Ç–æ–π –±–ª–æ–∫", callback_data="finish_current_block")
    
    keyboard.button(text="üîô –ö –≤—ã–±–æ—Ä—É –±–ª–æ–∫–æ–≤", callback_data="back_to_blocks")
    keyboard.adjust(2)
    
    try:
        await message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
    except:
        await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
    
    await state.set_state(CreateWorkoutStates.adding_exercises)

@dp.callback_query(F.data == "find_exercise_for_block")
async def find_exercise_for_block(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üîç **–ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –±–ª–æ–∫–∞**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n"
        "_–ù–∞–ø—Ä–∏–º–µ—Ä: –∂–∏–º, –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è, –ø–ª–∞–Ω–∫–∞, —Ä–∞—Å—Ç—è–∂–∫–∞_",
        parse_mode="Markdown"
    )
    await state.set_state("searching_exercise_for_block")
    await callback.answer()

@dp.callback_query(F.data == "browse_categories_for_block")
async def browse_categories_for_block(callback: CallbackQuery):
    try:
        async with db_manager.pool.acquire() as conn:
            categories = await conn.fetch("SELECT DISTINCT category FROM exercises ORDER BY category")
        
        keyboard = InlineKeyboardBuilder()
        for cat in categories:
            keyboard.button(
                text=f"üìÇ {cat['category']}", 
                callback_data=f"block_cat_{cat['category']}"
            )
        keyboard.button(text="üîô –ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º –±–ª–æ–∫–∞", callback_data="back_to_block_exercises")
        keyboard.adjust(2)
        
        await callback.message.edit_text(
            "üìÇ **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:**",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await callback.answer()

@dp.callback_query(F.data.startswith("block_cat_"))
async def show_block_category_exercises(callback: CallbackQuery, state: FSMContext):
    category = callback.data[10:]
    
    try:
        async with db_manager.pool.acquire() as conn:
            exercises = await conn.fetch(
                "SELECT id, name, muscle_group FROM exercises WHERE category = $1 ORDER BY name",
                category
            )
        
        if exercises:
            text = f"üìÇ **{category} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:**\n\n"
            keyboard = InlineKeyboardBuilder()
            
            for ex in exercises:
                keyboard.button(
                    text=f"{ex['name']} ({ex['muscle_group']})", 
                    callback_data=f"add_block_ex_{ex['id']}"
                )
            
            keyboard.button(text="üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="browse_categories_for_block")
            keyboard.adjust(1)
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
        else:
            await callback.message.edit_text(f"‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await callback.answer()

@dp.callback_query(F.data == "back_to_block_exercises")
async def back_to_block_exercises(callback: CallbackQuery, state: FSMContext):
    await show_block_exercises_menu(callback.message, state)
    await callback.answer()

@dp.callback_query(F.data.startswith("add_block_ex_"))
async def add_exercise_to_block(callback: CallbackQuery, state: FSMContext):
    exercise_id = int(callback.data.split("_")[3])
    
    try:
        async with db_manager.pool.acquire() as conn:
            exercise = await conn.fetchrow(
                "SELECT id, name, category, muscle_group FROM exercises WHERE id = $1", 
                exercise_id
            )
        
        if exercise:
            await state.update_data(
                current_exercise_id=exercise_id,
                current_exercise_name=exercise['name']
            )
            
            text = f"‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –±–ª–æ–∫–∞**\n\n"
            text += f"üí™ **{exercise['name']}**\n"
            text += f"üìÇ {exercise['category']} ‚Ä¢ {exercise['muscle_group']}\n\n"
            text += f"**–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**"
            
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üèãÔ∏è –ü—Ä–æ—Å—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", callback_data="simple_block_config")
            keyboard.button(text="üìä –° –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏ –æ—Ç 1–ü–ú", callback_data="advanced_block_config")
            keyboard.button(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="back_to_block_exercises")
            keyboard.adjust(1)
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
            
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await callback.answer()

@dp.callback_query(F.data == "simple_block_config")
async def simple_block_config(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    exercise_name = data.get('current_exercise_name', '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ')
    
    text = f"üèãÔ∏è **–ü—Ä–æ—Å—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: {exercise_name}**\n\n"
    text += f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
    text += f"`–ø–æ–¥—Ö–æ–¥—ã –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è_–º–∏–Ω –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è_–º–∞–∫—Å`\n\n"
    text += f"**–ü—Ä–∏–º–µ—Ä—ã:**\n"
    text += f"‚Ä¢ `3 8 12` - 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 8-12 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
    text += f"‚Ä¢ `4 6 8` - 4 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 6-8 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
    text += f"‚Ä¢ `1 60 60` - 1 –ø–æ–¥—Ö–æ–¥ –Ω–∞ 60 —Å–µ–∫—É–Ω–¥ (–¥–ª—è –ø–ª–∞–Ω–∫–∏)\n"
    text += f"‚Ä¢ `2 10 15` - 2 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 10-15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"
    
    await callback.message.edit_text(text, parse_mode="Markdown")
    await state.set_state("simple_block_config")
    await callback.answer()

@dp.callback_query(F.data == "advanced_block_config")
async def advanced_block_config(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    exercise_name = data.get('current_exercise_name', '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ')
    exercise_id = data.get('current_exercise_id')
    
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    
    try:
        async with db_manager.pool.acquire() as conn:
            user_1rm = await conn.fetchrow("""
                SELECT weight FROM one_rep_max 
                WHERE user_id = $1 AND exercise_id = $2 
                ORDER BY tested_at DESC LIMIT 1
            """, user['id'], exercise_id)
        
        text = f"üìä **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å 1–ü–ú: {exercise_name}**\n\n"
        
        if user_1rm:
            current_1rm = float(user_1rm['weight'])
            text += f"üí™ **–í–∞—à —Ç–µ–∫—É—â–∏–π 1–ü–ú:** {current_1rm} –∫–≥\n\n"
            text += f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            text += f"`–ø–æ–¥—Ö–æ–¥—ã –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è_–º–∏–Ω –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è_–º–∞–∫—Å –ø—Ä–æ—Ü–µ–Ω—Ç_1–ü–ú`\n\n"
            text += f"**–ü—Ä–∏–º–µ—Ä—ã:**\n"
            text += f"‚Ä¢ `4 6 8 80` - 4√ó6-8 –Ω–∞ 80% (‚âà{round(current_1rm * 0.8, 1)}–∫–≥)\n"
            text += f"‚Ä¢ `3 8 12 70` - 3√ó8-12 –Ω–∞ 70% (‚âà{round(current_1rm * 0.7, 1)}–∫–≥)\n"
            text += f"‚Ä¢ `5 3 5 85` - 5√ó3-5 –Ω–∞ 85% (‚âà{round(current_1rm * 0.85, 1)}–∫–≥)"
            
            await callback.message.edit_text(text, parse_mode="Markdown")
            await state.set_state("advanced_block_config")
        else:
            text += f"‚ö†Ô∏è **–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ 1–ü–ú –¥–ª—è —ç—Ç–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è**\n\n"
            text += f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ë–ï–ó –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∏–ª–∏ –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç 1–ü–ú."
            
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üí™ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç 1–ü–ú", callback_data=f"1rm_{exercise_id}")
            keyboard.button(text="üîô –ü—Ä–æ—Å—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", callback_data="simple_block_config")
            
            await callback.message.edit_text(
                text, 
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await callback.answer()

@dp.callback_query(F.data == "finish_current_block")
async def finish_current_block(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    block_key = data.get('current_block')
    selected_blocks = data.get('selected_blocks', {})
    
    current_block_data = selected_blocks.get(block_key, {'exercises': [], 'description': ''})
    current_block_data['description'] = data.get('current_block_description', '')
    selected_blocks[block_key] = current_block_data
    
    await state.update_data(selected_blocks=selected_blocks)
    await callback.answer("‚úÖ –ë–ª–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    await show_block_selection_menu(callback.message, state)

@dp.callback_query(F.data == "finish_workout_creation")
async def finish_workout_creation(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    selected_blocks = data.get('selected_blocks', {})
    
    try:
        total_exercises = sum(len(block_data['exercises']) for block_data in selected_blocks.values())
        
        if total_exercises == 0:
            await callback.answer("‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ!")
            return
        
        async with db_manager.pool.acquire() as conn:
            workout_id = await conn.fetchval("""
                INSERT INTO workouts (name, description, created_by, visibility, difficulty_level, estimated_duration_minutes)
                VALUES ($1, $2, $3, 'private', 'intermediate', $4)
                RETURNING id
            """, data['name'], data.get('description', ''), user['id'], total_exercises * 8)
            
            workout_unique_id = await conn.fetchval("SELECT unique_id FROM workouts WHERE id = $1", workout_id)
            
            exercise_order = 0
            for phase, block_data in selected_blocks.items():
                for exercise in block_data['exercises']:
                    exercise_order += 1
                    await conn.execute("""
                        INSERT INTO workout_exercises (
                            workout_id, exercise_id, phase, order_in_phase, sets, 
                            reps_min, reps_max, one_rm_percent, rest_seconds
                        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
                    """, workout_id, exercise['id'], phase, exercise_order, exercise['sets'], 
                         exercise['reps_min'], exercise['reps_max'], 
                         exercise['one_rm_percent'], exercise['rest_seconds'])
        
        text = f"üéâ **–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n"
        text += f"üèãÔ∏è **–ù–∞–∑–≤–∞–Ω–∏–µ:** {data['name']}\n"
        text += f"üÜî **–ö–æ–¥:** `{workout_unique_id}`\n"
        text += f"üìã **–í—Å–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:** {total_exercises}\n\n"
        
        block_names = {
            'warmup': 'üî• –†–∞–∑–º–∏–Ω–∫–∞',
            'nervous_prep': '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ù–°',
            'main': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å',
            'cooldown': 'üßò –ó–∞–º–∏–Ω–∫–∞'
        }
        
        for phase, block_data in selected_blocks.items():
            if block_data['exercises']:
                text += f"**{block_names[phase]}:** {len(block_data['exercises'])} —É–ø—Ä.\n"
                if block_data.get('description'):
                    text += f"   _{block_data['description']}_\n"
        
        text += f"\nüí° **–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–¥–æ–º** `{workout_unique_id}` —Å –¥—Ä—É–≥–∏–º–∏!"
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üèãÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="my_workouts")
        keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="create_workout")
        keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        keyboard.adjust(2)
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
        await state.clear()
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    await callback.answer()

@dp.callback_query(F.data == "cancel_workout_creation")
async def cancel_workout_creation(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå **–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ**",
        parse_mode="Markdown"
    )
    await callback.answer()

# ===== –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –ë–£–î–£–©–ò–• –§–£–ù–ö–¶–ò–ô =====
@dp.callback_query(F.data.in_([
    "my_workouts", "find_workout", "1rm_stats", "search_by_muscle",
    "create_team", "add_student", "my_teams", "my_students",
    "join_team", "find_coach", "my_team"
]))
async def feature_coming_soon(callback: CallbackQuery):
    feature_names = {
        "my_workouts": "–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
        "find_workout": "–ü–æ–∏—Å–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", 
        "1rm_stats": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ 1–ü–ú",
        "search_by_muscle": "–ü–æ–∏—Å–∫ –ø–æ –º—ã—à—Ü–∞–º",
        "create_team": "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã",
        "add_student": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ",
        "my_teams": "–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã",
        "my_students": "–ú–æ–∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–µ", 
        "join_team": "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–∞–Ω–¥–µ",
        "find_coach": "–ü–æ–∏—Å–∫ —Ç—Ä–µ–Ω–µ—Ä–∞",
        "my_team": "–ú–æ—è –∫–æ–º–∞–Ω–¥–∞"
    }
    
    feature_name = feature_names.get(callback.data, "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è")
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    
    await callback.message.edit_text(
        f"üöß **{feature_name}**\n\n"
        f"–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        f"–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

# ===== –ï–î–ò–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô =====
@dp.message()
async def handle_user_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    current_state = await state.get_state()
    
    # ===== –°–û–ó–î–ê–ù–ò–ï –¢–†–ï–ù–ò–†–û–í–ö–ò –° –ë–õ–û–ö–ê–ú–ò =====
    if current_state == CreateWorkoutStates.waiting_name:
        await process_workout_name(message, state)
        return
    
    elif current_state == CreateWorkoutStates.waiting_description:
        await process_workout_description(message, state)
        return
    
    elif current_state == CreateWorkoutStates.adding_block_description:
        description = message.text.strip()
        
        if len(description) > 200:
            await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
            
        await state.update_data(current_block_description=description)
        
        await message.answer(
            f"‚úÖ **–û–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:**\n\n"
            f"_{description}_\n\n"
            f"–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –±–ª–æ–∫...",
            parse_mode="Markdown"
        )
        
        await show_block_exercises_menu(message, state)
        return
    
    elif current_state == "simple_block_config":
        await process_simple_block_config(message, state)
        return
        
    elif current_state == "advanced_block_config":
        await process_advanced_block_config(message, state)
        return
    
    elif current_state == "searching_exercise_for_block":
        await handle_block_exercise_search(message, state)
        return
    
    # ===== –ü–û–ò–°–ö –£–ü–†–ê–ñ–ù–ï–ù–ò–ô =====
    elif current_state == "waiting_search":
        search_term = message.text.lower()
        
        try:
            async with db_manager.pool.acquire() as conn:
                exercises = await conn.fetch("""
                    SELECT name, category, muscle_group, description 
                    FROM exercises 
                    WHERE LOWER(name) LIKE $1 
                       OR LOWER(category) LIKE $1
                       OR LOWER(muscle_group) LIKE $1
                    ORDER BY 
                        CASE WHEN LOWER(name) LIKE $1 THEN 1 ELSE 2 END,
                        name
                    LIMIT 10
                """, f"%{search_term}%")
            
            if exercises:
                text = f"üîç **–ù–∞–π–¥–µ–Ω–æ: {len(exercises)} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π**\n\n"
                for ex in exercises:
                    text += f"üí™ **{ex['name']}**\n"
                    text += f"üìÇ {ex['category']} ‚Ä¢ {ex['muscle_group']}\n"
                    text += f"üìù {ex['description'][:100]}...\n\n"
            else:
                text = f"‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n" \
                       f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞."
                
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_by_name")
            keyboard.button(text="üîô –ö –ø–æ–∏—Å–∫—É", callback_data="search_exercise")
            keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            
            await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
            await state.clear()
            
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
    
    # ===== 1–ü–ú –¢–ï–°–¢–´ =====
    elif current_state == "waiting_1rm_data":
        try:
            parts = message.text.split()
            if len(parts) != 2:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ: `–≤–µ—Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è`\n–ü—Ä–∏–º–µ—Ä: `80 5`")
                return
            
            weight = float(parts[0])
            reps = int(parts[1])
            
            if weight <= 0 or reps <= 0 or reps > 30:
                await message.answer("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n‚Ä¢ –í–µ—Å > 0\n‚Ä¢ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è 1-30")
                return
            
            # –†–∞—Å—á–µ—Ç 1–ü–ú –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º
            def calculate_1rm(w, r):
                w = float(w)
                r = int(r)
                
                if r == 1:
                    return {
                        'brzycki': w,
                        'epley': w,
                        'alternative': w,
                        'average': w
                    }
                
                brzycki = w / (1.0278 - 0.0278 * r)
                epley = w * (1 + r / 30.0)
                alternative = w * (1 + 0.025 * r)
                average = (brzycki + epley + alternative) / 3.0
                
                return {
                    'brzycki': round(brzycki, 1),
                    'epley': round(epley, 1), 
                    'alternative': round(alternative, 1),
                    'average': round(average, 1)
                }
            
            results = calculate_1rm(weight, reps)
            state_data = await state.get_data()
            exercise_name = state_data.get('exercise_name', '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            user = await db_manager.get_user_by_telegram_id(message.from_user.id)
            async with db_manager.pool.acquire() as conn:
                await conn.execute("""
                    INSERT INTO one_rep_max (user_id, exercise_id, weight, reps, test_weight, 
                                           formula_brzycki, formula_epley, formula_alternative, formula_average)
                    VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
                """, user['id'], int(state_data['exercise_id']), results['average'], 
                     reps, weight, results['brzycki'], results['epley'], 
                     results['alternative'], results['average'])
            
            text = f"üéâ **–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ 1–ü–ú**\n\n"
            text += f"üí™ **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:** {exercise_name}\n"
            text += f"üìä **–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:** {weight} –∫–≥ √ó {reps} —Ä–∞–∑\n\n"
            text += f"**üìà –†–∞—Å—á–µ—Ç –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º:**\n"
            text += f"‚Ä¢ –ë–∂–∏—Ü–∫–æ–≥–æ: {results['brzycki']} –∫–≥\n"
            text += f"‚Ä¢ –≠–ø–ª–∏: {results['epley']} –∫–≥\n" 
            text += f"‚Ä¢ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è: {results['alternative']} –∫–≥\n\n"
            text += f"üéØ **–í–∞—à 1–ü–ú: {results['average']} –∫–≥**\n"
            text += f"_(—Å—Ä–µ–¥–Ω–µ–µ –ø–æ 3 —Ñ–æ—Ä–º—É–ª–∞–º)_"
            
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üí™ –ù–æ–≤—ã–π —Ç–µ—Å—Ç", callback_data="new_1rm_test")
            keyboard.button(text="üìä –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="my_1rm_results")
            keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            
            await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
            await state.clear()
            
        except ValueError:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞.\n–ü—Ä–∏–º–µ—Ä: `80 5`")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    else:
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        
        await message.answer(
            "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –±–æ—Ç–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.\n"
            "–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=keyboard.as_markup()
        )

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
async def process_workout_name(message: Message, state: FSMContext):
    workout_name = message.text.strip()
    
    if len(workout_name) < 3:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
        return
    
    if len(workout_name) > 100:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(name=workout_name)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="skip_description")
    
    await message.answer(
        f"‚úÖ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {workout_name}\n\n"
        f"üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n"
        f"_–ù–∞–ø—Ä–∏–º–µ—Ä: \"–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∏–ª—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –≥—Ä—É–ø–ø –º—ã—à—Ü\"_\n\n"
        f"–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await state.set_state(CreateWorkoutStates.waiting_description)

async def process_workout_description(message: Message, state: FSMContext):
    description = message.text.strip()
    await state.update_data(description=description)
    await show_block_selection_menu(message, state)

async def handle_block_exercise_search(message: Message, state: FSMContext):
    search_term = message.text.lower()
    
    try:
        async with db_manager.pool.acquire() as conn:
            exercises = await conn.fetch("""
                SELECT id, name, category, muscle_group 
                FROM exercises 
                WHERE LOWER(name) LIKE $1 
                   OR LOWER(muscle_group) LIKE $1
                ORDER BY name
                LIMIT 10
            """, f"%{search_term}%")
        
        if exercises:
            text = f"üîç **–ù–∞–π–¥–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {len(exercises)}**\n\n"
            keyboard = InlineKeyboardBuilder()
            
            for ex in exercises:
                keyboard.button(
                    text=f"{ex['name']} ({ex['muscle_group']})", 
                    callback_data=f"add_block_ex_{ex['id']}"
                )
            
            keyboard.button(text="üîô –ö –±–ª–æ–∫—É", callback_data="back_to_block_exercises")
            keyboard.adjust(1)
            
            await message.answer(
                text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
            await state.set_state(CreateWorkoutStates.adding_exercises)
        else:
            await message.answer(f"‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

async def process_simple_block_config(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–ª–æ–∫–∞"""
    try:
        parts = message.text.split()
        if len(parts) != 3:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `–ø–æ–¥—Ö–æ–¥—ã –º–∏–Ω_–ø–æ–≤—Ç –º–∞–∫—Å_–ø–æ–≤—Ç`")
            return
        
        sets = int(parts[0])
        reps_min = int(parts[1])
        reps_max = int(parts[2])
        
        if not (1 <= sets <= 10) or not (1 <= reps_min <= 200) or not (reps_min <= reps_max <= 200):
            await message.answer("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n‚Ä¢ –ü–æ–¥—Ö–æ–¥—ã: 1-10\n‚Ä¢ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: 1-200\n‚Ä¢ –ú–∏–Ω ‚â§ –ú–∞–∫—Å")
            return
        
        await add_exercise_to_block_data(message, state, sets, reps_min, reps_max)
        
    except ValueError:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞. –ü—Ä–∏–º–µ—Ä: `3 8 12`")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def process_advanced_block_config(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–ª–æ–∫–∞ —Å 1–ü–ú"""
    try:
        parts = message.text.split()
        if len(parts) not in [3, 4]:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: `–ø–æ–¥—Ö–æ–¥—ã –º–∏–Ω_–ø–æ–≤—Ç –º–∞–∫—Å_–ø–æ–≤—Ç [–ø—Ä–æ—Ü–µ–Ω—Ç_1–ü–ú]`")
            return
        
        sets = int(parts[0])
        reps_min = int(parts[1])
        reps_max = int(parts[2])
        one_rm_percent = int(parts[3]) if len(parts) == 4 else None
        
        if not (1 <= sets <= 10) or not (1 <= reps_min <= 50) or not (reps_min <= reps_max <= 50):
            await message.answer("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n‚Ä¢ –ü–æ–¥—Ö–æ–¥—ã: 1-10\n‚Ä¢ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: 1-50")
            return
            
        if one_rm_percent and not (30 <= one_rm_percent <= 120):
            await message.answer("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç 1–ü–ú –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 30% –¥–æ 120%")
            return
        
        await add_exercise_to_block_data(message, state, sets, reps_min, reps_max, one_rm_percent)
        
    except ValueError:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞. –ü—Ä–∏–º–µ—Ä: `4 6 8 80`")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def add_exercise_to_block_data(message: Message, state: FSMContext, sets: int, reps_min: int, reps_max: int, one_rm_percent: int = None):
    """–î–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤ –±–ª–æ–∫"""
    data = await state.get_data()
    block_key = data.get('current_block')
    selected_blocks = data.get('selected_blocks', {})
    
    current_block_data = selected_blocks.get(block_key, {'exercises': [], 'description': data.get('current_block_description', '')})
    
    exercise_data = {
        'id': data['current_exercise_id'],
        'name': data['current_exercise_name'],
        'sets': sets,
        'reps_min': reps_min,
        'reps_max': reps_max,
        'one_rm_percent': one_rm_percent,
        'rest_seconds': 90
    }
    
    current_block_data['exercises'].append(exercise_data)
    selected_blocks[block_key] = current_block_data
    await state.update_data(selected_blocks=selected_blocks)
    
    text = f"‚úÖ **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–ª–æ–∫!**\n\n"
    text += f"üí™ {exercise_data['name']}\n"
    text += f"üìä {sets}√ó{reps_min}-{reps_max}"
    if one_rm_percent:
        text += f" ({one_rm_percent}% 1–ü–ú)"
    
    await message.answer(text, parse_mode="Markdown")
    await show_block_exercises_menu(message, state)

# ===== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø =====
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await init_database()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—É—Å–∫–µ
        bot_info = await bot.get_me()
        logger.info(f"üöÄ –ë–æ—Ç {bot_info.first_name} (@{bot_info.username}) –∑–∞–ø—É—â–µ–Ω!")
        
        # –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        await db_manager.close_pool()
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())