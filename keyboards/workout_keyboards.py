# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ –¢–†–ï–ù–ò–†–û–í–û–ö =====

from aiogram.utils.keyboard import InlineKeyboardBuilder

def get_workout_blocks_keyboard(selected_blocks=None):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –±–ª–æ–∫–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    if selected_blocks is None:
        selected_blocks = {}
    
    blocks = {
        'warmup': 'üî• –†–∞–∑–º–∏–Ω–∫–∞',
        'nervous_prep': '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ù–°', 
        'main': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å',
        'cooldown': 'üßò –ó–∞–º–∏–Ω–∫–∞'
    }
    
    keyboard = InlineKeyboardBuilder()
    
    for block_key, block_name in blocks.items():
        action = "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å" if block_key in selected_blocks else "‚ûï –î–æ–±–∞–≤–∏—Ç—å"
        keyboard.button(
            text=f"{action} {block_name.split(' ', 1)[1]}", 
            callback_data=f"select_block_{block_key}"
        )
    
    if selected_blocks:
        keyboard.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="finish_workout_creation")
    
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_workout_creation")
    keyboard.adjust(2)
    
    return keyboard.as_markup()

def get_block_description_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –±–ª–æ–∫–∞"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìù –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–∫–∞", callback_data="add_block_description")
    keyboard.button(text="‚è≠Ô∏è –°—Ä–∞–∑—É –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º", callback_data="skip_block_description")
    keyboard.button(text="üóëÔ∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –±–ª–æ–∫", callback_data="skip_entire_block")
    keyboard.button(text="üîô –ö –≤—ã–±–æ—Ä—É –±–ª–æ–∫–æ–≤", callback_data="back_to_blocks")
    keyboard.adjust(1)
    
    return keyboard.as_markup()

def get_block_exercises_keyboard(has_exercises=False):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –±–ª–æ–∫"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîç –ù–∞–π—Ç–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", callback_data="find_exercise_for_block")
    keyboard.button(text="üìÇ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="browse_categories_for_block")
    
    if has_exercises:
        keyboard.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–ª–æ–∫", callback_data="finish_current_block")
        keyboard.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ", callback_data="remove_last_block_exercise")
    else:
        keyboard.button(text="‚úÖ –ü—É—Å—Ç–æ–π –±–ª–æ–∫", callback_data="finish_current_block")
    
    keyboard.button(text="üîô –ö –≤—ã–±–æ—Ä—É –±–ª–æ–∫–æ–≤", callback_data="back_to_blocks")
    keyboard.adjust(2)
    
    return keyboard.as_markup()

def get_exercise_config_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üèãÔ∏è –ü—Ä–æ—Å—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", callback_data="simple_block_config")
    keyboard.button(text="üìä –° –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏ –æ—Ç 1–ü–ú", callback_data="advanced_block_config")
    keyboard.button(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="back_to_block_exercises")
    keyboard.adjust(1)
    
    return keyboard.as_markup()

def get_workout_creation_success_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üèãÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="my_workouts")
    keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="create_workout")
    keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    keyboard.adjust(2)
    
    return keyboard.as_markup()

def get_workout_description_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="skip_description")
    
    return keyboard.as_markup()

def get_block_categories_keyboard(categories):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –±–ª–æ–∫–∞"""
    keyboard = InlineKeyboardBuilder()
    
    for cat in categories:
        keyboard.button(
            text=f"üìÇ {cat['category']}", 
            callback_data=f"block_cat_{cat['category']}"
        )
    
    keyboard.button(text="üîô –ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º –±–ª–æ–∫–∞", callback_data="back_to_block_exercises")
    keyboard.adjust(2)
    
    return keyboard.as_markup()

def get_block_exercise_list_keyboard(exercises):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –±–ª–æ–∫–∞"""
    keyboard = InlineKeyboardBuilder()
    
    for ex in exercises:
        keyboard.button(
            text=f"{ex['name']} ({ex['muscle_group']})", 
            callback_data=f"add_block_ex_{ex['id']}"
        )
    
    keyboard.button(text="üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="browse_categories_for_block")
    keyboard.adjust(1)
    
    return keyboard.as_markup()

def get_advanced_config_no_1rm_keyboard(exercise_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ 1–ü–ú –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üí™ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç 1–ü–ú", callback_data=f"1rm_{exercise_id}")
    keyboard.button(text="üîô –ü—Ä–æ—Å—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", callback_data="simple_block_config")
    
    return keyboard.as_markup()

def get_workout_list_keyboard(workouts):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    keyboard = InlineKeyboardBuilder()
    
    for workout in workouts:
        keyboard.button(
            text=f"üèãÔ∏è {workout['name']}", 
            callback_data=f"select_workout_{workout['id']}"
        )
    
    keyboard.button(text="üîô –ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º", callback_data="workouts_menu")
    keyboard.adjust(1)
    
    return keyboard.as_markup()

def get_workout_details_keyboard(workout_id, is_owner=False):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    keyboard = InlineKeyboardBuilder()
    
    keyboard.button(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data=f"start_workout_{workout_id}")
    keyboard.button(text="üìã –î–µ—Ç–∞–ª–∏", callback_data=f"workout_details_{workout_id}")
    
    if is_owner:
        keyboard.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_workout_{workout_id}")
        keyboard.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_workout_{workout_id}")
    else:
        keyboard.button(text="üìù –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"copy_workout_{workout_id}")
    
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="my_workouts")
    keyboard.adjust(2)
    
    return keyboard.as_markup()

def get_workout_execution_keyboard(current_exercise_index, total_exercises):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    keyboard = InlineKeyboardBuilder()
    
    if current_exercise_index > 0:
        keyboard.button(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ", callback_data="prev_exercise")
    
    keyboard.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–¥—Ö–æ–¥", callback_data="complete_set")
    
    if current_exercise_index < total_exercises - 1:
        keyboard.button(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ", callback_data="next_exercise")
    
    keyboard.button(text="‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data="pause_workout")
    keyboard.button(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="finish_workout")
    
    keyboard.adjust(2)
    
    return keyboard.as_markup()

def get_rest_timer_keyboard(rest_seconds):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–∞–π–º–µ—Ä–∞ –æ—Ç–¥—ã—Ö–∞"""
    keyboard = InlineKeyboardBuilder()
    
    keyboard.button(text="‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ç–¥—ã—Ö", callback_data="skip_rest")
    keyboard.button(text="‚ûï +30 —Å–µ–∫", callback_data="add_rest_30")
    keyboard.button(text="‚ûñ -30 —Å–µ–∫", callback_data="sub_rest_30")
    keyboard.button(text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop_rest")
    
    keyboard.adjust(2)
    
    return keyboard.as_markup()

def get_rpe_rating_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ü–µ–Ω–∫–∏ RPE (1-10)"""
    keyboard = InlineKeyboardBuilder()
    
    for i in range(1, 11):
        keyboard.button(text=f"{i}", callback_data=f"rpe_{i}")
    
    keyboard.button(text="‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ RPE?", callback_data="rpe_help")
    keyboard.adjust(5)
    
    return keyboard.as_markup()

def get_workout_finished_keyboard(workout_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    keyboard = InlineKeyboardBuilder()
    
    keyboard.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data=f"workout_stats_{workout_id}")
    keyboard.button(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data=f"repeat_workout_{workout_id}")
    keyboard.button(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"rate_workout_{workout_id}")
    keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    
    keyboard.adjust(1)
    
    return keyboard.as_markup()

__all__ = [
    'get_workout_blocks_keyboard',
    'get_block_description_keyboard',
    'get_block_exercises_keyboard',
    'get_exercise_config_keyboard',
    'get_workout_creation_success_keyboard',
    'get_workout_description_keyboard',
    'get_block_categories_keyboard',
    'get_block_exercise_list_keyboard',
    'get_advanced_config_no_1rm_keyboard',
    'get_workout_list_keyboard',
    'get_workout_details_keyboard',
    'get_workout_execution_keyboard',
    'get_rest_timer_keyboard',
    'get_rpe_rating_keyboard',
    'get_workout_finished_keyboard'
]