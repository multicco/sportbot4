
"""
handlers/teams.py - –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø –° FSM
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
"""

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

# ============== FSM –°–û–°–¢–û–Ø–ù–ò–Ø ==============

class TeamStates(StatesGroup):
    waiting_team_name = State()
    waiting_team_description = State()
    waiting_player_name = State()
    waiting_student_name = State()

# ============== –ü–†–û–°–¢–ê–Ø –ë–î –í –ü–ê–ú–Ø–¢–ò ==============

teams_db = {}  # {user_id: [{"name": "Team", "description": "Desc", "players": [], "created": datetime}]}
students_db = {}  # {user_id: [{"name": "Student", "added": datetime}]}

# ============== –†–û–£–¢–ï–† ==============

teams_router = Router()

# ============== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ==============

@teams_router.message(Command("teams"))
async def teams_main_command(message: Message, state: FSMContext):
    """–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /teams"""
    await state.clear()  # –°–±—Ä–æ—Å –ª—é–±—ã—Ö FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="create_team_simple")],
        [InlineKeyboardButton(text="üë• –ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã", callback_data="my_teams_simple")],
        [InlineKeyboardButton(text="üë§ –ü–æ–¥–æ–ø–µ—á–Ω—ã–µ", callback_data="my_students_simple")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="teams_stats_simple")]
    ])

    user_id = message.from_user.id
    teams_count = len(teams_db.get(user_id, []))
    students_count = len(students_db.get(user_id, []))

    await message.answer(
        f"üèÜ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏</b>\n\n"
        f"üìä –ö–æ–º–∞–Ω–¥: {teams_count}\n"
        f"üë§ –ü–æ–¥–æ–ø–µ—á–Ω—ã—Ö: {students_count}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

    logger.info(f"User {message.from_user.id} opened teams menu")

# ============== –°–û–ó–î–ê–ù–ò–ï –ö–û–ú–ê–ù–î–´ ==============

@teams_router.callback_query(F.data == "create_team_simple")
async def create_team_simple(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
    await state.set_state(TeamStates.waiting_team_name)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="teams_back")]
    ])

    await callback.message.edit_text(
        "üÜï <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

    logger.info(f"User {callback.from_user.id} started team creation")

# üî• –≠–¢–û –ö–õ–Æ–ß–ï–í–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö - –ï–ì–û –ù–ï –•–í–ê–¢–ê–õ–û!
@teams_router.message(TeamStates.waiting_team_name)
async def process_team_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    team_name = message.text.strip()

    logger.info(f"üìù User {message.from_user.id} –≤–≤–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {team_name}")

    if len(team_name) < 2:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞:")
        return

    if len(team_name) > 50:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    await state.update_data(team_name=team_name)
    await state.set_state(TeamStates.waiting_team_description)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_description")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="teams_back")]
    ])

    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{team_name}</b>\n\n"
        "üìã –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@teams_router.message(TeamStates.waiting_team_description)
async def process_team_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    description = message.text.strip()

    logger.info(f"üìù User {message.from_user.id} –≤–≤–µ–ª –æ–ø–∏—Å–∞–Ω–∏–µ: {description}")

    if len(description) > 200:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    data = await state.get_data()
    team_name = data.get('team_name', '–ö–æ–º–∞–Ω–¥–∞')

    await create_team_in_db(message.from_user.id, team_name, description, message, state)

@teams_router.callback_query(F.data == "skip_description")
async def skip_description(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"""
    data = await state.get_data()
    team_name = data.get('team_name', '–ö–æ–º–∞–Ω–¥–∞')

    await create_team_in_db(callback.from_user.id, team_name, "", callback, state, is_callback=True)

async def create_team_in_db(user_id: int, name: str, description: str, update, state: FSMContext, is_callback: bool = False):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –ë–î"""
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    if user_id not in teams_db:
        teams_db[user_id] = []

    team = {
        "name": name,
        "description": description,
        "players": [],
        "created": datetime.now()
    }

    teams_db[user_id].append(team)

    await state.clear()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="add_player")],
        [InlineKeyboardButton(text="üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã", callback_data="my_teams_simple")],
        [InlineKeyboardButton(text="üèÜ –ö –∫–æ–º–∞–Ω–¥–∞–º", callback_data="teams_back")]
    ])

    text = (
        f"‚úÖ <b>–ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
        f"üèÜ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n"
        f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
        f"üë• <b>–ò–≥—Ä–æ–∫–æ–≤:</b> 0\n"
        f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {team['created'].strftime('%d.%m.%Y %H:%M')}"
    )

    if is_callback:
        await update.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        await update.answer("‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞!")
    else:
        await update.answer(text, reply_markup=keyboard, parse_mode="HTML")

    logger.info(f"‚úÖ User {user_id} —Å–æ–∑–¥–∞–ª –∫–æ–º–∞–Ω–¥—É: {name}")

# ============== –ú–û–ò –ö–û–ú–ê–ù–î–´ ==============

@teams_router.callback_query(F.data == "my_teams_simple")
async def my_teams_simple(callback: CallbackQuery, state: FSMContext):
    """–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã"""
    await state.clear()

    user_teams = teams_db.get(callback.from_user.id, [])

    if not user_teams:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∫–æ–º–∞–Ω–¥—É", callback_data="create_team_simple")],
            [InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–∞–º", callback_data="teams_back")]
        ])

        await callback.message.edit_text(
            "üë• <b>–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–æ–º–∞–Ω–¥—É!",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    else:
        teams_text = ""
        for i, team in enumerate(user_teams, 1):
            teams_text += f"{i}. üèÜ {team['name']} ({len(team['players'])} –∏–≥—Ä.)\n"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="create_team_simple")],
            [InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–∞–º", callback_data="teams_back")]
        ])

        await callback.message.edit_text(
            f"üë• <b>–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã ({len(user_teams)})</b>\n\n"
            f"{teams_text}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    await callback.answer()

# ============== –ü–û–î–û–ü–ï–ß–ù–´–ï (—É–ø—Ä–æ—â–µ–Ω–Ω–æ) ==============

@teams_router.callback_query(F.data == "my_students_simple")
async def my_students_simple(callback: CallbackQuery, state: FSMContext):
    """–ú–æ–∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–µ"""
    await state.clear()

    user_students = students_db.get(callback.from_user.id, [])

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ", callback_data="add_student")],
        [InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–∞–º", callback_data="teams_back")]
    ])

    if not user_students:
        await callback.message.edit_text(
            "üë§ <b>–ú–æ–∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–µ</b>\n\n"
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    else:
        students_text = ""
        for i, student in enumerate(user_students, 1):
            students_text += f"{i}. üë§ {student['name']}\n"

        await callback.message.edit_text(
            f"üë§ <b>–ú–æ–∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–µ ({len(user_students)})</b>\n\n"
            f"{students_text}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    await callback.answer()

@teams_router.callback_query(F.data == "add_student")
async def add_student(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ"""
    await state.set_state(TeamStates.waiting_student_name)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="my_students_simple")]
    ])

    await callback.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ</b>\n\n"
        "üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@teams_router.message(TeamStates.waiting_student_name)
async def process_student_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ"""
    student_name = message.text.strip()

    logger.info(f"üìù User {message.from_user.id} –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ: {student_name}")

    if len(student_name) < 1:
        await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º:")
        return

    if len(student_name) > 50:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ
    if message.from_user.id not in students_db:
        students_db[message.from_user.id] = []

    student = {
        "name": student_name,
        "added": datetime.now()
    }

    students_db[message.from_user.id].append(student)

    await state.clear()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_student")],
        [InlineKeyboardButton(text="üë§ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö", callback_data="my_students_simple")],
        [InlineKeyboardButton(text="üèÜ –ö –∫–æ–º–∞–Ω–¥–∞–º", callback_data="teams_back")]
    ])

    await message.answer(
        f"‚úÖ <b>–ü–æ–¥–æ–ø–µ—á–Ω—ã–π –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {student_name}\n"
        f"üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω:</b> {student['added'].strftime('%d.%m.%Y %H:%M')}",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

    logger.info(f"‚úÖ User {message.from_user.id} –¥–æ–±–∞–≤–∏–ª –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ: {student_name}")

# ============== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ==============

@teams_router.callback_query(F.data == "teams_stats_simple")
async def teams_stats_simple(callback: CallbackQuery, state: FSMContext):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥"""
    await state.clear()

    user_teams = teams_db.get(callback.from_user.id, [])
    user_students = students_db.get(callback.from_user.id, [])

    total_players = sum(len(team["players"]) for team in user_teams)

    await callback.message.edit_text(
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥</b>\n\n"
        f"üìà <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
        f"üèÜ –ö–æ–º–∞–Ω–¥ —Å–æ–∑–¥–∞–Ω–æ: {len(user_teams)}\n"
        f"üë• –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {total_players}\n"
        f"üë§ –ü–æ–¥–æ–ø–µ—á–Ω—ã—Ö: {len(user_students)}\n"
        f"üéØ –í—Å–µ–≥–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤: {total_players + len(user_students)}\n\n"
        f"üíæ <i>–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏ (–¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞)</i>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–∞–º", callback_data="teams_back")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()

# ============== –ù–ê–ó–ê–î ==============

@teams_router.callback_query(F.data == "teams_back")
async def teams_back(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∫–æ–º–∞–Ω–¥"""
    await state.clear()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="create_team_simple")],
        [InlineKeyboardButton(text="üë• –ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã", callback_data="my_teams_simple")],
        [InlineKeyboardButton(text="üë§ –ü–æ–¥–æ–ø–µ—á–Ω—ã–µ", callback_data="my_students_simple")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="teams_stats_simple")]
    ])

    user_id = callback.from_user.id
    teams_count = len(teams_db.get(user_id, []))
    students_count = len(students_db.get(user_id, []))

    await callback.message.edit_text(
        f"üèÜ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏</b>\n\n"
        f"üìä –ö–æ–º–∞–Ω–¥: {teams_count}\n"
        f"üë§ –ü–æ–¥–æ–ø–µ—á–Ω—ã—Ö: {students_count}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

# ============== –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò ==============

@teams_router.callback_query(F.data == "add_player")
async def add_player_placeholder(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞"""
    await state.clear()

    await callback.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞</b>\n\n"
        "üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n"
        "–ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–∞–º", callback_data="teams_back")]
        ]),
        parse_mode="HTML"
    )
    await callback.answer()

# ============== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ==============

def register_team_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    dp.include_router(teams_router)
    logger.info("‚úÖ Team handlers registered successfully")

__all__ = ['register_team_handlers']
