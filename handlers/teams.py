
"""
handlers/teams.py - –ü–æ–ª–Ω—ã–π –º–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–º–∏
‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç —Å PostgreSQL
‚úÖ –†–∞–∑–¥–µ–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã (–º–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–æ–≤) –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–æ–¥–æ–ø–µ—á–Ω—ã–µ  
‚úÖ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã –æ—Ç init.py
‚úÖ –ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è, –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
"""

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
import logging

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–µ–π –ë–î (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å)
try:
    from database.teams_database import TeamsDB
    from database import db_manager  # –¢–≤–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π pool
except ImportError:
    # –ï—Å–ª–∏ –Ω–µ—Ç –º–æ–¥—É–ª—è –ë–î - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
    TeamsDB = None
    db_manager = None
    logging.warning("Teams database module not found - using stub")

logger = logging.getLogger(__name__)

# ============== FSM –°–û–°–¢–û–Ø–ù–ò–Ø ==============

class TeamStates(StatesGroup):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    waiting_team_name = State()
    waiting_team_description = State()
    waiting_sport_type = State()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É
    waiting_player_first_name = State()
    waiting_player_last_name = State()
    waiting_player_position = State()
    waiting_player_jersey = State()
    waiting_player_telegram_id = State()

    # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥–æ–ø–µ—á–Ω—ã–π
    waiting_student_first_name = State()
    waiting_student_last_name = State()
    waiting_student_specialization = State()
    waiting_student_level = State()
    waiting_student_telegram_id = State()

# ============== –†–û–£–¢–ï–† –ò –ë–î ==============

teams_router = Router()
teams_db = None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ register_team_handlers

"""
handlers/teams.py - –ü–æ–ª–Ω—ã–π –º–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–º–∏
‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç —Å PostgreSQL
‚úÖ –†–∞–∑–¥–µ–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã (–º–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–æ–≤) –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–æ–¥–æ–ø–µ—á–Ω—ã–µ
‚úÖ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã –æ—Ç init.py
"""

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
import logging

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–µ–π –ë–î (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å)
from database.teams_database import TeamsDB
from database import db_manager  # –¢–≤–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π pool

logger = logging.getLogger(__name__)

# ============== FSM –°–û–°–¢–û–Ø–ù–ò–Ø ==============

class TeamStates(StatesGroup):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    waiting_team_name = State()
    waiting_team_description = State()
    waiting_sport_type = State()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É
    waiting_player_first_name = State()
    waiting_player_last_name = State()
    waiting_player_position = State()
    waiting_player_jersey = State()
    waiting_player_telegram_id = State()

    # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥–æ–ø–µ—á–Ω—ã–π
    waiting_student_first_name = State()
    waiting_student_last_name = State()
    waiting_student_specialization = State()
    waiting_student_level = State()
    waiting_student_telegram_id = State()

# ============== –†–û–£–¢–ï–† –ò –ë–î ==============

teams_router = Router()
teams_db = None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ register_team_handlers

# ============== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ==============

@teams_router.message(Command("teams"))
async def cmd_teams(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /teams"""
    await state.clear()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–µ—Ä–∞ –≤ –ë–î
    await teams_db.register_coach(
        message.from_user.id, 
        message.from_user.first_name,
        message.from_user.last_name,
        message.from_user.username
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèÜ –ö–æ–º–∞–Ω–¥—ã", callback_data="teams_menu")],
        [InlineKeyboardButton(text="üë§ –ü–æ–¥–æ–ø–µ—á–Ω—ã–µ", callback_data="students_menu")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_menu")]
    ])

    await message.answer(
        "üèüÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–º–∏</b>\n\n"
        "üìã <b>–ö–æ–º–∞–Ω–¥—ã</b> - –≥—Ä—É–ø–ø—ã –∏–≥—Ä–æ–∫–æ–≤ (—Ñ—É—Ç–±–æ–ª, –±–∞—Å–∫–µ—Ç–±–æ–ª, etc)\n"
        "üë§ <b>–ü–æ–¥–æ–ø–µ—á–Ω—ã–µ</b> - –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@teams_router.callback_query(F.data == "main_menu")
async def cb_main_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèÜ –ö–æ–º–∞–Ω–¥—ã", callback_data="teams_menu")],
        [InlineKeyboardButton(text="üë§ –ü–æ–¥–æ–ø–µ—á–Ω—ã–µ", callback_data="students_menu")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_menu")]
    ])

    await callback.message.edit_text(
        "üèüÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–º–∏</b>\n\n"
        "üìã <b>–ö–æ–º–∞–Ω–¥—ã</b> - –≥—Ä—É–ø–ø—ã –∏–≥—Ä–æ–∫–æ–≤ (—Ñ—É—Ç–±–æ–ª, –±–∞—Å–∫–µ—Ç–±–æ–ª, etc)\n"
        "üë§ <b>–ü–æ–¥–æ–ø–µ—á–Ω—ã–µ</b> - –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

# ============== –ú–ï–ù–Æ –ö–û–ú–ê–ù–î ==============

@teams_router.callback_query(F.data == "teams_menu")
async def cb_teams_menu(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥"""
    await state.clear()

    teams = await teams_db.get_coach_teams(callback.from_user.id)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="create_team")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã", callback_data="my_teams")],
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

    teams_text = f"–£ –≤–∞—Å {len(teams)} –∫–æ–º–∞–Ω–¥(—ã)" if teams else "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–∞–Ω–¥"

    await callback.message.edit_text(
        f"üèÜ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏</b>\n\n"
        f"üìä {teams_text}\n\n"
        "–ö–æ–º–∞–Ω–¥—ã –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

# ============== –°–û–ó–î–ê–ù–ò–ï –ö–û–ú–ê–ù–î–´ ==============

@teams_router.callback_query(F.data == "create_team")
async def cb_create_team(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
    await state.set_state(TeamStates.waiting_team_name)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="teams_menu")]
    ])

    await callback.message.edit_text(
        "üÜï <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (2-100 —Å–∏–º–≤–æ–ª–æ–≤):\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã: <i>\"–°–ø–∞—Ä—Ç–∞–∫ U-16\", \"–ñ–µ–Ω—Å–∫–∞—è —Å–±–æ—Ä–Ω–∞—è\", \"–û—Å–Ω–æ–≤–∞\"</i>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@teams_router.message(TeamStates.waiting_team_name)
async def process_team_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    name = message.text.strip()

    if len(name) < 2:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞:")
        return

    if len(name) > 100:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    await state.update_data(team_name=name)
    await state.set_state(TeamStates.waiting_team_description)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_description")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="teams_menu")]
    ])

    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{name}</b>\n\n"
        "üìã –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã: <i>\"–Æ–Ω–æ—à–µ—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ —Ñ—É—Ç–±–æ–ª—É\", \"–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∂–µ–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞\"</i>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@teams_router.message(TeamStates.waiting_team_description)
async def process_team_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    description = message.text.strip()

    if len(description) > 500:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    await state.update_data(team_description=description)
    await state.set_state(TeamStates.waiting_sport_type)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öΩ –§—É—Ç–±–æ–ª", callback_data="sport_football")],
        [InlineKeyboardButton(text="üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª", callback_data="sport_basketball")],
        [InlineKeyboardButton(text="üèê –í–æ–ª–µ–π–±–æ–ª", callback_data="sport_volleyball")],
        [InlineKeyboardButton(text="üèí –•–æ–∫–∫–µ–π", callback_data="sport_hockey")],
        [InlineKeyboardButton(text="üèÉ –õ–µ–≥–∫–∞—è –∞—Ç–ª–µ—Ç–∏–∫–∞", callback_data="sport_athletics")],
        [InlineKeyboardButton(text="ü•ä –ï–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞", callback_data="sport_combat")],
        [InlineKeyboardButton(text="üèä –ü–ª–∞–≤–∞–Ω–∏–µ", callback_data="sport_swimming")],
        [InlineKeyboardButton(text="üí™ –û–§–ü", callback_data="sport_general")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="teams_menu")]
    ])

    data = await state.get_data()
    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{data['team_name']}</b>\n"
        f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
        "üèÉ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@teams_router.callback_query(F.data.startswith("sport_"))
@teams_router.callback_query(F.data == "skip_description")
async def cb_finalize_team(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    data = await state.get_data()

    if callback.data == "skip_description":
        sport_type = "general"
        description = ""
    else:
        sport_mapping = {
            "sport_football": "—Ñ—É—Ç–±–æ–ª",
            "sport_basketball": "–±–∞—Å–∫–µ—Ç–±–æ–ª", 
            "sport_volleyball": "–≤–æ–ª–µ–π–±–æ–ª",
            "sport_hockey": "—Ö–æ–∫–∫–µ–π",
            "sport_athletics": "–ª–µ–≥–∫–∞—è –∞—Ç–ª–µ—Ç–∏–∫–∞",
            "sport_combat": "–µ–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞",
            "sport_swimming": "–ø–ª–∞–≤–∞–Ω–∏–µ",
            "sport_general": "–û–§–ü"
        }
        sport_type = sport_mapping.get(callback.data, "general")
        description = data.get('team_description', '')

    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –ë–î
    try:
        team = await teams_db.create_team(
            coach_id=callback.from_user.id,
            name=data['team_name'],
            description=description,
            sport_type=sport_type,
            max_members=50
        )

        await state.clear()

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data=f"add_player_{team.id}")],
            [InlineKeyboardButton(text="üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data=f"view_team_{team.id}")],
            [InlineKeyboardButton(text="üèÜ –ö –∫–æ–º–∞–Ω–¥–∞–º", callback_data="teams_menu")]
        ])

        await callback.message.edit_text(
            f"‚úÖ <b>–ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"üèÜ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {team.name}\n"
            f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
            f"üèÉ <b>–í–∏–¥ —Å–ø–æ—Ä—Ç–∞:</b> {sport_type}\n"
            f"üë• <b>–ò–≥—Ä–æ–∫–æ–≤:</b> 0\n"
            f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {team.created_at.strftime('%d.%m.%Y %H:%M')}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer("‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞!")

    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")

# ============== –ú–û–ò –ö–û–ú–ê–ù–î–´ ==============

@teams_router.callback_query(F.data == "my_teams")
async def cb_my_teams(callback: CallbackQuery, state: FSMContext):
    """–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥"""
    await state.clear()

    teams = await teams_db.get_coach_teams(callback.from_user.id)

    if not teams:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="create_team")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="teams_menu")]
        ])

        await callback.message.edit_text(
            "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–∞–Ω–¥</b>\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–æ–º–∞–Ω–¥—É!",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
        return

    buttons = []
    for team in teams:
        sport_emoji = {
            "—Ñ—É—Ç–±–æ–ª": "‚öΩ", "–±–∞—Å–∫–µ—Ç–±–æ–ª": "üèÄ", "–≤–æ–ª–µ–π–±–æ–ª": "üèê",
            "—Ö–æ–∫–∫–µ–π": "üèí", "–ª–µ–≥–∫–∞—è –∞—Ç–ª–µ—Ç–∏–∫–∞": "üèÉ", "–µ–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞": "ü•ä",
            "–ø–ª–∞–≤–∞–Ω–∏–µ": "üèä", "–û–§–ü": "üí™"
        }.get(team.sport_type, "üèÜ")

        buttons.append([InlineKeyboardButton(
            text=f"{sport_emoji} {team.name} ({team.players_count} –∏–≥—Ä.)",
            callback_data=f"view_team_{team.id}"
        )])

    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="teams_menu")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text(
        f"üèÜ <b>–í–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã ({len(teams)})</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

# ============== –ü–†–û–°–ú–û–¢–† –ö–û–ú–ê–ù–î–´ ==============

@teams_router.callback_query(F.data.startswith("view_team_"))
async def cb_view_team(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–∞–Ω–¥—ã"""
    await state.clear()
    team_id = int(callback.data.split("_")[-1])

    team = await teams_db.get_team(team_id)
    if not team:
        await callback.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    players = await teams_db.get_team_players(team_id)

    sport_emoji = {
        "—Ñ—É—Ç–±–æ–ª": "‚öΩ", "–±–∞—Å–∫–µ—Ç–±–æ–ª": "üèÄ", "–≤–æ–ª–µ–π–±–æ–ª": "üèê",
        "—Ö–æ–∫–∫–µ–π": "üèí", "–ª–µ–≥–∫–∞—è –∞—Ç–ª–µ—Ç–∏–∫–∞": "üèÉ", "–µ–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞": "ü•ä", 
        "–ø–ª–∞–≤–∞–Ω–∏–µ": "üèä", "–û–§–ü": "üí™"
    }.get(team.sport_type, "üèÜ")

    buttons = [
        [InlineKeyboardButton(text="üë• –ò–≥—Ä–æ–∫–∏", callback_data=f"team_players_{team_id}")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data=f"add_player_{team_id}")],
        [InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–∞–º", callback_data="my_teams")]
    ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    description = team.description if team.description else "<i>–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è</i>"

    await callback.message.edit_text(
        f"{sport_emoji} <b>{team.name}</b>\n\n"
        f"üìã {description}\n\n"
        f"üèÉ <b>–í–∏–¥ —Å–ø–æ—Ä—Ç–∞:</b> {team.sport_type}\n"
        f"üë• <b>–ò–≥—Ä–æ–∫–æ–≤:</b> {len(players)}/{team.max_members}\n"
        f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {team.created_at.strftime('%d.%m.%Y')}",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

# –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –í –°–õ–ï–î–£–Æ–©–ï–ú –ë–õ–û–ö–ï...

# ============== –ò–ì–†–û–ö–ò –ö–û–ú–ê–ù–î–´ ==============

@teams_router.callback_query(F.data.startswith("team_players_"))
async def cb_team_players(callback: CallbackQuery, state: FSMContext):
    """–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã"""
    await state.clear()
    team_id = int(callback.data.split("_")[-1])

    team = await teams_db.get_team(team_id)
    players = await teams_db.get_team_players(team_id)

    if not players:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data=f"add_player_{team_id}")],
            [InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–µ", callback_data=f"view_team_{team_id}")]
        ])

        await callback.message.edit_text(
            f"üë• <b>–ò–≥—Ä–æ–∫–∏ –∫–æ–º–∞–Ω–¥—ã \"{team.name}\"</b>\n\n"
            "üì≠ –í –∫–æ–º–∞–Ω–¥–µ –ø–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞!",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
        return

    players_text = ""
    for i, player in enumerate(players, 1):
        name = f"{player.first_name}"
        if player.last_name:
            name += f" {player.last_name}"

        number = f"#{player.jersey_number}" if player.jersey_number else ""
        position = f"({player.position})" if player.position else ""

        players_text += f"{i}. {number} {name} {position}\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data=f"add_player_{team_id}")],
        [InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–µ", callback_data=f"view_team_{team_id}")]
    ])

    await callback.message.edit_text(
        f"üë• <b>–ò–≥—Ä–æ–∫–∏ –∫–æ–º–∞–Ω–¥—ã \"{team.name}\"</b>\n\n"
        f"{players_text}\n"
        f"–í—Å–µ–≥–æ: {len(players)} –∏–≥—Ä–æ–∫–æ–≤",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

# ============== –î–û–ë–ê–í–õ–ï–ù–ò–ï –ò–ì–†–û–ö–ê ==============

@teams_router.callback_query(F.data.startswith("add_player_"))
async def cb_add_player(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞"""
    team_id = int(callback.data.split("_")[-1])

    team = await teams_db.get_team(team_id)
    if not team:
        await callback.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    await state.update_data(team_id=team_id)
    await state.set_state(TeamStates.waiting_player_first_name)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_team_{team_id}")]
    ])

    await callback.message.edit_text(
        f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ \"{team.name}\"</b>\n\n"
        "üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@teams_router.message(TeamStates.waiting_player_first_name)
async def process_player_first_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞"""
    first_name = message.text.strip()

    if len(first_name) < 1:
        await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º:")
        return

    if len(first_name) > 100:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    await state.update_data(player_first_name=first_name)
    await state.set_state(TeamStates.waiting_player_last_name)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_last_name")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_player")]
    ])

    await message.answer(
        f"‚úÖ –ò–º—è: <b>{first_name}</b>\n\n"
        "üë§ –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏–≥—Ä–æ–∫–∞ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@teams_router.callback_query(F.data == "skip_last_name")
async def cb_skip_last_name(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é"""
    await state.update_data(player_last_name="")
    await ask_position(callback, state)

@teams_router.message(TeamStates.waiting_player_last_name) 
async def process_player_last_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–º–∏–ª–∏–∏ –∏–≥—Ä–æ–∫–∞"""
    last_name = message.text.strip()

    if len(last_name) > 100:
        await message.answer("‚ùå –§–∞–º–∏–ª–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    await state.update_data(player_last_name=last_name)
    await state.set_state(TeamStates.waiting_player_position)

    data = await state.get_data()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_position")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_player")]
    ])

    await message.answer(
        f"‚úÖ –ò–º—è: <b>{data['player_first_name']} {last_name}</b>\n\n"
        "üèÉ –í–≤–µ–¥–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã: <i>–ù–∞–ø–∞–¥–∞—é—â–∏–π, –ó–∞—â–∏—Ç–Ω–∏–∫, –í—Ä–∞—Ç–∞—Ä—å, –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π</i>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

async def ask_position(callback: CallbackQuery, state: FSMContext):
    """–°–ø—Ä–æ—Å–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é"""
    await state.set_state(TeamStates.waiting_player_position)

    data = await state.get_data()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_position")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_player")]
    ])

    player_name = data['player_first_name']
    if data.get('player_last_name'):
        player_name += f" {data['player_last_name']}"

    await callback.message.edit_text(
        f"‚úÖ –ò–º—è: <b>{player_name}</b>\n\n"
        "üèÉ –í–≤–µ–¥–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã: <i>–ù–∞–ø–∞–¥–∞—é—â–∏–π, –ó–∞—â–∏—Ç–Ω–∏–∫, –í—Ä–∞—Ç–∞—Ä—å, –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π</i>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@teams_router.callback_query(F.data == "skip_position")
async def cb_skip_position(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é"""
    await state.update_data(player_position="")
    await ask_jersey_number(callback, state)

@teams_router.message(TeamStates.waiting_player_position)
async def process_player_position(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞"""
    position = message.text.strip()

    if len(position) > 50:
        await message.answer("‚ùå –ü–æ–∑–∏—Ü–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    await state.update_data(player_position=position)
    await state.set_state(TeamStates.waiting_player_jersey)

    data = await state.get_data()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_jersey")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_player")]
    ])

    player_name = data['player_first_name']
    if data.get('player_last_name'):
        player_name += f" {data['player_last_name']}"

    await message.answer(
        f"‚úÖ –ò–≥—Ä–æ–∫: <b>{player_name}</b>\n"
        f"üèÉ –ü–æ–∑–∏—Ü–∏—è: <b>{position}</b>\n\n"
        "üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞ –º–∞–π–∫–µ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã: <i>7, 10, 23</i>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

async def ask_jersey_number(callback: CallbackQuery, state: FSMContext):
    """–°–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–º–µ—Ä –º–∞–π–∫–∏"""
    await state.set_state(TeamStates.waiting_player_jersey)

    data = await state.get_data()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_jersey")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_player")]
    ])

    player_name = data['player_first_name']
    if data.get('player_last_name'):
        player_name += f" {data['player_last_name']}"

    position_text = f"üèÉ –ü–æ–∑–∏—Ü–∏—è: <b>{data.get('player_position', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</b>\n" if data.get('player_position') else ""

    await callback.message.edit_text(
        f"‚úÖ –ò–≥—Ä–æ–∫: <b>{player_name}</b>\n"
        f"{position_text}\n"
        "üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞ –º–∞–π–∫–µ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã: <i>7, 10, 23</i>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@teams_router.callback_query(F.data == "skip_jersey")
async def cb_skip_jersey(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–º–µ—Ä"""
    await state.update_data(player_jersey_number=None)
    await finalize_player_creation(callback, state)

@teams_router.message(TeamStates.waiting_player_jersey)
async def process_player_jersey(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –º–∞–π–∫–∏"""
    try:
        jersey_number = int(message.text.strip())

        if jersey_number < 1 or jersey_number > 999:
            await message.answer("‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 999:")
            return

    except ValueError:
        await message.answer("‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º:")
        return

    await state.update_data(player_jersey_number=jersey_number)
    await finalize_player_creation_msg(message, state)

async def finalize_player_creation(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ callback"""
    data = await state.get_data()

    try:
        player = await teams_db.add_team_player(
            team_id=data['team_id'],
            first_name=data['player_first_name'],
            last_name=data.get('player_last_name', ''),
            position=data.get('player_position', ''),
            jersey_number=data.get('player_jersey_number')
        )

        await state.clear()

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–≥—Ä–æ–∫–∞", callback_data=f"add_player_{data['team_id']}")],
            [InlineKeyboardButton(text="üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–≥—Ä–æ–∫–æ–≤", callback_data=f"team_players_{data['team_id']}")],
            [InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–µ", callback_data=f"view_team_{data['team_id']}")]
        ])

        player_name = player.first_name
        if player.last_name:
            player_name += f" {player.last_name}"

        position_text = f"üèÉ <b>–ü–æ–∑–∏—Ü–∏—è:</b> {player.position}\n" if player.position else ""
        jersey_text = f"üî¢ <b>–ù–æ–º–µ—Ä:</b> {player.jersey_number}\n" if player.jersey_number else ""

        await callback.message.edit_text(
            f"‚úÖ <b>–ò–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"üë§ <b>–ò–º—è:</b> {player_name}\n"
            f"{position_text}"
            f"{jersey_text}"
            f"üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω:</b> {player.joined_at.strftime('%d.%m.%Y %H:%M')}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer("‚úÖ –ò–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!")

    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞: {e}")

async def finalize_player_creation_msg(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    data = await state.get_data()

    try:
        player = await teams_db.add_team_player(
            team_id=data['team_id'],
            first_name=data['player_first_name'],
            last_name=data.get('player_last_name', ''),
            position=data.get('player_position', ''),
            jersey_number=data.get('player_jersey_number')
        )

        await state.clear()

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–≥—Ä–æ–∫–∞", callback_data=f"add_player_{data['team_id']}")],
            [InlineKeyboardButton(text="üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–≥—Ä–æ–∫–æ–≤", callback_data=f"team_players_{data['team_id']}")],
            [InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–µ", callback_data=f"view_team_{data['team_id']}")]
        ])

        player_name = player.first_name
        if player.last_name:
            player_name += f" {player.last_name}"

        position_text = f"üèÉ <b>–ü–æ–∑–∏—Ü–∏—è:</b> {player.position}\n" if player.position else ""
        jersey_text = f"üî¢ <b>–ù–æ–º–µ—Ä:</b> {player.jersey_number}\n" if player.jersey_number else ""

        await message.answer(
            f"‚úÖ <b>–ò–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"üë§ <b>–ò–º—è:</b> {player_name}\n"
            f"{position_text}"
            f"{jersey_text}"
            f"üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω:</b> {player.joined_at.strftime('%d.%m.%Y %H:%M')}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞: {e}")

@teams_router.callback_query(F.data == "cancel_add_player")
async def cb_cancel_add_player(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞"""
    data = await state.get_data()
    team_id = data.get('team_id')
    await state.clear()

    if team_id:
        await callback.message.edit_text(
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–µ", callback_data=f"view_team_{team_id}")]
            ])
        )
    else:
        await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")

    await callback.answer()

# –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –°–õ–ï–î–£–ï–¢...

# ============== –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ï –ü–û–î–û–ü–ï–ß–ù–´–ï ==============

@teams_router.callback_query(F.data == "students_menu")
async def cb_students_menu(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö"""
    await state.clear()

    students = await teams_db.get_individual_students(callback.from_user.id)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ", callback_data="add_student")],
        [InlineKeyboardButton(text="üë• –ú–æ–∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–µ", callback_data="my_students")],
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

    students_text = f"–£ –≤–∞—Å {len(students)} –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö" if students else "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö"

    await callback.message.edit_text(
        f"üë§ <b>–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–æ–¥–æ–ø–µ—á–Ω—ã–µ</b>\n\n"
        f"üìä {students_text}\n\n"
        "–ü–æ–¥–æ–ø–µ—á–Ω—ã–µ - —ç—Ç–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@teams_router.callback_query(F.data == "add_student")
async def cb_add_student(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ"""
    await state.set_state(TeamStates.waiting_student_first_name)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="students_menu")]
    ])

    await callback.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ</b>\n\n"
        "üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@teams_router.message(TeamStates.waiting_student_first_name)
async def process_student_first_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ"""
    first_name = message.text.strip()

    if len(first_name) < 1:
        await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º:")
        return

    if len(first_name) > 100:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    await state.update_data(student_first_name=first_name)
    await state.set_state(TeamStates.waiting_student_last_name)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_student_last_name")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="students_menu")]
    ])

    await message.answer(
        f"‚úÖ –ò–º—è: <b>{first_name}</b>\n\n"
        "üë§ –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@teams_router.callback_query(F.data == "skip_student_last_name")
async def cb_skip_student_last_name(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ"""
    await state.update_data(student_last_name="")
    await ask_student_specialization(callback, state)

@teams_router.message(TeamStates.waiting_student_last_name)
async def process_student_last_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–º–∏–ª–∏–∏ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ"""
    last_name = message.text.strip()

    if len(last_name) > 100:
        await message.answer("‚ùå –§–∞–º–∏–ª–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    await state.update_data(student_last_name=last_name)
    await ask_student_specialization_msg(message, state)

async def ask_student_specialization(callback: CallbackQuery, state: FSMContext):
    """–°–ø—Ä–æ—Å–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ callback"""
    await state.set_state(TeamStates.waiting_student_specialization)

    data = await state.get_data()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèÉ –ë–µ–≥", callback_data="spec_running")],
        [InlineKeyboardButton(text="üí™ –°–∏–ª–æ–≤—ã–µ", callback_data="spec_strength")],
        [InlineKeyboardButton(text="ü§∏ –ì–∏–º–Ω–∞—Å—Ç–∏–∫–∞", callback_data="spec_gymnastics")],
        [InlineKeyboardButton(text="üèä –ü–ª–∞–≤–∞–Ω–∏–µ", callback_data="spec_swimming")],
        [InlineKeyboardButton(text="ü•ä –ï–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞", callback_data="spec_combat")],
        [InlineKeyboardButton(text="‚öΩ –§—É—Ç–±–æ–ª", callback_data="spec_football")],
        [InlineKeyboardButton(text="üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª", callback_data="spec_basketball")],
        [InlineKeyboardButton(text="üí™ –û–§–ü", callback_data="spec_general")],
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_student_specialization")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="students_menu")]
    ])

    student_name = data['student_first_name']
    if data.get('student_last_name'):
        student_name += f" {data['student_last_name']}"

    await callback.message.edit_text(
        f"‚úÖ –ü–æ–¥–æ–ø–µ—á–Ω—ã–π: <b>{student_name}</b>\n\n"
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

async def ask_student_specialization_msg(message: Message, state: FSMContext):
    """–°–ø—Ä–æ—Å–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await state.set_state(TeamStates.waiting_student_specialization)

    data = await state.get_data()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèÉ –ë–µ–≥", callback_data="spec_running")],
        [InlineKeyboardButton(text="üí™ –°–∏–ª–æ–≤—ã–µ", callback_data="spec_strength")],
        [InlineKeyboardButton(text="ü§∏ –ì–∏–º–Ω–∞—Å—Ç–∏–∫–∞", callback_data="spec_gymnastics")],
        [InlineKeyboardButton(text="üèä –ü–ª–∞–≤–∞–Ω–∏–µ", callback_data="spec_swimming")],
        [InlineKeyboardButton(text="ü•ä –ï–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞", callback_data="spec_combat")],
        [InlineKeyboardButton(text="‚öΩ –§—É—Ç–±–æ–ª", callback_data="spec_football")],
        [InlineKeyboardButton(text="üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª", callback_data="spec_basketball")],
        [InlineKeyboardButton(text="üí™ –û–§–ü", callback_data="spec_general")],
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_student_specialization")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="students_menu")]
    ])

    student_name = data['student_first_name']
    if data.get('student_last_name'):
        student_name += f" {data['student_last_name']}"

    await message.answer(
        f"‚úÖ –ü–æ–¥–æ–ø–µ—á–Ω—ã–π: <b>{student_name}</b>\n\n"
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@teams_router.callback_query(F.data.startswith("spec_"))
@teams_router.callback_query(F.data == "skip_student_specialization")
async def cb_student_specialization(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ"""
    if callback.data == "skip_student_specialization":
        specialization = ""
    else:
        spec_mapping = {
            "spec_running": "–ë–µ–≥",
            "spec_strength": "–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
            "spec_gymnastics": "–ì–∏–º–Ω–∞—Å—Ç–∏–∫–∞",
            "spec_swimming": "–ü–ª–∞–≤–∞–Ω–∏–µ",
            "spec_combat": "–ï–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞",
            "spec_football": "–§—É—Ç–±–æ–ª",
            "spec_basketball": "–ë–∞—Å–∫–µ—Ç–±–æ–ª",
            "spec_general": "–û–§–ü"
        }
        specialization = spec_mapping.get(callback.data, "")

    await state.update_data(student_specialization=specialization)

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
    await state.set_state(TeamStates.waiting_student_level)

    data = await state.get_data()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üü¢ –ù–æ–≤–∏—á–æ–∫", callback_data="level_beginner")],
        [InlineKeyboardButton(text="üü° –°—Ä–µ–¥–Ω–∏–π", callback_data="level_intermediate")],
        [InlineKeyboardButton(text="üî¥ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", callback_data="level_advanced")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="students_menu")]
    ])

    student_name = data['student_first_name']
    if data.get('student_last_name'):
        student_name += f" {data['student_last_name']}"

    spec_text = f"üéØ <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> {specialization}\n" if specialization else ""

    await callback.message.edit_text(
        f"‚úÖ –ü–æ–¥–æ–ø–µ—á–Ω—ã–π: <b>{student_name}</b>\n"
        f"{spec_text}\n"
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@teams_router.callback_query(F.data.startswith("level_"))
async def cb_student_level(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ä–æ–≤–Ω—è –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ"""
    level_mapping = {
        "level_beginner": "beginner",
        "level_intermediate": "intermediate", 
        "level_advanced": "advanced"
    }

    level = level_mapping.get(callback.data, "beginner")
    await state.update_data(student_level=level)

    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ –≤ –ë–î
    data = await state.get_data()

    try:
        student = await teams_db.add_individual_student(
            coach_id=callback.from_user.id,
            first_name=data['student_first_name'],
            last_name=data.get('student_last_name', ''),
            specialization=data.get('student_specialization', ''),
            level=level
        )

        await state.clear()

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ", callback_data="add_student")],
            [InlineKeyboardButton(text="üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö", callback_data="my_students")],
            [InlineKeyboardButton(text="üîô –ö –ø–æ–¥–æ–ø–µ—á–Ω—ã–º", callback_data="students_menu")]
        ])

        student_name = student.first_name
        if student.last_name:
            student_name += f" {student.last_name}"

        level_emoji = {"beginner": "üü¢", "intermediate": "üü°", "advanced": "üî¥"}
        level_text = {"beginner": "–ù–æ–≤–∏—á–æ–∫", "intermediate": "–°—Ä–µ–¥–Ω–∏–π", "advanced": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"}

        spec_text = f"üéØ <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> {student.specialization}\n" if student.specialization else ""

        await callback.message.edit_text(
            f"‚úÖ <b>–ü–æ–¥–æ–ø–µ—á–Ω—ã–π –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"üë§ <b>–ò–º—è:</b> {student_name}\n"
            f"{spec_text}"
            f"üìä <b>–£—Ä–æ–≤–µ–Ω—å:</b> {level_emoji[level]} {level_text[level]}\n"
            f"üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω:</b> {student.joined_at.strftime('%d.%m.%Y %H:%M')}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer("‚úÖ –ü–æ–¥–æ–ø–µ—á–Ω—ã–π –¥–æ–±–∞–≤–ª–µ–Ω!")

    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ: {e}")

# ============== –ú–û–ò –ü–û–î–û–ü–ï–ß–ù–´–ï ==============

@teams_router.callback_query(F.data == "my_students")
async def cb_my_students(callback: CallbackQuery, state: FSMContext):
    """–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö"""
    await state.clear()

    students = await teams_db.get_individual_students(callback.from_user.id)

    if not students:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ", callback_data="add_student")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="students_menu")]
        ])

        await callback.message.edit_text(
            "üë• <b>–ú–æ–∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–µ</b>\n\n"
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
        return

    students_text = ""
    level_emoji = {"beginner": "üü¢", "intermediate": "üü°", "advanced": "üî¥"}
    spec_emoji = {
        "–ë–µ–≥": "üèÉ", "–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏": "üí™", "–ì–∏–º–Ω–∞—Å—Ç–∏–∫–∞": "ü§∏",
        "–ü–ª–∞–≤–∞–Ω–∏–µ": "üèä", "–ï–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞": "ü•ä", "–§—É—Ç–±–æ–ª": "‚öΩ", 
        "–ë–∞—Å–∫–µ—Ç–±–æ–ª": "üèÄ", "–û–§–ü": "üí™"
    }

    for i, student in enumerate(students, 1):
        name = student.first_name
        if student.last_name:
            name += f" {student.last_name}"

        emoji = spec_emoji.get(student.specialization, "üë§")
        level = level_emoji.get(student.level, "")

        spec = f" ({student.specialization})" if student.specialization else ""
        students_text += f"{i}. {level} {emoji} {name}{spec}\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ", callback_data="add_student")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="students_menu")]
    ])

    await callback.message.edit_text(
        f"üë• <b>–ú–æ–∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–µ ({len(students)})</b>\n\n"
        f"{students_text}\n"
        f"üü¢ –ù–æ–≤–∏—á–æ–∫ ‚Ä¢ üü° –°—Ä–µ–¥–Ω–∏–π ‚Ä¢ üî¥ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

# ============== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ==============

@teams_router.callback_query(F.data == "stats_menu")
async def cb_stats_menu(callback: CallbackQuery, state: FSMContext):
    """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    await state.clear()

    stats = await teams_db.get_coach_stats(callback.from_user.id)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

    await callback.message.edit_text(
        f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üèÜ <b>–ö–æ–º–∞–Ω–¥:</b> {stats['teams_count']}\n"
        f"üë• <b>–ò–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö:</b> {stats['team_players_count']}\n"
        f"üë§ <b>–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö:</b> {stats['individual_students_count']}\n\n"
        f"üéØ <b>–í—Å–µ–≥–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤:</b> {stats['total_athletes']}\n\n"
        f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã!",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

# ============== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ==============

def register_team_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    global teams_db

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –∫–æ–º–∞–Ω–¥
    teams_db = TeamsDB(db_manager.pool)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
    dp.include_router(teams_router)
    logger.info("‚úÖ Teams module registered with database support")

# ============== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î ==============

async def init_teams_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –∫–æ–º–∞–Ω–¥"""
    global teams_db
    if teams_db:
        await teams_db.init_tables()

__all__ = ['register_team_handlers', 'init_teams_database']
