
"""
handlers/teams.py - –ü–æ–ª–Ω—ã–π –º–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–∞–º–∏
–†–ê–ë–û–¢–ê–ï–¢ –ë–ï–ó –û–®–ò–ë–û–ö! –°–æ–∑–¥–∞–Ω–∏–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
"""

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from typing import Dict, List
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

# ============== FSM –°–û–°–¢–û–Ø–ù–ò–Ø ==============

class TeamStates(StatesGroup):
    waiting_team_name = State()
    waiting_team_description = State()
    waiting_member_id = State()

# ============== –ë–ê–ó–ê –î–ê–ù–ù–´–• –í –ü–ê–ú–Ø–¢–ò ==============

class TeamDB:
    def __init__(self):
        # {team_id: {'name': str, 'description': str, 'creator_id': int, 'members': [user_id], 'created_at': datetime}}
        self.teams: Dict[int, dict] = {}
        # {user_id: [team_id, team_id]}
        self.user_teams: Dict[int, List[int]] = {}
        self.counter = 1

    def create_team(self, creator_id: int, name: str, description: str = "") -> int:
        """–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É"""
        team_id = self.counter
        self.counter += 1

        self.teams[team_id] = {
            'name': name,
            'description': description,
            'creator_id': creator_id,
            'members': [creator_id],
            'created_at': datetime.now()
        }

        if creator_id not in self.user_teams:
            self.user_teams[creator_id] = []
        self.user_teams[creator_id].append(team_id)

        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ {team_id}: {name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {creator_id}")
        return team_id

    def get_team(self, team_id: int) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É"""
        return self.teams.get(team_id)

    def get_user_teams(self, user_id: int) -> List[dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        team_ids = self.user_teams.get(user_id, [])
        return [self.teams[tid] for tid in team_ids if tid in self.teams]

    def add_member(self, team_id: int, user_id: int) -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        if team_id not in self.teams:
            return False

        team = self.teams[team_id]
        if user_id in team['members']:
            return False

        team['members'].append(user_id)

        if user_id not in self.user_teams:
            self.user_teams[user_id] = []
        if team_id not in self.user_teams[user_id]:
            self.user_teams[user_id].append(team_id)

        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ {user_id} –≤ –∫–æ–º–∞–Ω–¥—É {team_id}")
        return True

    def is_creator(self, user_id: int, team_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–æ–º–∞–Ω–¥—ã"""
        team = self.teams.get(team_id)
        return team and team['creator_id'] == user_id

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ë–î
db = TeamDB()

# ============== –†–û–£–¢–ï–† ==============

teams_router = Router()

# ============== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ==============

@teams_router.message(Command("teams"))
async def cmd_teams(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /teams"""
    await state.clear()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="create_team")],
        [InlineKeyboardButton(text="üë• –ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã", callback_data="my_teams")],
        [InlineKeyboardButton(text="üë®‚Äçüéì –ú–æ–∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–µ", callback_data="my_students")]
    ])

    await message.answer(
        "üèÜ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏</b>\n\n"
        "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö!",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@teams_router.callback_query(F.data == "teams_main")
async def cb_teams_main(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥"""
    await state.clear()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="create_team")],
        [InlineKeyboardButton(text="üë• –ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã", callback_data="my_teams")],
        [InlineKeyboardButton(text="üë®‚Äçüéì –ú–æ–∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–µ", callback_data="my_students")]
    ])

    await callback.message.edit_text(
        "üèÜ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏</b>\n\n"
        "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö!",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

# ============== –°–û–ó–î–ê–ù–ò–ï –ö–û–ú–ê–ù–î–´ ==============

@teams_router.callback_query(F.data == "create_team")
async def cb_create_team(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
    await state.set_state(TeamStates.waiting_team_name)
    await state.clear()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="teams_main")]
    ])

    await callback.message.edit_text(
        "üÜï <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (2-50 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(TeamStates.waiting_team_name)
    await callback.answer()

@teams_router.message(TeamStates.waiting_team_name)
async def process_team_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    name = message.text.strip()

    if len(name) < 2:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞:")
        return

    if len(name) > 50:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    await state.update_data(team_name=name)
    await state.set_state(TeamStates.waiting_team_description)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_description")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="teams_main")]
    ])

    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{name}</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@teams_router.callback_query(F.data == "skip_description")
async def cb_skip_description(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"""
    data = await state.get_data()
    team_name = data.get('team_name', '–ö–æ–º–∞–Ω–¥–∞')

    team_id = db.create_team(callback.from_user.id, team_name, "")
    await state.clear()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data=f"add_member_{team_id}")],
        [InlineKeyboardButton(text="üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data=f"view_team_{team_id}")],
        [InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–∞–º", callback_data="teams_main")]
    ])

    await callback.message.edit_text(
        f"‚úÖ <b>–ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
        f"üèÜ –ù–∞–∑–≤–∞–Ω–∏–µ: {team_name}\n"
        f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 1 (–≤—ã)\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer("‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞!")

@teams_router.message(TeamStates.waiting_team_description)
async def process_team_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    description = message.text.strip()

    if len(description) > 200:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    data = await state.get_data()
    team_name = data.get('team_name', '–ö–æ–º–∞–Ω–¥–∞')

    team_id = db.create_team(message.from_user.id, team_name, description)
    await state.clear()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data=f"add_member_{team_id}")],
        [InlineKeyboardButton(text="üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data=f"view_team_{team_id}")],
        [InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–∞–º", callback_data="teams_main")]
    ])

    await message.answer(
        f"‚úÖ <b>–ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
        f"üèÜ –ù–∞–∑–≤–∞–Ω–∏–µ: {team_name}\n"
        f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
        f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 1 (–≤—ã)\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

# ============== –ú–û–ò –ö–û–ú–ê–ù–î–´ ==============

@teams_router.callback_query(F.data == "my_teams")
async def cb_my_teams(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã"""
    await state.clear()

    teams = db.get_user_teams(callback.from_user.id)

    if not teams:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="create_team")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="teams_main")]
        ])

        await callback.message.edit_text(
            "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–∞–Ω–¥</b>\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–æ–º–∞–Ω–¥—É!",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
        return

    buttons = []
    for i, team in enumerate(teams, 1):
        team_id = db.user_teams[callback.from_user.id][i-1]
        is_creator = db.is_creator(callback.from_user.id, team_id)
        emoji = "üëë" if is_creator else "üë§"

        buttons.append([InlineKeyboardButton(
            text=f"{emoji} {team['name']} ({len(team['members'])} —á–µ–ª.)",
            callback_data=f"view_team_{team_id}"
        )])

    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="teams_main")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text(
        f"üë• <b>–í–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã ({len(teams)})</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

# ============== –ü–†–û–°–ú–û–¢–† –ö–û–ú–ê–ù–î–´ ==============

@teams_router.callback_query(F.data.startswith("view_team_"))
async def cb_view_team(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–∞–Ω–¥—ã"""
    await state.clear()
    team_id = int(callback.data.split("_")[-1])
    team = db.get_team(team_id)

    if not team:
        await callback.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    is_creator = db.is_creator(callback.from_user.id, team_id)

    buttons = [
        [InlineKeyboardButton(text="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data=f"members_{team_id}")]
    ]

    if is_creator:
        buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data=f"add_member_{team_id}")])

    buttons.append([InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–∞–º", callback_data="my_teams")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    desc_text = team['description'] if team['description'] else "<i>–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è</i>"
    emoji = "üëë" if is_creator else "üë§"

    await callback.message.edit_text(
        f"üèÜ <b>{team['name']}</b>\n\n"
        f"üìã {desc_text}\n\n"
        f"{emoji} <b>–í–∞—à–∞ —Ä–æ–ª—å:</b> {'–°–æ–∑–¥–∞—Ç–µ–ª—å' if is_creator else '–£—á–∞—Å—Ç–Ω–∏–∫'}\n"
        f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {len(team['members'])}\n"
        f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {team['created_at'].strftime('%d.%m.%Y')}",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

# ============== –£–ß–ê–°–¢–ù–ò–ö–ò ==============

@teams_router.callback_query(F.data.startswith("members_"))
async def cb_members(callback: CallbackQuery, state: FSMContext):
    """–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    await state.clear()
    team_id = int(callback.data.split("_")[-1])
    team = db.get_team(team_id)

    if not team:
        await callback.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    members_text = ""
    for i, member_id in enumerate(team['members'], 1):
        emoji = "üëë" if member_id == team['creator_id'] else "üë§"
        members_text += f"{i}. {emoji} ID: {member_id}\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–µ", callback_data=f"view_team_{team_id}")]
    ])

    await callback.message.edit_text(
        f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã \"{team['name']}\"</b>\n\n"
        f"{members_text}\n"
        f"–í—Å–µ–≥–æ: {len(team['members'])}",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

# ============== –î–û–ë–ê–í–õ–ï–ù–ò–ï –£–ß–ê–°–¢–ù–ò–ö–ê ==============

@teams_router.callback_query(F.data.startswith("add_member_"))
async def cb_add_member(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    team_id = int(callback.data.split("_")[-1])

    if not db.is_creator(callback.from_user.id, team_id):
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        return

    await state.update_data(team_id=team_id)
    await state.set_state(TeamStates.waiting_member_id)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_team_{team_id}")]
    ])

    await callback.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID —É—á–∞—Å—Ç–Ω–∏–∫–∞\n"
        "(—á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä):",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@teams_router.message(TeamStates.waiting_member_id)
async def process_member_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    try:
        member_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    data = await state.get_data()
    team_id = data.get('team_id')

    if member_id == message.from_user.id:
        await message.answer("‚ùå –í—ã —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ! –í–≤–µ–¥–∏—Ç–µ ID –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        return

    success = db.add_member(team_id, member_id)
    await state.clear()

    if success:
        team = db.get_team(team_id)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data=f"add_member_{team_id}")],
            [InlineKeyboardButton(text="üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data=f"members_{team_id}")],
            [InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–µ", callback_data=f"view_team_{team_id}")]
        ])

        await message.answer(
            f"‚úÖ <b>–£—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"üë§ ID: {member_id}\n"
            f"üèÜ –ö–æ–º–∞–Ω–¥–∞: {team['name']}\n"
            f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(team['members'])}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ)")

# ============== –ú–û–ò –ü–û–î–û–ü–ï–ß–ù–´–ï ==============

@teams_router.callback_query(F.data == "my_students")
@teams_router.callback_query(F.data == "add_student")
async def cb_my_students(callback: CallbackQuery, state: FSMContext):
    """–ú–æ–∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–µ (–≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏–∑ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥)"""
    await state.clear()

    teams = db.get_user_teams(callback.from_user.id)
    all_students = set()

    for team in teams:
        if db.is_creator(callback.from_user.id, db.user_teams[callback.from_user.id][teams.index(team)]):
            for member_id in team['members']:
                if member_id != callback.from_user.id:
                    all_students.add(member_id)

    if not all_students:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="create_team")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="teams_main")]
        ])

        await callback.message.edit_text(
            "üë®‚Äçüéì <b>–ú–æ–∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–µ</b>\n\n"
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ –¥–æ–±–∞–≤—å—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
        return

    students_text = ""
    for i, student_id in enumerate(all_students, 1):
        students_text += f"{i}. üë§ ID: {student_id}\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="teams_main")]
    ])

    await callback.message.edit_text(
        f"üë®‚Äçüéì <b>–ú–æ–∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–µ</b>\n\n"
        f"{students_text}\n"
        f"–í—Å–µ–≥–æ: {len(all_students)}",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

# ============== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ==============

def register_team_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(teams_router)
    logger.info("‚úÖ Teams module registered")

__all__ = ['register_team_handlers']
