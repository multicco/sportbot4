import logging
from typing import Optional, List
from datetime import datetime

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest
from aiogram.utils.keyboard import InlineKeyboardBuilder
from states.team_states import JoinTeamStates
from database.teams_database import teams_database


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –ë–î –∏–∑ –ø–∞–ø–∫–∏ database
try:
    from database.teams_database import init_teams_database, TeamsDatabase
except Exception as e:
    init_teams_database = None
    TeamsDatabase = None
    logging.getLogger(__name__).exception("Failed to import database.teams_database: %s", e)

logger = logging.getLogger(__name__)

# –†–æ—É—Ç–µ—Ä
teams_router = Router(name="teams")

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from states.team_states import JoinTeamStates
from database.teams_database import teams_database
import logging

logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–∏—Ç—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É teams_router


@teams_router.message(Command("join"))
async def cmd_join_team(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–∞–Ω–¥–µ –ø–æ –∫–æ–¥—É"""
    args = message.text.split(maxsplit=1)
    
    if len(args) < 2:
        await message.answer(
            "üéüÔ∏è **–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–∞–Ω–¥–µ**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å –∫–æ–¥–æ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n"
            "`/join –ö–û–î`\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `/join abc12345`",
            parse_mode="Markdown"
        )
        return
    
    access_code = args.strip()
    
    # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ –∫–æ–¥—É
    team = await teams_database.get_team_by_access_code(access_code)
    
    if not team:
        await message.answer(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è**\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode="Markdown"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ
    already_in = await teams_database.check_player_in_team(
        message.from_user.id, 
        team.id
    )
    
    if already_in:
        await message.answer(
            f"‚ÑπÔ∏è –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ **{team.name}**!\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /myteam –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –∫–æ–º–∞–Ω–¥.",
            parse_mode="Markdown"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤
    if team.players_count >= team.max_players:
        await message.answer(
            f"‚ùå **–ö–æ–º–∞–Ω–¥–∞ {team.name} –∑–∞–ø–æ–ª–Ω–µ–Ω–∞**\n\n"
            f"–í –∫–æ–º–∞–Ω–¥–µ —É–∂–µ {team.players_count}/{team.max_players} –∏–≥—Ä–æ–∫–æ–≤.",
            parse_mode="Markdown"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await state.update_data(
        team_id=team.id,
        team_name=team.name,
        access_code=access_code
    )
    
    await message.answer(
        f"üèÜ **–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–∞–Ω–¥–µ {team.name}**\n\n"
        f"üìù –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {team.sport_type}\n"
        f"üë• –ò–≥—Ä–æ–∫–æ–≤: {team.players_count}/{team.max_players}\n\n"
        f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n"
        f"**–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:**",
        parse_mode="Markdown"
    )
    
    await state.set_state(JoinTeamStates.waiting_first_name)


@teams_router.message(JoinTeamStates.waiting_first_name)
async def process_join_first_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏"""
    first_name = message.text.strip()
    
    if len(first_name) < 2:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
        return
    
    await state.update_data(first_name=first_name)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_last_name")
    
    await message.answer(
        f"‚úÖ –ò–º—è: **{first_name}**\n\n"
        f"**–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:**\n"
        f"(–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    
    await state.set_state(JoinTeamStates.waiting_last_name)


@teams_router.message(JoinTeamStates.waiting_last_name)
async def process_join_last_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–º–∏–ª–∏–∏"""
    last_name = message.text.strip()
    await state.update_data(last_name=last_name)
    await ask_position(message, state)


@teams_router.callback_query(F.data == "skip_last_name")
async def skip_last_name(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é"""
    await state.update_data(last_name=None)
    await ask_position(callback.message, state)
    await callback.answer()


async def ask_position(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞"""
    data = await state.get_data()
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_position")
    
    await message.answer(
        f"**–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –ø–æ–∑–∏—Ü–∏—é:**\n"
        f"(–Ω–∞–ø—Ä–∏–º–µ—Ä: –Ω–∞–ø–∞–¥–∞—é—â–∏–π, –∑–∞—â–∏—Ç–Ω–∏–∫, –≤—Ä–∞—Ç–∞—Ä—å)\n\n"
        f"–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    
    await state.set_state(JoinTeamStates.waiting_position)


@teams_router.message(JoinTeamStates.waiting_position)
async def process_join_position(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–∏"""
    position = message.text.strip()
    await state.update_data(position=position)
    await ask_jersey_number(message, state)


@teams_router.callback_query(F.data == "skip_position")
async def skip_position(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é"""
    await state.update_data(position=None)
    await ask_jersey_number(callback.message, state)
    await callback.answer()


async def ask_jersey_number(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_jersey")
    
    await message.answer(
        f"**–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–æ–º–µ—Ä:**\n"
        f"(—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 99)\n\n"
        f"–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    
    await state.set_state(JoinTeamStates.waiting_jersey_number)


@teams_router.message(JoinTeamStates.waiting_jersey_number)
async def process_join_jersey(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞"""
    try:
        jersey_number = int(message.text.strip())
        
        if jersey_number < 0 or jersey_number > 99:
            await message.answer("‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 99")
            return
        
        await state.update_data(jersey_number=jersey_number)
        await complete_join(message, state)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 99")


@teams_router.callback_query(F.data == "skip_jersey")
async def skip_jersey(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–º–µ—Ä"""
    await state.update_data(jersey_number=None)
    await complete_join(callback.message, state)
    await callback.answer()


async def complete_join(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–∞–Ω–¥–µ"""
    data = await state.get_data()
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É
        player = await teams_database.add_team_player(
            team_id=data['team_id'],
            first_name=data['first_name'],
            last_name=data.get('last_name'),
            position=data.get('position'),
            jersey_number=data.get('jersey_number'),
            telegram_id=message.from_user.id
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        full_name = data['first_name']
        if data.get('last_name'):
            full_name += f" {data['last_name']}"
        
        text = f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n"
        text += f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ **{data['team_name']}**!\n\n"
        text += f"üë§ –ò–º—è: {full_name}\n"
        
        if data.get('position'):
            text += f"‚öΩ –ü–æ–∑–∏—Ü–∏—è: {data['position']}\n"
        
        if data.get('jersey_number') is not None:
            text += f"üî¢ –ù–æ–º–µ—Ä: {data['jersey_number']}\n"
        
        text += f"\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /myteam –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –∫–æ–º–∞–Ω–¥"
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üèÜ –ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã", callback_data="my_teams_as_player")
        keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        keyboard.adjust(1)
        
        await message.answer(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä—É
        from main import bot
        team = await teams_database.get_team_by_id(data['team_id'])
        
        try:
            await bot.send_message(
                team.coach_telegram_id,
                f"üëã **–ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ –≤ –∫–æ–º–∞–Ω–¥–µ {team.name}!**\n\n"
                f"üë§ {full_name}\n"
                f"‚öΩ –ü–æ–∑–∏—Ü–∏—è: {data.get('position', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                f"üî¢ –ù–æ–º–µ—Ä: {data.get('jersey_number', '–Ω–µ —É–∫–∞–∑–∞–Ω')}",
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"Failed to notify coach: {e}")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error completing join: {e}")
        await message.answer(
            f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ–º–∞–Ω–¥—É**\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
            parse_mode="Markdown"
        )
@teams_router.message(Command("myteam"))
async def cmd_my_teams(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏–≥—Ä–æ–∫–∞"""
    teams = await teams_database.get_player_teams(message.from_user.id)
    
    if not teams:
        await message.answer(
            "‚ÑπÔ∏è **–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ**\n\n"
            "–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è, –ø–æ–ø—Ä–æ—Å–∏—Ç–µ —Ç—Ä–µ–Ω–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –∫–æ–¥ –∫–æ–º–∞–Ω–¥—ã,\n"
            "–∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "`/join –ö–û–î`",
            parse_mode="Markdown"
        )
        return
    
    text = f"üèÜ **–í–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã ({len(teams)}):**\n\n"
    
    keyboard = InlineKeyboardBuilder()
    
    for team in teams:
        text += f"**{team.name}**\n"
        text += f"üìù {team.sport_type}\n"
        text += f"üë• –ò–≥—Ä–æ–∫–æ–≤: {team.players_count}/{team.max_players}\n"
        text += f"üÜî –ö–æ–¥: `{team.access_code if hasattr(team, 'access_code') else 'N/A'}`\n\n"
        
        keyboard.button(
            text=f"üèÜ {team.name}",
            callback_data=f"view_team_player_{team.id}"
        )
    
    keyboard.button(text="‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ", callback_data="join_new_team")
    keyboard.adjust(1)
    
    await message.answer(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )


@teams_router.callback_query(F.data == "join_new_team")
async def join_new_team_button(callback: CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ"""
    await callback.message.answer(
        "üéüÔ∏è **–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–∞–Ω–¥–µ**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å –∫–æ–¥–æ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n"
        "`/join –ö–û–î`\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `/join abc12345`",
        parse_mode="Markdown"
    )
    await callback.answer()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ë–î –¥–ª—è –º–æ–¥—É–ª—è
teams_db: TeamsDatabase | None = None




# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class TeamStates(StatesGroup):
    waiting_team_name = State()
    waiting_team_description = State()
    waiting_team_sport = State()
    waiting_player_first_name = State()
    waiting_player_last_name = State()
    waiting_player_position = State()
    waiting_player_jersey = State()
    waiting_student_first_name = State()
    waiting_student_last_name = State()
    waiting_student_specialization = State()
    waiting_student_level = State()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def safe_edit_text(message: Message, text: str, reply_markup: Optional[InlineKeyboardMarkup] = None, parse_mode: str = "HTML") -> None:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º TelegramBadRequest –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç/–∫–Ω–æ–ø–∫–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å."""
    try:
        await message.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            logger.debug("safe_edit_text: message is not modified ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        else:
            logger.exception("safe_edit_text unexpected error: %s", e)
            raise


def build_main_menu() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–æ–º–∞–Ω–¥–∞–º–∏, –ø–æ–¥–æ–ø–µ—á–Ω—ã–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üèÜ –ö–æ–º–∞–Ω–¥—ã", callback_data="teams_menu")],
            [InlineKeyboardButton(text="üë§ –ü–æ–¥–æ–ø–µ—á–Ω—ã–µ", callback_data="students_menu")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_menu")]
        ]
    )


def build_teams_menu(teams_count: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–∞–º–∏."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="create_team")],
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã", callback_data="my_teams")],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )


async def init_teams_module_async(db_manager) -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∏ —Ç–∞–±–ª–∏—Ü –ë–î. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ main.py."""
    global teams_db
    try:
        logger.info("üîß Initializing teams module...")
        if init_teams_database is None:
            raise RuntimeError("database.teams_database is not available")

        if not hasattr(db_manager, 'pool') or db_manager.pool is None:
            raise RuntimeError("db_manager.pool is not initialized")

        teams_db = init_teams_database(db_manager.pool)
        await teams_db.init_tables()
        logger.info("‚úÖ Teams module loaded and database initialized")
        return True
    except Exception as e:
        logger.exception("‚ùå Failed to initialize teams module: %s", e)
        raise


# –•–µ–Ω–¥–ª–µ—Ä—ã: –∫–æ–º–∞–Ω–¥—ã
@teams_router.message(Command("teams"))
async def cmd_teams(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /teams –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    await state.clear()
    stats = await get_coach_stats(message.from_user.id)
    text = (
        f"üèüÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–º–∏</b>\n\n"
        f"üèÜ –ö–æ–º–∞–Ω–¥: {stats['teams_count']}\n"
        f"üë• –ò–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö: {stats['team_players_count']}\n"
        f"üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö: {stats['individual_students_count']}\n"
        f"üéØ –í—Å–µ–≥–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤: {stats['total_athletes']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    )
    await message.answer(text, reply_markup=build_main_menu(), parse_mode="HTML")
    logger.info("User %s opened teams main menu", message.from_user.id)


@teams_router.callback_query(F.data == "main_menu")
async def cb_main_menu(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.clear()
    stats = await get_coach_stats(callback.from_user.id)
    text = (
        f"üèüÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–º–∏</b>\n\n"
        f"üèÜ –ö–æ–º–∞–Ω–¥: {stats['teams_count']}\n"
        f"üë• –ò–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö: {stats['team_players_count']}\n"
        f"üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö: {stats['individual_students_count']}\n"
        f"üéØ –í—Å–µ–≥–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤: {stats['total_athletes']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    )
    await safe_edit_text(callback.message, text, reply_markup=build_main_menu())
    await callback.answer()
    logger.info("User %s returned to main menu", callback.from_user.id)


@teams_router.callback_query(F.data == "teams_menu")
async def cb_teams_menu(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–∞–º–∏."""
    await state.clear()
    teams = await get_coach_teams(callback.from_user.id)
    text = (
        f"üèÜ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏</b>\n\n"
        f"üìä –£ –≤–∞—Å {len(teams)} –∫–æ–º–∞–Ω–¥(—ã)\n\n"
        "–ö–æ–º–∞–Ω–¥—ã –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞."
    )
    await safe_edit_text(callback.message, text, reply_markup=build_teams_menu(len(teams)))
    await callback.answer()
    logger.info("User %s opened teams menu", callback.from_user.id)


@teams_router.callback_query(F.data == "create_team")
async def cb_create_team(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã."""
    await state.set_state(TeamStates.waiting_team_name)
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="teams_menu")]])
    await safe_edit_text(callback.message, "üÜï <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã</b>\n\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (2-100 —Å–∏–º–≤–æ–ª–æ–≤):", reply_markup=kb)
    await callback.answer()
    logger.info("User %s started creating a team", callback.from_user.id)


@teams_router.message(TeamStates.waiting_team_name)
async def process_team_name(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã."""
    team_name = message.text.strip()
    logger.info("process_team_name: user=%s name=%s", message.from_user.id, team_name)

    if len(team_name) < 2:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞:")
        return
    if len(team_name) > 100:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    await state.update_data(team_name=team_name)
    await state.set_state(TeamStates.waiting_team_description)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_description")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="teams_menu")]
        ]
    )
    await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{team_name}</b>\n\nüìã –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):", reply_markup=kb, parse_mode="HTML")


@teams_router.message(TeamStates.waiting_team_description)
async def process_team_description(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã."""
    description = message.text.strip()
    if len(description) > 500:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤:")
        return
    await state.update_data(team_description=description)
    await ask_sport_type(message, state, is_callback=False)


@teams_router.callback_query(F.data == "skip_description")
async def cb_skip_description(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã."""
    await state.update_data(team_description="")
    await ask_sport_type(callback, state, is_callback=True)


async def ask_sport_type(update: Message | CallbackQuery, state: FSMContext, is_callback: bool = True) -> None:
    """–ó–∞–ø—Ä–æ—Å –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã."""
    await state.set_state(TeamStates.waiting_team_sport)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚öΩ –§—É—Ç–±–æ–ª", callback_data="team_sport_football")],
            [InlineKeyboardButton(text="üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª", callback_data="team_sport_basketball")],
            [InlineKeyboardButton(text="üèê –í–æ–ª–µ–π–±–æ–ª", callback_data="team_sport_volleyball")],
            [InlineKeyboardButton(text="üèí –•–æ–∫–∫–µ–π", callback_data="team_sport_hockey")],
            [InlineKeyboardButton(text="üèÉ –õ–µ–≥–∫–∞—è –∞—Ç–ª–µ—Ç–∏–∫–∞", callback_data="team_sport_athletics")],
            [InlineKeyboardButton(text="ü•ä –ï–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞", callback_data="team_sport_combat")],
            [InlineKeyboardButton(text="üèä –ü–ª–∞–≤–∞–Ω–∏–µ", callback_data="team_sport_swimming")],
            [InlineKeyboardButton(text="üí™ –û–§–ü", callback_data="team_sport_general")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="teams_menu")]
        ]
    )
    data = await state.get_data()
    team_name = data.get('team_name', '–ö–æ–º–∞–Ω–¥–∞')
    description = data.get('team_description', '')
    desc_text = f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n" if description else ""
    text = f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{team_name}</b>\n{desc_text}\nüèÉ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞:"

    if is_callback:
        await safe_edit_text(update.message, text, reply_markup=kb)
    else:
        await update.answer(text, reply_markup=kb, parse_mode="HTML")


@teams_router.callback_query(F.data.startswith("team_sport_"))
async def cb_finalize_team_creation(callback: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã."""
    mapping = {
        "team_sport_football": "—Ñ—É—Ç–±–æ–ª",
        "team_sport_basketball": "–±–∞—Å–∫–µ—Ç–±–æ–ª",
        "team_sport_volleyball": "–≤–æ–ª–µ–π–±–æ–ª",
        "team_sport_hockey": "—Ö–æ–∫–∫–µ–π",
        "team_sport_athletics": "–ª–µ–≥–∫–∞—è –∞—Ç–ª–µ—Ç–∏–∫–∞",
        "team_sport_combat": "–µ–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞",
        "team_sport_swimming": "–ø–ª–∞–≤–∞–Ω–∏–µ",
        "team_sport_general": "–û–§–ü",
    }
    sport_type = mapping.get(callback.data, "–û–§–ü")
    data = await state.get_data()

    try:
        team = await create_team(callback.from_user.id, data['team_name'], data.get('team_description', ''), sport_type)
        await state.clear()
        if team:
            text = (
                f"‚úÖ <b>–ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                f"üèÜ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {team.name}\n"
                f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {team.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
                f"üèÉ <b>–í–∏–¥ —Å–ø–æ—Ä—Ç–∞:</b> {team.sport_type}\n"
                f"üë• <b>–ò–≥—Ä–æ–∫–æ–≤:</b> {team.players_count}\n"
                f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {team.created_at.strftime('%d.%m.%Y %H:%M')}"
            )
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data=f"add_player_{team.id}")],
                    [InlineKeyboardButton(text="üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data=f"view_team_{team.id}")],
                    [InlineKeyboardButton(text="üèÜ –ö –∫–æ–º–∞–Ω–¥–∞–º", callback_data="teams_menu")]
                ]
            )
            await safe_edit_text(callback.message, text, reply_markup=kb)
            await callback.answer("‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞!")
            logger.info("Team created: id=%s coach=%s name=%s", getattr(team, 'id', None), callback.from_user.id, team.name)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã", show_alert=True)
            logger.warning("Failed to create team for user %s", callback.from_user.id)
    except Exception as e:
        logger.exception("Exception while finalizing team creation: %s", e)
        await callback.answer("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞", show_alert=True)


@teams_router.callback_query(F.data == "my_teams")
async def cb_my_teams(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."""
    await state.clear()
    teams = await get_coach_teams(callback.from_user.id)

    if not teams:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="create_team")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="teams_menu")]
            ]
        )
        await safe_edit_text(callback.message, "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–∞–Ω–¥</b>\n\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–æ–º–∞–Ω–¥—É!", reply_markup=kb)
        await callback.answer()
        return

    buttons = [[InlineKeyboardButton(text=f"{team.name} ({team.players_count})", callback_data=f"view_team_{team.id}")] for team in teams]
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="teams_menu")])
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await safe_edit_text(callback.message, f"üèÜ <b>–í–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã ({len(teams)})</b>\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=kb)
    await callback.answer()


@teams_router.callback_query(F.data.startswith("view_team_"))
async def cb_view_team(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ."""
    await state.clear()
    team_id = int(callback.data.split('_')[-1])
    team = await get_team_by_id(team_id)
    if not team:
        await callback.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    players = await get_team_players(team_id)
    text = (
        f"üèÜ <b>{team.name}</b>\n\n"
        f"üìã {team.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
        f"üèÉ <b>–í–∏–¥ —Å–ø–æ—Ä—Ç–∞:</b> {team.sport_type}\n"
        f"üë• <b>–ò–≥—Ä–æ–∫–æ–≤:</b> {len(players)}/{team.max_players}\n"
        f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {team.created_at.strftime('%d.%m.%Y')}"
    )
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üë• –ò–≥—Ä–æ–∫–∏", callback_data=f"team_players_{team_id}")],
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data=f"add_player_{team_id}")],
            [InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–∞–º", callback_data="my_teams")]
        ]
    )
    await safe_edit_text(callback.message, text, reply_markup=kb)
    await callback.answer()
    text += f"üÜî **–ö–æ–¥ –∫–æ–º–∞–Ω–¥—ã:** `{team.access_code}`\n"
    text += f"üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –∏–≥—Ä–æ–∫–∞–º –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è!\n\n"

@teams_router.callback_query(F.data.startswith("team_players_"))
async def cb_team_players(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã."""
    await state.clear()
    team_id = int(callback.data.split('_')[-1])
    team = await get_team_by_id(team_id)
    players = await get_team_players(team_id)

    if not players:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data=f"add_player_{team_id}")],
                [InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–µ", callback_data=f"view_team_{team_id}")]
            ]
        )
        await safe_edit_text(callback.message, f"üë• <b>–ò–≥—Ä–æ–∫–∏ –∫–æ–º–∞–Ω–¥—ã \"{team.name}\"</b>\n\nüì≠ –í –∫–æ–º–∞–Ω–¥–µ –ø–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤\n\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞!", reply_markup=kb)
        await callback.answer()
        return

    players_text = ""
    for i, p in enumerate(players, 1):
        full = p.first_name + (f" {p.last_name}" if getattr(p, 'last_name', None) else "")
        num = f"#{p.jersey_number}" if getattr(p, 'jersey_number', None) else ""
        pos = f"({p.position})" if getattr(p, 'position', None) else ""
        players_text += f"{i}. {num} {full} {pos}\n"

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data=f"add_player_{team_id}")],
            [InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–µ", callback_data=f"view_team_{team_id}")]
        ]
    )
    await safe_edit_text(callback.message, f"üë• <b>–ò–≥—Ä–æ–∫–∏ –∫–æ–º–∞–Ω–¥—ã \"{team.name}\"</b>\n\n{players_text}\n–í—Å–µ–≥–æ: {len(players)} –∏–≥—Ä–æ–∫–æ–≤", reply_markup=kb)
    await callback.answer()


@teams_router.callback_query(F.data.startswith("add_player_"))
async def cb_add_player(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É."""
    team_id = int(callback.data.split('_')[-1])
    team = await get_team_by_id(team_id)
    if not team:
        await callback.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    await state.update_data(team_id=team_id)
    await state.set_state(TeamStates.waiting_player_first_name)
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_team_{team_id}")]])
    await safe_edit_text(callback.message, f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ \"{team.name}\"</b>\n\nüë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞:", reply_markup=kb)
    await callback.answer()


@teams_router.message(TeamStates.waiting_player_first_name)
async def process_player_first_name(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞."""
    first = message.text.strip()
    if len(first) < 1:
        await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º:")
        return
    if len(first) > 100:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤:")
        return
    await state.update_data(player_first_name=first)
    await state.set_state(TeamStates.waiting_player_last_name)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_last_name")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_player")]
        ]
    )
    await message.answer(f"‚úÖ –ò–º—è: <b>{first}</b>\n\nüë§ –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏–≥—Ä–æ–∫–∞ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):", reply_markup=kb, parse_mode="HTML")


@teams_router.message(TeamStates.waiting_player_last_name)
async def process_player_last_name(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏ –∏–≥—Ä–æ–∫–∞."""
    last = message.text.strip()
    if len(last) > 100:
        await message.answer("‚ùå –§–∞–º–∏–ª–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤:")
        return
    await state.update_data(player_last_name=last)
    await ask_player_position(message, state, is_callback=False)


@teams_router.callback_query(F.data == "skip_last_name")
async def cb_skip_last_name(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–∞–º–∏–ª–∏–∏ –∏–≥—Ä–æ–∫–∞."""
    await state.update_data(player_last_name="")
    await ask_player_position(callback, state, is_callback=True)


async def ask_player_position(update: Message | CallbackQuery, state: FSMContext, is_callback: bool = True) -> None:
    """–ó–∞–ø—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞."""
    await state.set_state(TeamStates.waiting_player_position)
    data = await state.get_data()
    first = data['player_first_name']
    last = data.get('player_last_name', '')
    full = f"{first} {last}".strip()
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_position")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_player")]
        ]
    )
    text = f"‚úÖ –ò–≥—Ä–æ–∫: <b>{full}</b>\n\nüèÉ –í–≤–µ–¥–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):"
    if is_callback:
        await safe_edit_text(update.message, text, reply_markup=kb)
    else:
        await update.answer(text, reply_markup=kb, parse_mode="HTML")


@teams_router.message(TeamStates.waiting_player_position)
async def process_player_position(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞."""
    pos = message.text.strip()
    if len(pos) > 50:
        await message.answer("‚ùå –ü–æ–∑–∏—Ü–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤:")
        return
    await state.update_data(player_position=pos)
    await ask_player_jersey(message, state, is_callback=False)


@teams_router.callback_query(F.data == "skip_position")
async def cb_skip_position(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞."""
    await state.update_data(player_position="")
    await ask_player_jersey(callback, state, is_callback=True)


async def ask_player_jersey(update: Message | CallbackQuery, state: FSMContext, is_callback: bool = True) -> None:
    """–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ –Ω–∞ –º–∞–π–∫–µ –∏–≥—Ä–æ–∫–∞."""
    await state.set_state(TeamStates.waiting_player_jersey)
    data = await state.get_data()
    first = data['player_first_name']
    last = data.get('player_last_name', '')
    pos = data.get('player_position', '')
    full = f"{first} {last}".strip()
    pos_text = f"üèÉ –ü–æ–∑–∏—Ü–∏—è: <b>{pos}</b>\n" if pos else ""
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_jersey_number")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_player")]
        ]
    )
    text = f"‚úÖ –ò–≥—Ä–æ–∫: <b>{full}</b>\n{pos_text}\nüî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞ –º–∞–π–∫–µ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):"
    if is_callback:
        await safe_edit_text(update.message, text, reply_markup=kb)
    else:
        await update.answer(text, reply_markup=kb, parse_mode="HTML")


@teams_router.message(TeamStates.waiting_player_jersey)
async def process_player_jersey(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –Ω–∞ –º–∞–π–∫–µ."""
    txt = message.text.strip()
    try:
        jersey = int(txt)
        if jersey < 1 or jersey > 999:
            await message.answer("‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 999:")
            return
    except ValueError:
        await message.answer("‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º:")
        return

    await state.update_data(player_jersey=jersey)
    await finalize_player_creation(message, state, is_callback=False)


@teams_router.callback_query(F.data == "skip_jersey_number")
async def cb_skip_jersey(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–æ–º–µ—Ä–∞ –Ω–∞ –º–∞–π–∫–µ."""
    await state.update_data(player_jersey=None)
    await finalize_player_creation(callback, state, is_callback=True)


async def finalize_player_creation(update: Message | CallbackQuery, state: FSMContext, is_callback: bool = True) -> None:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É."""
    data = await state.get_data()
    team_id = data.get('team_id')
    try:
        player = await add_team_player(
            team_id=team_id,
            first_name=data['player_first_name'],
            last_name=data.get('player_last_name') or None,
            position=data.get('player_position') or None,
            jersey_number=data.get('player_jersey')
        )
        await state.clear()
        if player:
            full = player.first_name + (f" {player.last_name}" if getattr(player, 'last_name', None) else "")
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–≥—Ä–æ–∫–∞", callback_data=f"add_player_{team_id}")],
                    [InlineKeyboardButton(text="üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–≥—Ä–æ–∫–æ–≤", callback_data=f"team_players_{team_id}")],
                    [InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–µ", callback_data=f"view_team_{team_id}")]
                ]
            )
            text = (
                f"‚úÖ <b>–ò–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                f"üë§ <b>–ò–º—è:</b> {full}\n"
                f"üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω:</b> {getattr(player, 'joined_at', datetime.now()).strftime('%d.%m.%Y %H:%M')}"
            )
            if is_callback:
                await safe_edit_text(update.message, text, reply_markup=kb)
                await update.answer("‚úÖ –ò–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!")
            else:
                await update.answer(text, reply_markup=kb, parse_mode="HTML")
            logger.info("Player added to team %s: %s", team_id, full)
        else:
            if is_callback:
                await update.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞", show_alert=True)
            else:
                await update.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞")
            logger.warning("Failed to add player to team %s", team_id)
    except Exception as e:
        logger.exception("Exception while adding player: %s", e)
        if is_callback:
            await update.answer("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞", show_alert=True)
        else:
            await update.answer("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")


@teams_router.callback_query(F.data == "students_menu")
async def cb_students_menu(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö."""
    await state.clear()
    students = await get_individual_students(callback.from_user.id)
    text = (
        f"üë§ <b>–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–æ–¥–æ–ø–µ—á–Ω—ã–µ</b>\n\n"
        f"üìä –£ –≤–∞—Å {len(students)} –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö\n\n"
        "–ü–æ–¥–æ–ø–µ—á–Ω—ã–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫."
    )
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ", callback_data="add_student")],
            [InlineKeyboardButton(text="üë• –ú–æ–∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–µ", callback_data="my_students")],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )
    await safe_edit_text(callback.message, text, reply_markup=kb)
    await callback.answer()


@teams_router.callback_query(F.data == "add_student")
async def cb_add_student(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ."""
    await state.set_state(TeamStates.waiting_student_first_name)
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="students_menu")]])
    await safe_edit_text(callback.message, "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ</b>\n\nüë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ:", reply_markup=kb)
    await callback.answer()


@teams_router.message(TeamStates.waiting_student_first_name)
async def process_student_first_name(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ."""
    first = message.text.strip()
    if len(first) < 1:
        await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º:")
        return
    await state.update_data(student_first_name=first)
    await state.set_state(TeamStates.waiting_student_last_name)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_student_last_name")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="students_menu")]
        ]
    )
    await message.answer(f"‚úÖ –ò–º—è: <b>{first}</b>\n\nüë§ –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):", reply_markup=kb, parse_mode="HTML")


@teams_router.message(TeamStates.waiting_student_last_name)
async def process_student_last_name(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ."""
    last = message.text.strip()
    await state.update_data(student_last_name=last)
    await ask_student_specialization(message, state, is_callback=False)


@teams_router.callback_query(F.data == "skip_student_last_name")
async def cb_skip_student_last_name(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–∞–º–∏–ª–∏–∏ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ."""
    await state.update_data(student_last_name="")
    await ask_student_specialization(callback, state, is_callback=True)


async def ask_student_specialization(update: Message | CallbackQuery, state: FSMContext, is_callback: bool = True) -> None:
    """–ó–∞–ø—Ä–æ—Å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ."""
    await state.set_state(TeamStates.waiting_student_specialization)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üèÉ –ë–µ–≥", callback_data="spec_running")],
            [InlineKeyboardButton(text="üí™ –°–∏–ª–æ–≤—ã–µ", callback_data="spec_strength")],
            [InlineKeyboardButton(text="ü§∏ –ì–∏–º–Ω–∞—Å—Ç–∏–∫–∞", callback_data="spec_gymnastics")],
            [InlineKeyboardButton(text="üèä –ü–ª–∞–≤–∞–Ω–∏–µ", callback_data="spec_swimming")],
            [InlineKeyboardButton(text="ü•ä –ï–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞", callback_data="spec_combat")],
            [InlineKeyboardButton(text="‚öΩ –§—É—Ç–±–æ–ª", callback_data="spec_football")],
            [InlineKeyboardButton(text="üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª", callback_data="spec_basketball")],
            [InlineKeyboardButton(text="üí™ –û–§–ü", callback_data="spec_general")],
            [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_specialization")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="students_menu")]
        ]
    )
    data = await state.get_data()
    full = f"{data.get('student_first_name')} {data.get('student_last_name', '')}".strip()
    text = f"‚úÖ –ü–æ–¥–æ–ø–µ—á–Ω—ã–π: <b>{full}</b>\n\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:"
    if is_callback:
        await safe_edit_text(update.message, text, reply_markup=kb)
    else:
        await update.answer(text, reply_markup=kb, parse_mode="HTML")


@teams_router.callback_query(F.data.startswith("spec_") | F.data == "skip_specialization")
async def cb_student_specialization(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ."""
    if callback.data == "skip_specialization":
        spec = ""
    else:
        mapping = {
            "spec_running": "–ë–µ–≥",
            "spec_strength": "–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
            "spec_gymnastics": "–ì–∏–º–Ω–∞—Å—Ç–∏–∫–∞",
            "spec_swimming": "–ü–ª–∞–≤–∞–Ω–∏–µ",
            "spec_combat": "–ï–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞",
            "spec_football": "–§—É—Ç–±–æ–ª",
            "spec_basketball": "–ë–∞—Å–∫–µ—Ç–±–æ–ª",
            "spec_general": "–û–§–ü",
        }
        spec = mapping.get(callback.data, "")
    await state.update_data(student_specialization=spec)
    await ask_student_level(callback, state)


async def ask_student_level(callback: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–ø—Ä–æ—Å —É—Ä–æ–≤–Ω—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ."""
    await state.set_state(TeamStates.waiting_student_level)
    data = await state.get_data()
    full = f"{data.get('student_first_name')} {data.get('student_last_name', '')}".strip()
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üü¢ –ù–æ–≤–∏—á–æ–∫", callback_data="level_beginner")],
            [InlineKeyboardButton(text="üü° –°—Ä–µ–¥–Ω–∏–π", callback_data="level_intermediate")],
            [InlineKeyboardButton(text="üî¥ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", callback_data="level_advanced")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="students_menu")]
        ]
    )
    text = f"‚úÖ –ü–æ–¥–æ–ø–µ—á–Ω—ã–π: <b>{full}</b>\n\nüìä –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:"
    await safe_edit_text(callback.message, text, reply_markup=kb)
    await callback.answer()


@teams_router.callback_query(F.data.startswith("level_"))
async def cb_student_level(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ."""
    mapping = {"level_beginner": "beginner", "level_intermediate": "intermediate", "level_advanced": "advanced"}
    level = mapping.get(callback.data, "beginner")
    data = await state.get_data()
    try:
        student = await add_individual_student(
            coach_telegram_id=callback.from_user.id,
            first_name=data['student_first_name'],
            last_name=data.get('student_last_name') or None,
            specialization=data.get('student_specialization') or None,
            level=level
        )
        await state.clear()
        if student:
            text = (
                f"‚úÖ <b>–ü–æ–¥–æ–ø–µ—á–Ω—ã–π –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                f"üë§ <b>{student.first_name} {student.last_name or ''}</b>\n"
                f"üìä –£—Ä–æ–≤–µ–Ω—å: {student.level}"
            )
            kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ", callback_data="add_student")],
                    [InlineKeyboardButton(text="üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö", callback_data="my_students")],
                    [InlineKeyboardButton(text="üîô –ö –ø–æ–¥–æ–ø–µ—á–Ω—ã–º", callback_data="students_menu")]
                ]
            )
            await safe_edit_text(callback.message, text, reply_markup=kb)
            await callback.answer("‚úÖ –ü–æ–¥–æ–ø–µ—á–Ω—ã–π –¥–æ–±–∞–≤–ª–µ–Ω!")
            logger.info("Individual student added: coach=%s name=%s", callback.from_user.id, student.first_name)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ", show_alert=True)
            logger.warning("Failed to add individual student for coach %s", callback.from_user.id)
    except Exception as e:
        logger.exception("Exception while adding student: %s", e)
        await callback.answer("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞", show_alert=True)


@teams_router.callback_query(F.data == "my_students")
async def cb_my_students(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö."""
    await state.clear()
    students = await get_individual_students(callback.from_user.id)
    if not students:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ", callback_data="add_student")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="students_menu")]
            ]
        )
        await safe_edit_text(callback.message, "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö</b>\n\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ!", reply_markup=kb)
        await callback.answer()
        return

    text = ""
    for i, s in enumerate(students, 1):
        text += f"{i}. {s.first_name} {s.last_name or ''} ‚Äî {s.level}\n"
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ", callback_data="add_student")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="students_menu")]
        ]
    )
    await safe_edit_text(callback.message, f"üë• <b>–ú–æ–∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–µ ({len(students)})</b>\n\n{text}", reply_markup=kb)
    await callback.answer()


@teams_router.callback_query(F.data == "stats_menu")
async def cb_stats_menu(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    await state.clear()
    stats = await get_coach_stats(callback.from_user.id)
    text = (
        f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üèÜ –ö–æ–º–∞–Ω–¥: {stats['teams_count']}\n"
        f"üë• –ò–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö: {stats['team_players_count']}\n"
        f"üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö: {stats['individual_students_count']}\n\n"
        f"üéØ –í—Å–µ–≥–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤: {stats['total_athletes']}"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
    await safe_edit_text(callback.message, text, reply_markup=kb)
    await callback.answer()


# –†–∞–±–æ—Ç–∞ —Å –ë–î
async def get_coach_stats(coach_telegram_id: int) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–µ–Ω–µ—Ä–∞."""
    if teams_db:
        try:
            return await teams_db.get_coach_statistics(coach_telegram_id)
        except Exception as e:
            logger.exception("get_coach_stats DB error: %s", e)
            return {'teams_count': 0, 'team_players_count': 0, 'individual_students_count': 0, 'total_athletes': 0}
    return {'teams_count': 0, 'team_players_count': 0, 'individual_students_count': 0, 'total_athletes': 0}


async def create_team(coach_telegram_id: int, name: str, description: str = "", sport_type: str = "–û–§–ü") -> Optional:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –ë–î."""
    if teams_db:
        try:
            return await teams_db.create_team(coach_telegram_id, name, description, sport_type)
        except Exception as e:
            logger.exception("create_team DB error: %s", e)
            return None
    logger.warning("create_team called but teams_db is None")
    return None


async def get_coach_teams(coach_telegram_id: int) -> List:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ —Ç—Ä–µ–Ω–µ—Ä–∞."""
    if teams_db:
        try:
            return await teams_db.get_coach_teams(coach_telegram_id)
        except Exception as e:
            logger.exception("get_coach_teams DB error: %s", e)
            return []
    return []


async def get_team_by_id(team_id: int) -> Optional:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ ID."""
    if teams_db:
        try:
            return await teams_db.get_team_by_id(team_id)
        except Exception as e:
            logger.exception("get_team_by_id DB error: %s", e)
            return None
    return None


async def get_team_players(team_id: int) -> List:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã."""
    if teams_db:
        try:
            return await teams_db.get_team_players(team_id)
        except Exception as e:
            logger.exception("get_team_players DB error: %s", e)
            return []
    return []


async def add_team_player(team_id: int, first_name: str, last_name: Optional[str] = None, position: Optional[str] = None, jersey_number: Optional[int] = None) -> Optional:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É."""
    if teams_db:
        try:
            return await teams_db.add_team_player(team_id, first_name, last_name, position, jersey_number)
        except Exception as e:
            logger.exception("add_team_player DB error: %s", e)
            return None
    return None


async def add_individual_student(coach_telegram_id: int, first_name: str, last_name: Optional[str] = None, specialization: Optional[str] = None, level: str = "beginner") -> Optional:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ."""
    if teams_db:
        try:
            return await teams_db.add_individual_student(coach_telegram_id, first_name, last_name, specialization, level)
        except Exception as e:
            logger.exception("add_individual_student DB error: %s", e)
            return None
    return None


async def get_individual_students(coach_telegram_id: int) -> List:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö."""
    if teams_db:
        try:
            return await teams_db.get_individual_students(coach_telegram_id)
        except Exception as e:
            logger.exception("get_individual_students DB error: %s", e)
            return []
    return []


# –≠–∫—Å–ø–æ—Ä—Ç
def get_teams_router() -> Router:
    """–≠–∫—Å–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–∞ –∫–æ–º–∞–Ω–¥."""
    logger.info("Exporting teams router")
    return teams_router
def get_teams_router() -> Router:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–æ—É—Ç–µ—Ä –º–æ–¥—É–ª—è teams."""
    return teams_router

__all__ = ["get_teams_router", "init_teams_module_async"]