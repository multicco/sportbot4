from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database import db_manager
from states.workout_states import CreateWorkoutStates

workouts_router = Router()

# === –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ô –¢–†–ï–ù–ò–†–û–í–ö–ò ===
@workouts_router.callback_query(F.data == "create_workout")
async def start_create_workout(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üèãÔ∏è **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
        parse_mode="Markdown"
    )
    await state.set_state(CreateWorkoutStates.waiting_name)
    await callback.answer()


# === –ü–û–ò–°–ö –¢–†–ï–ù–ò–†–û–í–ö–ò –ü–û –ö–û–î–£ ===
@workouts_router.callback_query(F.data == "find_workout")
async def start_find_workout(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üîç **–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏**, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –µ—ë.\n\n_–ö–æ–¥ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞ –∏–ª–∏ –¥—Ä—É–≥–∞._",
        parse_mode="Markdown"
    )
    await state.set_state("waiting_workout_code")
    await callback.answer()


# === –û–ë–†–ê–ë–û–¢–ö–ê –í–í–û–î–ê –ö–û–î–ê –¢–†–ï–ù–ò–†–û–í–ö–ò ===
async def process_find_workout_input(message: Message, state: FSMContext):
    code = message.text.strip()

    async with db_manager.pool.acquire() as conn:
        workout = await conn.fetchrow(
            "SELECT * FROM workouts WHERE unique_id = $1 OR id::text = $1",
            code
        )

    if not workout:
        await message.answer("‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    async with db_manager.pool.acquire() as conn:
        exercises = await conn.fetch(
            """
            SELECT e.name, we.phase, we.sets, we.reps_min, we.reps_max, we.one_rm_percent, we.rest_seconds
            FROM workout_exercises we
            JOIN exercises e ON we.exercise_id = e.id
            WHERE we.workout_id = $1
            ORDER BY we.phase, we.order_in_phase
            """,
            workout["id"]
        )

    text = (
        f"üèãÔ∏è **{workout['name']}**\n"
        f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {workout['description'] or '‚Äî'}\n\n"
        f"üí° –ö–æ–¥: `{workout['unique_id']}`\n\n"
    )

    if exercises:
        current_phase = None
        for ex in exercises:
            phase = ex["phase"]
            if phase != current_phase:
                phase_names = {
                    "warmup": "üî• –†–∞–∑–º–∏–Ω–∫–∞",
                    "nervous_prep": "‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ù–°",
                    "main": "üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å",
                    "cooldown": "üßò –ó–∞–º–∏–Ω–∫–∞"
                }
                text += f"\n**{phase_names.get(phase, phase.capitalize())}**:\n"
                current_phase = phase
            text += (
                f"‚Ä¢ {ex['name']} ‚Äî {ex['sets']}√ó{ex['reps_min']}-{ex['reps_max']} –ø–æ–≤—Ç.  ‚è±Ô∏è –æ—Ç–¥—ã—Ö {ex['rest_seconds']}—Å"
            )
            if ex["one_rm_percent"]:
                text += f" ({ex['one_rm_percent']}% 1–ü–ú)"
            text += "\n"
    else:
        text += "‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n"

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üèãÔ∏è –°–æ–∑–¥–∞—Ç—å —Å–≤–æ—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="create_workout")
    keyboard.button(text="üîô –í –º–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", callback_data="workouts_menu")
    keyboard.adjust(1)

    await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
    await state.clear()


# === –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–û–ì–û –í–í–û–î–ê ===
async def process_workout_text_input(message: Message, state: FSMContext):
    current_state = await state.get_state()

    # === –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ===
    if current_state == CreateWorkoutStates.waiting_name.state:
        workout_name = message.text.strip()
        if not workout_name or len(workout_name) < 3:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
            return
        await state.update_data(name=workout_name)
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üìù –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="add_workout_description")
        keyboard.button(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="skip_description")
        keyboard.adjust(1)
        await message.answer(
            f"‚úÖ **–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:** {workout_name}\n\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ?",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        await state.set_state(CreateWorkoutStates.waiting_description)
        return

    # === –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ===
    if current_state == CreateWorkoutStates.waiting_description.state:
        description = message.text.strip()
        await state.update_data(description=description)
        await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–ª–∏ –±–ª–æ–∫–∏.")
        return

    # === –í–≤–æ–¥ –∫–æ–¥–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ===
    if current_state == "waiting_workout_code":
        await process_find_workout_input(message, state)
        return

    await message.answer("‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")


def register_workout_handlers(dp):
    dp.include_router(workouts_router)


__all__ = ["workouts_router", "process_workout_text_input", "register_workout_handlers"]
