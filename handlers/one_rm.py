# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò 1–ü–ú –¢–ï–°–¢–û–í =====

from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database import db_manager
from keyboards.main_keyboards_old import get_coming_soon_keyboard
from utils.validators import validate_1rm_data
from utils.formatters import format_1rm_results

def register_one_rm_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ 1–ü–ú —Ç–µ—Å—Ç–æ–≤"""
    
    dp.callback_query.register(new_1rm_test, F.data == "new_1rm_test")
    dp.callback_query.register(select_1rm_exercise, F.data.startswith("1rm_"))
    dp.callback_query.register(show_my_1rm_results, F.data == "my_1rm_results")
    dp.callback_query.register(show_1rm_stats, F.data == "1rm_stats")

async def new_1rm_test(callback: CallbackQuery):
    """–í—ã–±–æ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞ 1–ü–ú"""
    try:
        async with db_manager.pool.acquire() as conn:
            exercises = await conn.fetch("""
                SELECT id, name, category, muscle_group
                FROM exercises 
                WHERE category = '–°–∏–ª–æ–≤—ã–µ'
                ORDER BY name
                LIMIT 15
            """)
        
        if exercises:
            text = "üí™ **–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞ 1–ü–ú:**\n\n"
            keyboard = InlineKeyboardBuilder()
            
            for ex in exercises:
                keyboard.button(
                    text=f"üí™ {ex['name']}", 
                    callback_data=f"1rm_{ex['id']}"
                )
            
            keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="one_rm_menu")
            keyboard.adjust(1)
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
        else:
            await callback.message.edit_text(
                "‚ùå –°–∏–ª–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ë–î.",
                parse_mode="Markdown"
            )
            
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await callback.answer()

async def select_1rm_exercise(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –¥–∞–Ω–Ω—ã—Ö"""
    exercise_id = callback.data.split("_")[1]
    
    try:
        async with db_manager.pool.acquire() as conn:
            exercise = await conn.fetchrow("SELECT name, category FROM exercises WHERE id = $1", int(exercise_id))
        
        if exercise:
            await state.update_data(exercise_id=exercise_id, exercise_name=exercise['name'])
            
            await callback.message.edit_text(
                f"üí™ **–¢–µ—Å—Ç 1–ü–ú: {exercise['name']}**\n\n"
                f"üî¨ **–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:**\n"
                f"`–≤–µ—Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è`\n\n"
                f"**–ü—Ä–∏–º–µ—Ä—ã:**\n"
                f"‚Ä¢ `80 5` (80 –∫–≥ –Ω–∞ 5 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π)\n"
                f"‚Ä¢ `60 10` (60 –∫–≥ –Ω–∞ 10 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π)\n\n"
                f"–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç 1–ü–ú –ø–æ 3 —Ñ–æ—Ä–º—É–ª–∞–º –∏ –≤—ã–≤–µ–¥–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ!",
                parse_mode="Markdown"
            )
            await state.set_state("waiting_1rm_data")
        else:
            await callback.message.edit_text("‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await callback.answer()

async def show_my_1rm_results(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã 1–ü–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    
    try:
        async with db_manager.pool.acquire() as conn:
            results = await conn.fetch("""
                SELECT e.name, orm.weight, orm.tested_at, orm.reps, orm.test_weight
                FROM one_rep_max orm
                JOIN exercises e ON orm.exercise_id = e.id
                WHERE orm.user_id = $1
                ORDER BY orm.tested_at DESC
                LIMIT 10
            """, user['id'])
        
        if results:
            text = f"üìä **–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã 1–ü–ú:**\n\n"
            for result in results:
                date = result['tested_at'].strftime('%d.%m.%Y')
                text += f"üí™ **{result['name']}**\n"
                text += f"üèãÔ∏è 1–ü–ú: **{result['weight']} –∫–≥**\n"
                text += f"üìù –¢–µ—Å—Ç: {result['test_weight']}–∫–≥ √ó {result['reps']} —Ä–∞–∑\n"
                text += f"üìÖ {date}\n\n"
        else:
            text = "üìä **–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ 1–ü–ú**\n\n" \
                   "–ü—Ä–æ–π–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞!"
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üí™ –ù–æ–≤—ã–π —Ç–µ—Å—Ç", callback_data="new_1rm_test")
        keyboard.button(text="üîô –ö —Ç–µ—Å—Ç–∞–º", callback_data="one_rm_menu")
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await callback.answer()

async def show_1rm_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É 1–ü–ú (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"""
    keyboard = get_coming_soon_keyboard()
    
    await callback.message.edit_text(
        f"üöß **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ 1–ü–ú**\n\n"
        f"–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        f"–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

# ===== –†–ê–°–ß–ï–¢ 1–ü–ú =====
def calculate_1rm(weight, reps):
    """–†–∞—Å—á–µ—Ç 1–ü–ú –ø–æ —Ç—Ä–µ–º —Ñ–æ—Ä–º—É–ª–∞–º"""
    w = float(weight)
    r = int(reps)
    
    if r == 1:
        return {
            'brzycki': w,
            'epley': w,
            'alternative': w,
            'average': w
        }
    
    # –§–æ—Ä–º—É–ª–∞ –ë–∂–∏—Ü–∫–æ–≥–æ
    brzycki = w / (1.0278 - 0.0278 * r)
    
    # –§–æ—Ä–º—É–ª–∞ –≠–ø–ª–∏
    epley = w * (1 + r / 30.0)
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞
    alternative = w * (1 + 0.025 * r)
    
    # –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    average = (brzycki + epley + alternative) / 3.0
    
    return {
        'brzycki': round(brzycki, 1),
        'epley': round(epley, 1), 
        'alternative': round(alternative, 1),
        'average': round(average, 1)
    }

async def process_1rm_data(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∞ 1–ü–ú"""
    parts = message.text.split()
    validation = validate_1rm_data(parts[0] if len(parts) > 0 else "", 
                                    parts[1] if len(parts) > 1 else "")
    
    if not validation['valid']:
        await message.answer(validation['error'])
        return
    
    weight = validation['weight']
    reps = validation['reps']
    
    # –†–∞—Å—á–µ—Ç 1–ü–ú –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º
    results = calculate_1rm(weight, reps)
    state_data = await state.get_data()
    exercise_name = state_data.get('exercise_name', '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î
    user = await db_manager.get_user_by_telegram_id(message.from_user.id)
    
    try:
        async with db_manager.pool.acquire() as conn:
            await conn.execute("""
                INSERT INTO one_rep_max (user_id, exercise_id, weight, reps, test_weight, 
                                       formula_brzycki, formula_epley, formula_alternative, formula_average)
                VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
            """, user['id'], int(state_data['exercise_id']), results['average'], 
                 reps, weight, results['brzycki'], results['epley'], 
                 results['alternative'], results['average'])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        text = format_1rm_results(exercise_name, weight, reps, results)
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üí™ –ù–æ–≤—ã–π —Ç–µ—Å—Ç", callback_data="new_1rm_test")
        keyboard.button(text="üìä –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="my_1rm_results")
        keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        
        await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

async def get_user_1rm_for_exercise(user_id: int, exercise_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç 1–ü–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    try:
        async with db_manager.pool.acquire() as conn:
            result = await conn.fetchrow("""
                SELECT weight FROM one_rep_max 
                WHERE user_id = $1 AND exercise_id = $2 
                ORDER BY tested_at DESC LIMIT 1
            """, user_id, exercise_id)
        
        return float(result['weight']) if result else None
    except Exception:
        return None

__all__ = [
    'register_one_rm_handlers',
    'process_1rm_data',
    'calculate_1rm',
    'get_user_1rm_for_exercise'
]