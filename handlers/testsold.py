# ===== –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –¢–ï–°–¢–û–í =====

from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database import db_manager
from keyboards.main_keyboards_old import get_tests_menu_keyboard, get_new_test_type_menu_keyboard, get_coming_soon_keyboard
from utils.validators import validate_test_data
from utils.formatters import format_test_results, format_test_history

def register_test_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç–µ—Å—Ç–æ–≤
    dp.callback_query.register(tests_menu, F.data == "tests_menu")
    dp.callback_query.register(new_test_menu, F.data == "new_test_menu")
    dp.callback_query.register(my_tests, F.data == "my_tests")
    dp.callback_query.register(test_progress, F.data == "test_progress")
    dp.callback_query.register(test_records, F.data == "test_records")
    
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞
    dp.callback_query.register(test_type_strength, F.data == "test_type_strength")
    dp.callback_query.register(test_type_endurance, F.data == "test_type_endurance")
    dp.callback_query.register(test_type_speed, F.data == "test_type_speed")
    dp.callback_query.register(test_type_quantity, F.data == "test_type_quantity")
    
    # –í—ã–±–æ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
    dp.callback_query.register(select_test_exercise, F.data.startswith("test_ex_"))
    
    # –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ (–∏–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π)
    dp.callback_query.register(start_exercise_test, F.data.startswith("test_"))

async def tests_menu(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç–µ—Å—Ç–æ–≤"""
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        async with db_manager.pool.acquire() as conn:
            stats = await conn.fetchrow("""
                SELECT 
                    COUNT(*) as total_tests,
                    COUNT(DISTINCT exercise_id) as tested_exercises,
                    MAX(tested_at) as last_test_date
                FROM user_tests 
                WHERE user_id = $1
            """, user['id'])
        
        keyboard = get_tests_menu_keyboard()
        
        text = f"üìä **–°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è**\n\n"
        
        if stats['total_tests'] > 0:
            text += f"üìà **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            text += f"‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {stats['total_tests']}\n"
            text += f"‚Ä¢ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {stats['tested_exercises']}\n"
            if stats['last_test_date']:
                last_date = stats['last_test_date'].strftime('%d.%m.%Y')
                text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ—Å—Ç: {last_date}\n"
        else:
            text += f"üÜï **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!**\n\n"
            text += f"–ü—Ä–æ–π–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.\n"
        
        text += f"\nüéØ **–¢–∏–ø—ã —Ç–µ—Å—Ç–æ–≤:**\n"
        text += f"‚Ä¢ üèãÔ∏è **–°–∏–ª–æ–≤—ã–µ** - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å (1–ü–ú)\n"
        text += f"‚Ä¢ ‚è±Ô∏è **–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å** - –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è\n" 
        text += f"‚Ä¢ üèÉ **–°–∫–æ—Ä–æ—Å—Ç–Ω—ã–µ** - –≤—Ä–µ–º—è –Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é\n"
        text += f"‚Ä¢ üî¢ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ** - –º–∞–∫—Å–∏–º—É–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n\n"
        text += f"**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**"
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await callback.answer()

async def new_test_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    keyboard = get_new_test_type_menu_keyboard()
    
    await callback.message.edit_text(
        "üî¨ **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ—Å—Ç–∞:**\n\n"
        "üèãÔ∏è **–°–∏–ª–æ–≤—ã–µ —Ç–µ—Å—Ç—ã**\n"
        "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–µ—Å–∞ (1–ü–ú)\n"
        "_–ü—Ä–∏–º–µ—Ä—ã: –∂–∏–º –ª–µ–∂–∞, –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è, —Å—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞_\n\n"
        
        "‚è±Ô∏è **–¢–µ—Å—Ç—ã –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏**\n"
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏\n"
        "_–ü—Ä–∏–º–µ—Ä—ã: –ø–ª–∞–Ω–∫–∞, –≤–∏—Å –Ω–∞ —Ç—É—Ä–Ω–∏–∫–µ, —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è_\n\n"
        
        "üèÉ **–°–∫–æ—Ä–æ—Å—Ç–Ω—ã–µ —Ç–µ—Å—Ç—ã**\n" 
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é\n"
        "_–ü—Ä–∏–º–µ—Ä—ã: –±–µ–≥ 30–º, 100–º, —Å–ø—Ä–∏–Ω—Ç—ã_\n\n"
        
        "üî¢ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã**\n"
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
        "_–ü—Ä–∏–º–µ—Ä—ã: –æ—Ç–∂–∏–º–∞–Ω–∏—è, –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è, –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è_",
        
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

async def test_type_strength(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–∏–ª–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await show_exercises_by_test_type(callback, 'strength', 'üèãÔ∏è –°–∏–ª–æ–≤—ã–µ —Ç–µ—Å—Ç—ã')

async def test_type_endurance(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await show_exercises_by_test_type(callback, 'endurance', '‚è±Ô∏è –¢–µ—Å—Ç—ã –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏')

async def test_type_speed(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–∫–æ—Ä–æ—Å—Ç–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await show_exercises_by_test_type(callback, 'speed', 'üèÉ –°–∫–æ—Ä–æ—Å—Ç–Ω—ã–µ —Ç–µ—Å—Ç—ã')

async def test_type_quantity(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await show_exercises_by_test_type(callback, 'quantity', 'üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã')

async def show_exercises_by_test_type(callback: CallbackQuery, test_type: str, title: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        async with db_manager.pool.acquire() as conn:
            exercises = await conn.fetch("""
                SELECT id, name, muscle_group, description, measurement_unit
                FROM exercises 
                WHERE test_type = $1 
                ORDER BY name
            """, test_type)
        
        if exercises:
            text = f"**{title}**\n\n"
            text += f"–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
            
            keyboard = InlineKeyboardBuilder()
            
            for ex in exercises:
                # –≠–º–æ–¥–∑–∏ –ø–æ —Ç–∏–ø—É —Ç–µ—Å—Ç–∞
                emoji = {
                    'strength': 'üèãÔ∏è',
                    'endurance': '‚è±Ô∏è', 
                    'speed': 'üèÉ',
                    'quantity': 'üî¢'
                }.get(test_type, 'üìä')
                
                keyboard.button(
                    text=f"{emoji} {ex['name']} ({ex['muscle_group']})", 
                    callback_data=f"test_ex_{ex['id']}"
                )
            
            keyboard.button(text="üîô –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞", callback_data="new_test_menu")
            keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            keyboard.adjust(1)
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
        else:
            await callback.message.edit_text(
                f"‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ '{test_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç—Ä–µ–Ω–µ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π."
            )
            
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await callback.answer()

async def select_test_exercise(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –¥–∞–Ω–Ω—ã—Ö"""
    exercise_id = int(callback.data.split("_")[2])
    await start_test_for_exercise(callback, state, exercise_id)

async def start_exercise_test(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (–∏–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)"""
    exercise_id = int(callback.data.split("_")[1])
    await start_test_for_exercise(callback, state, exercise_id)

async def start_test_for_exercise(callback: CallbackQuery, state: FSMContext, exercise_id: int):
    """–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    try:
        async with db_manager.pool.acquire() as conn:
            exercise = await conn.fetchrow("""
                SELECT name, test_type, measurement_unit, description
                FROM exercises WHERE id = $1
            """, exercise_id)
        
        if exercise:
            await state.update_data(
                test_exercise_id=exercise_id,
                test_exercise_name=exercise['name'],
                test_type=exercise['test_type'],
                measurement_unit=exercise['measurement_unit']
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ç–∏–ø—É —Ç–µ—Å—Ç–∞
            instructions = get_test_instructions(exercise['test_type'])
            
            text = f"üî¨ **–¢–µ—Å—Ç: {exercise['name']}**\n\n"
            text += f"üìã **–¢–∏–ø:** {get_test_type_name(exercise['test_type'])}\n"
            text += f"üìä **–ò–∑–º–µ—Ä–µ–Ω–∏–µ:** {exercise['measurement_unit']}\n\n"
            text += f"**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:**\n{instructions['text']}\n\n"
            text += f"**–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞:** {instructions['format']}\n\n"
            text += f"**–ü—Ä–∏–º–µ—Ä—ã:** {instructions['examples']}"
            
            await callback.message.edit_text(text, parse_mode="Markdown")
            await state.set_state(f"waiting_{exercise['test_type']}_test_data")
        else:
            await callback.message.edit_text("‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await callback.answer()

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–• –¢–ï–°–¢–û–í =====
async def process_strength_test_data(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏–ª–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    parts = message.text.split()
    validation = validate_test_data('strength', parts)
    
    if not validation['valid']:
        await message.answer(validation['error'])
        return
    
    # –†–∞—Å—á–µ—Ç 1–ü–ú –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º
    one_rm_result = calculate_one_rm(validation['weight'], validation['reps'])
    await save_test_result(message, state, one_rm_result['average'], 'kg', {
        'test_weight': validation['weight'],
        'test_reps': validation['reps'],
        'formulas': one_rm_result
    })

async def process_endurance_test_data(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞ –Ω–∞ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å"""
    validation = validate_test_data('endurance', [message.text])
    
    if not validation['valid']:
        await message.answer(validation['error'])
        return
    
    await save_test_result(message, state, validation['time_seconds'], 'seconds', {
        'duration_seconds': validation['time_seconds']
    })

async def process_speed_test_data(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    parts = message.text.split()
    validation = validate_test_data('speed', parts)
    
    if not validation['valid']:
        await message.answer(validation['error'])
        return
    
    # –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ / –≤—Ä–µ–º—è
    speed = validation['distance'] / validation['time_seconds']
    await save_test_result(message, state, speed, 'm/s', {
        'distance': validation['distance'],
        'time_seconds': validation['time_seconds']
    })

async def process_quantity_test_data(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    validation = validate_test_data('quantity', [message.text])
    
    if not validation['valid']:
        await message.answer(validation['error'])
        return
    
    await save_test_result(message, state, validation['max_reps'], 'reps', {
        'max_reps': validation['max_reps']
    })

async def save_test_result(message: Message, state: FSMContext, result_value: float, result_unit: str, additional_data: dict):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞ –≤ –ë–î"""
    data = await state.get_data()
    user = await db_manager.get_user_by_telegram_id(message.from_user.id)
    
    try:
        async with db_manager.pool.acquire() as conn:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç
            test_id = await conn.fetchval("""
                INSERT INTO user_tests (
                    user_id, exercise_id, test_type, result_value, result_unit,
                    test_weight, test_reps, distance, time_seconds, 
                    duration_seconds, max_reps
                ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
                RETURNING id
            """, 
                user['id'], data['test_exercise_id'], data['test_type'],
                result_value, result_unit,
                additional_data.get('test_weight'),
                additional_data.get('test_reps'),
                additional_data.get('distance'),
                additional_data.get('time_seconds'),
                additional_data.get('duration_seconds'),
                additional_data.get('max_reps')
            )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        text = format_test_results(
            data['test_exercise_name'], 
            data['test_type'],
            result_value, 
            result_unit,
            additional_data
        )
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üî¨ –ù–æ–≤—ã–π —Ç–µ—Å—Ç", callback_data="new_test_menu")
        keyboard.button(text="üìä –ú–æ–∏ —Ç–µ—Å—Ç—ã", callback_data="my_tests")
        keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        keyboard.adjust(2)
        
        await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

# ===== –ü–†–û–°–ú–û–¢–† –†–ï–ó–£–õ–¨–¢–ê–¢–û–í =====
async def my_tests(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    
    try:
        async with db_manager.pool.acquire() as conn:
            results = await conn.fetch("""
                SELECT 
                    e.name as exercise_name, 
                    ut.test_type,
                    ut.result_value, 
                    ut.result_unit,
                    ut.tested_at,
                    ut.test_weight,
                    ut.test_reps
                FROM user_tests ut
                JOIN exercises e ON ut.exercise_id = e.id
                WHERE ut.user_id = $1
                ORDER BY ut.tested_at DESC
                LIMIT 15
            """, user['id'])
        
        if results:
            text = f"üìä **–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:**\n\n"
            
            for result in results:
                emoji = {
                    'strength': 'üèãÔ∏è',
                    'endurance': '‚è±Ô∏è', 
                    'speed': 'üèÉ',
                    'quantity': 'üî¢'
                }.get(result['test_type'], 'üìä')
                
                date = result['tested_at'].strftime('%d.%m.%Y')
                text += f"{emoji} **{result['exercise_name']}**\n"
                text += f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç: **{result['result_value']} {result['result_unit']}**\n"
                
                if result['test_type'] == 'strength' and result['test_weight']:
                    text += f"üìù –¢–µ—Å—Ç: {result['test_weight']}–∫–≥ √ó {result['test_reps']} —Ä–∞–∑\n"
                
                text += f"üìÖ {date}\n\n"
        else:
            text = "üìä **–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤**\n\n" \
                   "–ü—Ä–æ–π–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞!"
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üî¨ –ù–æ–≤—ã–π —Ç–µ—Å—Ç", callback_data="new_test_menu")
        keyboard.button(text="üîô –ö —Ç–µ—Å—Ç–∞–º", callback_data="tests_menu")
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await callback.answer()

async def test_progress(callback: CallbackQuery):
    """–ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ—Å—Ç–æ–≤ (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"""
    keyboard = get_coming_soon_keyboard()
    
    await callback.message.edit_text(
        f"üöß **–ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ—Å—Ç–æ–≤**\n\n"
        f"–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        f"–°–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞!",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

async def test_records(callback: CallbackQuery):
    """–†–µ–∫–æ—Ä–¥—ã (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"""
    keyboard = get_coming_soon_keyboard()
    
    await callback.message.edit_text(
        f"üöß **–†–µ–∫–æ—Ä–¥—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è**\n\n"
        f"–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        f"–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤!",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
def get_test_type_name(test_type: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞"""
    return {
        'strength': 'üèãÔ∏è –°–∏–ª–æ–≤–æ–π —Ç–µ—Å—Ç',
        'endurance': '‚è±Ô∏è –¢–µ—Å—Ç –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏',
        'speed': 'üèÉ –°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π —Ç–µ—Å—Ç', 
        'quantity': 'üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç'
    }.get(test_type, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç')

def get_test_instructions(test_type: str) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞"""
    instructions = {
        'strength': {
            'text': '–í—ã–ø–æ–ª–Ω–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –≤–µ—Å–æ–º –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π.',
            'format': '`–≤–µ—Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è`',
            'examples': '‚Ä¢ `80 5` (80 –∫–≥ –Ω–∞ 5 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π)\n‚Ä¢ `100 1` (100 –∫–≥ –Ω–∞ 1 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ)'
        },
        'endurance': {
            'text': '–í—ã–ø–æ–ª–Ω—è–π—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ª–≥–æ. –í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.',
            'format': '`—Å–µ–∫—É–Ω–¥—ã`',
            'examples': '‚Ä¢ `90` (90 —Å–µ–∫—É–Ω–¥)\n‚Ä¢ `120` (2 –º–∏–Ω—É—Ç—ã)'
        },
        'speed': {
            'text': '–ü—Ä–æ–π–¥–∏—Ç–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ. –£–∫–∞–∂–∏—Ç–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –∏ –≤—Ä–µ–º—è.',
            'format': '`–¥–∏—Å—Ç–∞–Ω—Ü–∏—è_–º –≤—Ä–µ–º—è_—Å–µ–∫`',
            'examples': '‚Ä¢ `100 15.2` (100–º –∑–∞ 15.2 —Å–µ–∫)\n‚Ä¢ `30 4.5` (30–º –∑–∞ 4.5 —Å–µ–∫)'
        },
        'quantity': {
            'text': '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –±–µ–∑ –æ—Ç–¥—ã—Ö–∞.',
            'format': '`–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ`',
            'examples': '‚Ä¢ `45` (45 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π)\n‚Ä¢ `100` (100 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π)'
        }
    }
    
    return instructions.get(test_type, {
        'text': '–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ—Å—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –æ–ø–∏—Å–∞–Ω–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.',
        'format': '–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
        'examples': '–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º'
    })

def calculate_one_rm(weight: float, reps: int) -> dict:
    """–†–∞—Å—á–µ—Ç 1–ü–ú –ø–æ —Ç—Ä–µ–º —Ñ–æ—Ä–º—É–ª–∞–º"""
    w = float(weight)
    r = int(reps)
    
    if r == 1:
        return {
            'brzycki': w,
            'epley': w,
            'alternative': w,
            'average': w
        }
    
    # –§–æ—Ä–º—É–ª–∞ –ë–∂–∏—Ü–∫–æ–≥–æ
    brzycki = w / (1.0278 - 0.0278 * r)
    
    # –§–æ—Ä–º—É–ª–∞ –≠–ø–ª–∏
    epley = w * (1 + r / 30.0)
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞
    alternative = w * (1 + 0.025 * r)
    
    # –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    average = (brzycki + epley + alternative) / 3.0
    
    return {
        'brzycki': round(brzycki, 1),
        'epley': round(epley, 1), 
        'alternative': round(alternative, 1),
        'average': round(average, 1)
    }

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô =====
async def process_test_text_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    current_state = await state.get_state()
    
    if current_state == "waiting_strength_test_data":
        await process_strength_test_data(message, state)
    elif current_state == "waiting_endurance_test_data":
        await process_endurance_test_data(message, state)
    elif current_state == "waiting_speed_test_data":
        await process_speed_test_data(message, state)
    elif current_state == "waiting_quantity_test_data":
        await process_quantity_test_data(message, state)

async def get_user_test_result_for_workout(user_id: int, exercise_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ"""
    try:
        async with db_manager.pool.acquire() as conn:
            result = await conn.fetchrow("""
                SELECT result_value, result_unit, test_type
                FROM user_tests 
                WHERE user_id = $1 AND exercise_id = $2 
                ORDER BY tested_at DESC LIMIT 1
            """, user_id, exercise_id)
        
        return dict(result) if result else None
    except Exception:
        return None

__all__ = [
    'register_test_handlers',
    'process_test_text_input',
    'get_user_test_result_for_workout'
]