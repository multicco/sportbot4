# handlers/workouts.py
# UTF-8 version ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
import logging
from typing import Optional, List, Dict
from datetime import datetime

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database import db_manager
from states.workout_states import CreateWorkoutStates

logger = logging.getLogger(__name__)

workouts_router = Router()

# -----------------------
# Utilities
# -----------------------
def parse_callback_id(callback_data: str, expected_prefix: str = None) -> int:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ ID –∏–∑ callback_data"""
    try:
        if expected_prefix and callback_data.startswith(expected_prefix):
            return int(callback_data.replace(expected_prefix, ""))

        parts = callback_data.split("_")
        if len(parts) < 2:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback_data}")

        return int(parts[-1])

    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data '{callback_data}': {e}")
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑ callback_data: {callback_data}")

# -----------------------
# –ú–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
# -----------------------
@workouts_router.callback_query(F.data == "workouts_menu")
async def workouts_menu(callback: CallbackQuery):
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üèãÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="my_workouts")
    keyboard.button(text="üîç –ù–∞–π—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="find_workout")
    keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="create_workout")
    keyboard.button(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="workout_statistics")
    keyboard.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    keyboard.adjust(2)

    await callback.message.edit_text(
        "üèãÔ∏è **–ú–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

# -----------------------
# –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
# -----------------------
@workouts_router.callback_query(F.data == "my_workouts")
async def my_workouts(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∞–∫—Ç–∏–≤–Ω—ã—Ö)"""
    try:
        user = await db_manager.get_user_by_telegram_id(callback.from_user.id)

        async with db_manager.pool.acquire() as conn:
            workouts = await conn.fetch("""
                SELECT w.*, COUNT(we.id) as exercise_count
                FROM workouts w
                LEFT JOIN workout_exercises we ON w.id = we.workout_id
                WHERE w.created_by = $1 AND w.is_active = true
                GROUP BY w.id
                ORDER BY w.created_at DESC
                LIMIT 10
            """, user['id'])

        if workouts:
            text = f"üèãÔ∏è **–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ({len(workouts)}):**\n\n"
            keyboard = InlineKeyboardBuilder()

            for workout in workouts:
                exercise_count = workout['exercise_count'] or 0
                duration = workout.get('estimated_duration_minutes') or 0

                button_text = f"üèãÔ∏è {workout['name']}"
                if exercise_count > 0:
                    button_text += f" ({exercise_count} —É–ø—Ä.)"

                keyboard.button(
                    text=button_text,
                    callback_data=f"view_workout_{workout['id']}"
                )

                text += f"**{workout['name']}**\n"
                text += f"üìã –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {exercise_count} | ‚è± ~{duration} –º–∏–Ω\n"
                text += f"üí° –ö–æ–¥: `{workout['unique_id']}`\n\n"

            keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é", callback_data="create_workout")
            keyboard.button(text="üîô –ö —Ç—Ä–µ–Ω–∏–Ω–≥–∞–º", callback_data="workouts_menu")
            keyboard.adjust(1)

        else:
            text = ("üèãÔ∏è **–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏**\n\n"
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n\n"
                    "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å –±–ª–æ—á–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π!")
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é", callback_data="create_workout")
            keyboard.button(text="üîô –ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º", callback_data="workouts_menu")

        await callback.message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
        await callback.answer()

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ my_workouts: %s", e)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.", show_alert=True)

# -----------------------
# –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
# -----------------------
@workouts_router.callback_query(F.data.startswith("view_workout_"))
async def view_workout_details(callback: CallbackQuery):
    try:
        workout_id = parse_callback_id(callback.data, "view_workout_")

        logger.info("–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ID: %s", workout_id)

        async with db_manager.pool.acquire() as conn:
            workout = await conn.fetchrow("""
                SELECT w.*, u.first_name as creator_name, u.last_name as creator_lastname
                FROM workouts w
                LEFT JOIN users u ON w.created_by = u.id  
                WHERE w.id = $1 AND w.is_active = true
            """, workout_id)

            if not workout:
                await callback.answer("‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return

            exercises = await conn.fetch("""
                SELECT we.*, e.name as exercise_name, e.muscle_group, e.category, we.order_in_phase
                FROM workout_exercises we
                JOIN exercises e ON we.exercise_id = e.id
                WHERE we.workout_id = $1
                ORDER BY 
                    CASE we.phase 
                        WHEN 'warmup' THEN 1
                        WHEN 'nervous_prep' THEN 2
                        WHEN 'main' THEN 3
                        WHEN 'cooldown' THEN 4
                        ELSE 5
                    END,
                    we.order_in_phase
            """, workout_id)

        creator_name = workout.get('creator_name') or ''
        if workout.get('creator_lastname'):
            creator_name = f"{creator_name} {workout.get('creator_lastname')}"

        text = f"üèãÔ∏è **{workout['name']}**\n\n"
        if workout.get('description'):
            text += f"üìù _{workout['description']}_\n\n"

        text += f"üë§ **–ê–≤—Ç–æ—Ä:** {creator_name or '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n"
        text += f"‚è± **–í—Ä–µ–º—è:** ~{workout.get('estimated_duration_minutes') or 0} –º–∏–Ω\n"
        text += f"‚öôÔ∏è **–°–ª–æ–∂–Ω–æ—Å—Ç—å:** {str(workout.get('difficulty_level') or '').title()}\n"
        text += f"üè∑ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {str(workout.get('category') or 'general').title()}\n"
        text += f"üí° **–ö–æ–¥:** `{workout.get('unique_id')}`\n"
        text += f"üîí **–í–∏–¥–∏–º–æ—Å—Ç—å:** {workout.get('visibility')}\n\n"

        if exercises:
            phase_names = {
                'warmup': 'üî• –†–∞–∑–º–∏–Ω–∫–∞',
                'nervous_prep': '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ù–°',
                'main': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å',
                'cooldown': 'üßò –ó–∞–º–∏–Ω–∫–∞'
            }

            current_phase = None
            exercise_count = 0

            for exercise in exercises:
                if exercise['phase'] != current_phase:
                    current_phase = exercise['phase']
                    phase_display = phase_names.get(current_phase, current_phase.title())
                    text += f"\n**{phase_display}:**\n"

                exercise_count += 1

                if exercise['reps_min'] == exercise['reps_max']:
                    reps_text = f"{exercise['reps_min']}"
                else:
                    reps_text = f"{exercise['reps_min']}-{exercise['reps_max']}"

                text += f"‚Ä¢ **{exercise['exercise_name']}**\n"
                text += f"  üîÅ {exercise['sets']} –ø–æ–¥—Ö–æ–¥–æ–≤ √ó {reps_text} –ø–æ–≤—Ç."

                if exercise.get('one_rm_percent'):
                    text += f" ({exercise['one_rm_percent']}% 1–ü–ú)"

                rest_seconds = exercise.get('rest_seconds') or 0
                if rest_seconds > 0:
                    rest_min = rest_seconds // 60
                    rest_sec = rest_seconds % 60
                    if rest_min > 0:
                        if rest_sec > 0:
                            text += f" | –û—Ç–¥—ã—Ö: {rest_min} –º–∏–Ω {rest_sec} —Å"
                        else:
                            text += f" | –û—Ç–¥—ã—Ö: {rest_min} –º–∏–Ω"
                    else:
                        text += f" | –û—Ç–¥—ã—Ö: {rest_sec} —Å"

                text += f"\n  üß† {exercise.get('muscle_group', '-') } | {exercise.get('category', '-')}\n"

                if exercise.get('notes'):
                    text += f"  üìù _{exercise['notes']}_\n"

                text += "\n"

            text += f"‚úÖ **–í—Å–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:** {exercise_count}\n"
        else:
            text += "‚ö†Ô∏è –í —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.\n"

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data=f"start_workout_{workout_id}")
        keyboard.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"workout_stats_{workout_id}")
        keyboard.button(text="üîó –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥", callback_data=f"copy_workout_code_{workout_id}")
        keyboard.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_workout_{workout_id}")
        keyboard.button(text="üîô –í —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="workouts_menu")
        keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        keyboard.adjust(2, 2)

        await callback.message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
        await callback.answer()

    except ValueError as e:
        logger.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ID —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: %s", e)
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID", show_alert=True)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ view_workout_details: %s", e)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", show_alert=True)

# -----------------------
# –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
# -----------------------
@workouts_router.callback_query(F.data == "create_workout")
async def start_create_workout(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üèãÔ∏è **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏**\n\n"
        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞: —Ä–∞–∑–º–∏–Ω–∫–∞ / –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ù–° / –æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å / –∑–∞–º–∏–Ω–∫–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n_–ü—Ä–∏–º–µ—Ä: \"–°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤–µ—Ä—Ö–∞\"_",
        parse_mode="Markdown"
    )
    await state.set_state(CreateWorkoutStates.waiting_workout_name)
    await callback.answer()

@workouts_router.callback_query(F.data == "skip_workout_description")
async def skip_description(callback: CallbackQuery, state: FSMContext):
    await state.update_data(description="")
    await show_block_selection_menu(callback.message, state)
    await callback.answer()

# show_block_selection_menu and other block helpers kept from old file:
async def show_block_selection_menu(message: Message, state: FSMContext):
    data = await state.get_data()
    selected_blocks = data.get('selected_blocks', {})

    text = f"üîß **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {data.get('name','–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}**\n\n"
    text += "üìã **–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫–∏ –¥–ª—è –≤–∞—à–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:**\n\n"

    blocks = {
        'warmup': 'üî• –†–∞–∑–º–∏–Ω–∫–∞',
        'nervous_prep': '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã',
        'main': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å',
        'cooldown': 'üßò –ó–∞–º–∏–Ω–∫–∞'
    }

    for block_key, block_name in blocks.items():
        status = "‚úÖ" if block_key in selected_blocks else "‚≠ï"
        text += f"{status} **{block_name}**"
        if block_key in selected_blocks:
            exercises_count = len(selected_blocks[block_key].get('exercises', []))
            text += f" ({exercises_count} —É–ø—Ä.)"
            if selected_blocks[block_key].get('description'):
                text += f"\n _{selected_blocks[block_key]['description'][:50]}..._"
        text += "\n\n"

    keyboard = InlineKeyboardBuilder()

    for block_key, block_name in blocks.items():
        action = "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å" if block_key in selected_blocks else "‚ûï –î–æ–±–∞–≤–∏—Ç—å"
        # keep callback consistent
        keyboard.button(text=f"{action} {block_name.split(' ',1)[1]}", callback_data=f"select_block_{block_key}")

    if selected_blocks:
        keyboard.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="finish_workout_creation")

    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_workout_creation")
    keyboard.adjust(2)

    try:
        await message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
    except Exception:
        await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")

    await state.set_state(CreateWorkoutStates.selecting_blocks)

@workouts_router.callback_query(F.data.startswith("select_block_"))
async def select_workout_block(callback: CallbackQuery, state: FSMContext):
    block_key = callback.data.split("_", 2)[2]
    block_info = {
        'warmup': {
            'name': 'üî• –†–∞–∑–º–∏–Ω–∫–∞',
            'description': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–ª–∞ –∫ –Ω–∞–≥—Ä—É–∑–∫–µ, —Ä–∞–∑–æ–≥—Ä–µ–≤ –º—ã—à—Ü –∏ —Å—É—Å—Ç–∞–≤–æ–≤',
            'examples': '–õ—ë–≥–∫–æ–µ –∫–∞—Ä–¥–∏–æ, –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞, —Å—É—Å—Ç–∞–≤–Ω–∞—è –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞'
        },
        'nervous_prep': {
            'name': '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã',
            'description': '–ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π',
            'examples': '–í–∑—Ä—ã–≤–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è, –∞–∫—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –ø–ª–∏–æ–º–µ—Ç—Ä–∏–∫–∞'
        },
        'main': {
            'name': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å',
            'description': '–ì–ª–∞–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞',
            'examples': '–û—Å–Ω–æ–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, —Å–∏–ª–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞'
        },
        'cooldown': {
            'name': 'üßò –ó–∞–º–∏–Ω–∫–∞',
            'description': '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
            'examples': '–°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞, –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è'
        }
    }

    info = block_info.get(block_key)
    if not info:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –±–ª–æ–∫", show_alert=True)
        return

    await state.update_data(current_block=block_key)

    text = f"üìã **{info['name']}**\n\n"
    text += f"**–û–ø–∏—Å–∞–Ω–∏–µ:**\n{info['description']}\n\n"
    text += f"**–ü—Ä–∏–º–µ—Ä—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:**\n{info['examples']}\n\n"
    text += f"**–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º –±–ª–æ–∫–æ–º?**"

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìù –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–∫–∞", callback_data="add_block_description")
    keyboard.button(text="‚è≠Ô∏è –°—Ä–∞–∑—É –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º", callback_data="searchexerciseforblock")
    keyboard.button(text="üóëÔ∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –±–ª–æ–∫", callback_data="skip_entire_block")
    keyboard.button(text="üîô –ö –≤—ã–±–æ—Ä—É –±–ª–æ–∫–æ–≤", callback_data="back_to_blocks")
    keyboard.adjust(1)

    await callback.message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
    await callback.answer()

@workouts_router.callback_query(F.data == "add_block_description")
async def add_block_description(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    block_key = data.get('current_block')
    block_names = {
        'warmup': 'üî• –†–∞–∑–º–∏–Ω–∫–∞',
        'nervous_prep': '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã',
        'main': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å',
        'cooldown': 'üßò –ó–∞–º–∏–Ω–∫–∞'
    }

    await callback.message.edit_text(
        f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–∫–∞: {block_names.get(block_key,'–ë–ª–æ–∫')}**\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞:\n"
        f"_–ù–∞–ø—Ä–∏–º–µ—Ä: \"10 –º–∏–Ω—É—Ç –ª—ë–≥–∫–æ–≥–æ –∫–∞—Ä–¥–∏–æ + —Å—É—Å—Ç–∞–≤–Ω–∞—è —Ä–∞–∑–º–∏–Ω–∫–∞\"_",
        parse_mode="Markdown"
    )
    await state.set_state(CreateWorkoutStates.adding_block_description)
    await callback.answer()

@workouts_router.callback_query(F.data == "skip_entire_block")
async def skip_entire_block(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_block = data.get('current_block')
    if not current_block:
        await callback.answer("‚ùå –ë–ª–æ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω", show_alert=True)
        return
    selected_blocks = data.get('selected_blocks', {})
    if current_block in selected_blocks:
        del selected_blocks[current_block]
    await state.update_data(selected_blocks=selected_blocks)
    await show_block_selection_menu(callback.message, state)
    await callback.answer()

@workouts_router.callback_query(F.data == "back_to_blocks")
async def back_to_blocks(callback: CallbackQuery, state: FSMContext):
    await show_block_selection_menu(callback.message, state)
    await callback.answer()

# -----------------------
# –ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π / –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ / –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
# -----------------------
@workouts_router.callback_query(F.data == "searchexerciseforblock")
async def searchexerciseforblock(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üîç **–ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –±–ª–æ–∫–∞**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n_–ù–∞–ø—Ä–∏–º–µ—Ä: –∂–∏–º, –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è, –ø–ª–∞–Ω–∫–∞_",
        parse_mode="Markdown"
    )
    await state.set_state("searching_exercise_for_block")
    await callback.answer()

@workouts_router.message(F.text)
async def handleblockexercisesearch(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state != "searching_exercise_for_block":
        return

    search_term = message.text.strip().lower()
    try:
        async with db_manager.pool.acquire() as conn:
            exercises = await conn.fetch(
                """
                SELECT id, name, category, muscle_group
                FROM exercises
                WHERE LOWER(name) LIKE $1 OR LOWER(category) LIKE $1 OR LOWER(muscle_group) LIKE $1
                ORDER BY name
                LIMIT 10
                """,
                f"%{search_term}%"
            )

        if not exercises:
            await message.answer(f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.clear()
            return

        keyboard = InlineKeyboardBuilder()
        for ex in exercises:
            category = ex['category'] or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            keyboard.button(
                text=f"üí™ {ex['name']} ({category})",
                callback_data=f"add_block_ex_{ex['id']}"
            )

        keyboard.button(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="searchexerciseforblock")
        keyboard.button(text="üîô –ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º –±–ª–æ–∫–∞", callback_data="back_to_block_exercises")
        keyboard.adjust(1)

        await message.answer(
            f"üîç **–ù–∞–π–¥–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {len(exercises)}**",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        await state.set_state("searching_exercise_for_block")

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: %s", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.")
        await state.clear()

@workouts_router.callback_query(F.data == "browsecategoriesforblock")
async def browsecategoriesforblock(callback: CallbackQuery):
    try:
        async with db_manager.pool.acquire() as conn:
            categories = await conn.fetch("SELECT DISTINCT category FROM exercises ORDER BY category")

        if not categories:
            await callback.message.edit_text("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            await callback.answer()
            return

        keyboard = InlineKeyboardBuilder()
        for cat in categories:
            name = cat['category'] or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            keyboard.button(text=f"üìÇ {name}", callback_data=f"block_cat_{name}")
        keyboard.button(text="üîô –ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º –±–ª–æ–∫–∞", callback_data="back_to_block_exercises")
        keyboard.adjust(2)

        await callback.message.edit_text("üìÇ **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:**", reply_markup=keyboard.as_markup(), parse_mode="Markdown")
        await callback.answer()

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: %s", e)
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        await callback.answer()

@workouts_router.callback_query(F.data.startswith("block_cat_"))
async def showblockcategoryexercises(callback: CallbackQuery):
    category = callback.data[10:]
    try:
        async with db_manager.pool.acquire() as conn:
            exercises = await conn.fetch(
                "SELECT id, name, muscle_group FROM exercises WHERE category = $1 ORDER BY name",
                category
            )

        if not exercises:
            await callback.message.edit_text(f"‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            await callback.answer()
            return

        keyboard = InlineKeyboardBuilder()
        for ex in exercises:
            mg = ex["muscle_group"] or "-"
            keyboard.button(text=f"{ex['name']} ({mg})", callback_data=f"add_block_ex_{ex['id']}")
        keyboard.button(text="üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="browsecategoriesforblock")
        keyboard.adjust(1)

        await callback.message.edit_text(f"üìÇ **{category} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:**", reply_markup=keyboard.as_markup(), parse_mode="Markdown")
        await callback.answer()

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: %s", e)
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.")
        await callback.answer()

@workouts_router.callback_query(F.data.startswith("add_block_ex_"))
async def add_block_exercise(callback: CallbackQuery, state: FSMContext):
    try:
        ex_id = int(callback.data.split("_")[-1])

        async with db_manager.pool.acquire() as conn:
            exercise = await conn.fetchrow("SELECT name FROM exercises WHERE id = $1", ex_id)

        if not exercise:
            await callback.answer("‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return

        data = await state.get_data()
        current_block = data.get("current_block", "main")

        selected_blocks = data.get("selected_blocks", {})
        selected_blocks.setdefault(current_block, {"description": "", "exercises": []})
        selected_blocks[current_block]["exercises"].append({
            "id": ex_id,
            "name": exercise["name"],
            "sets": 3,
            "reps_min": 8,
            "reps_max": 12,
            "one_rm_percent": None,
            "rest_seconds": 90
        })

        await state.update_data(selected_blocks=selected_blocks)
        await callback.message.edit_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: *{exercise['name']}*", parse_mode="Markdown")
        await callback.answer()

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: %s", e)
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.")
        await callback.answer()

# -----------------------
# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
# -----------------------
@workouts_router.callback_query(F.data == "finish_workout_creation")
async def finish_workout_creation(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    selected_blocks = data.get('selected_blocks', {})

    try:
        total_exercises = sum(len(block_data.get('exercises', [])) for block_data in selected_blocks.values())

        if total_exercises == 0:
            await callback.answer("‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ!")
            return

        async with db_manager.pool.acquire() as conn:
            workout_id = await conn.fetchval("""
                INSERT INTO workouts (name, description, created_by, visibility, difficulty_level, estimated_duration_minutes)
                VALUES ($1, $2, $3, 'private', 'intermediate', $4)
                RETURNING id
            """, data['name'], data.get('description', ''), user['id'], total_exercises * 8)

            workout_unique_id = await conn.fetchval("SELECT unique_id FROM workouts WHERE id = $1", workout_id)

            order_in_phase = 0
            for phase, block_data in selected_blocks.items():
                for exercise in block_data.get('exercises', []):
                    order_in_phase += 1
                    await conn.execute("""
                        INSERT INTO workout_exercises (
                            workout_id, exercise_id, phase, order_in_phase, sets,   
                            reps_min, reps_max, one_rm_percent, rest_seconds
                        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
                    """, workout_id, exercise['id'], phase, order_in_phase, exercise['sets'],
                         exercise['reps_min'], exercise['reps_max'],
                         exercise['one_rm_percent'], exercise['rest_seconds'])

        text = f"üéâ **–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n"
        text += f"üèãÔ∏è **–ù–∞–∑–≤–∞–Ω–∏–µ:** {data['name']}\n"
        text += f"üí° **–ö–æ–¥:** `{workout_unique_id}`\n"
        text += f"üìã **–í—Å–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:** {total_exercises}\n\n"

        block_names = {
            'warmup': 'üî• –†–∞–∑–º–∏–Ω–∫–∞',
            'nervous_prep': '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ù–°',
            'main': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å',
            'cooldown': 'üßò –ó–∞–º–∏–Ω–∫–∞'
        }

        for phase, block_data in selected_blocks.items():
            if block_data.get('exercises'):
                text += f"**{block_names.get(phase, phase)}:** {len(block_data['exercises'])} —É–ø—Ä.\n"
                if block_data.get('description'):
                    text += f" _{block_data['description']}_\n"

        text += f"\nüí° **–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–¥–æ–º** `{workout_unique_id}` —Å –¥—Ä—É–≥–∏–º–∏!"

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üèãÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="my_workouts")
        keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â—ë", callback_data="create_workout")
        keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        keyboard.adjust(2)

        await callback.message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
        await state.clear()

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: %s", e)
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    await callback.answer()

@workouts_router.callback_query(F.data == "cancel_workout_creation")
async def cancel_workout_creation(callback: CallbackQuery, state: FSMContext):
    await state.clear()

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üèãÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="my_workouts")
    keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é", callback_data="create_workout")
    keyboard.button(text="üîô –ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º", callback_data="workouts_menu")
    keyboard.adjust(2)

    await callback.message.edit_text(
        "‚ùå **–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n\n–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

# -----------------------
# Start workout (and finish -> save RPE/weight)
# -----------------------
@workouts_router.callback_query(F.data.startswith("start_workout_"))
async def start_workout_session(callback: CallbackQuery):
    try:
        workout_id = parse_callback_id(callback.data, "start_workout_")

        async with db_manager.pool.acquire() as conn:
            workout = await conn.fetchrow("SELECT name, unique_id FROM workouts WHERE id = $1", workout_id)

        if workout:
            text = f"‚ñ∂Ô∏è **–ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!**\n\n"
            text += f"üèãÔ∏è **{workout['name']}**\n"
            text += f"üí° –ö–æ–¥: `{workout['unique_id']}`\n\n"
            text += "–§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n\n"
            text += "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ó–∞–≤–µ—Ä—à–∏–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É¬ª, —á—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å RPE –∏ —É–∫–∞–∑–∞—Ç—å –≤–µ—Å."

            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data=f"finish_workout_{workout_id}")
            keyboard.button(text="üìã –î–µ—Ç–∞–ª–∏", callback_data=f"view_workout_{workout_id}")
            keyboard.button(text="üèãÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="my_workouts")
            keyboard.adjust(1)

            await callback.message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
        else:
            await callback.answer("‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)

    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.", show_alert=True)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ start_workout_session: %s", e)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.", show_alert=True)

@workouts_router.callback_query(F.data.startswith("finish_workout_"))
async def finish_workout(callback: CallbackQuery, state: FSMContext):
    try:
        workout_id = parse_callback_id(callback.data, "finish_workout_")
        await state.update_data(finishing_workout_id=workout_id)
        await callback.message.edit_text("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ –æ—â—É—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ —à–∫–∞–ª–µ 1-10 (–≥–¥–µ 10 ‚Äî –æ—á–µ–Ω—å —Ç—è–∂–µ–ª–æ):")
        await state.set_state("waiting_rpe")
        await callback.answer()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ finish_workout: %s", e)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞.", show_alert=True)

# -----------------------
# Process RPE and optional weight
# -----------------------
async def _try_insert_result(workout_id: int, user_id: int, rpe: int, weight: Optional[float]):
    try:
        async with db_manager.pool.acquire() as conn:
            # –ü–æ–ø—ã—Ç–∫–∞ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ workout_results; –µ—Å–ª–∏ —Ç–∞–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç ‚Äî –±—É–¥–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            await conn.execute("""
                INSERT INTO workout_results (workout_id, user_id, rpe, weight, created_at)
                VALUES ($1, $2, $3, $4, $5)
            """, workout_id, user_id, rpe, weight, datetime.utcnow())
        return True
    except Exception as e:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ workout_results: %s", e)
        return False

# -----------------------
# Feature replacements: find_workout, workout_statistics, edit_workout
# -----------------------
@workouts_router.callback_query(F.data == "find_workout")
async def start_find_workout(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üîé –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–ø–æ–∫–∞–∂–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ + –≤–∞—à–∏):")
    await state.set_state("finding_workout_name")
    await callback.answer()

@workouts_router.callback_query(F.data == "workout_statistics")
async def show_workout_statistics(callback: CallbackQuery):
    try:
        user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
        async with db_manager.pool.acquire() as conn:
            total_workouts = await conn.fetchval("SELECT COUNT(*) FROM workouts WHERE created_by = $1", user['id'])
            total_public = await conn.fetchval("SELECT COUNT(*) FROM workouts WHERE visibility = 'public'")
            total_exercises = await conn.fetchval("""
                SELECT COUNT(*) FROM workout_exercises we
                JOIN workouts w ON we.workout_id = w.id
                WHERE w.created_by = $1
            """, user['id'])

        text = f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
        text += f"üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å–æ–∑–¥–∞–Ω–æ: {total_workouts}\n"
        text += f"üåê –ü—É–±–ª–∏—á–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {total_public}\n"
        text += f"üìã –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤—Å–µ–≥–æ –≤ –≤–∞—à–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö: {total_exercises}\n"
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üèãÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="my_workouts")
        keyboard.button(text="üîô –í –º–µ–Ω—é", callback_data="workouts_menu")
        keyboard.adjust(1)

        await callback.message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
        await callback.answer()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %s", e)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

@workouts_router.callback_query(F.data.startswith("edit_workout_"))
async def edit_workout(callback: CallbackQuery, state: FSMContext):
    try:
        workout_id = parse_callback_id(callback.data, "edit_workout_")
        async with db_manager.pool.acquire() as conn:
            workout = await conn.fetchrow("SELECT id, name, description, created_by FROM workouts WHERE id = $1", workout_id)

        if not workout:
            await callback.answer("‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
        if workout['created_by'] != user['id']:
            await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", show_alert=True)
            return

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"rename_workout_{workout_id}")
        keyboard.button(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"change_desc_workout_{workout_id}")
        keyboard.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data=f"delete_workout_{workout_id}")
        keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"view_workout_{workout_id}")
        keyboard.adjust(1)

        await callback.message.edit_text(
            f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:** {workout['name']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        await callback.answer()

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ edit_workout: %s", e)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

@workouts_router.callback_query(F.data.startswith("rename_workout_"))
async def rename_workout(callback: CallbackQuery, state: FSMContext):
    try:
        workout_id = parse_callback_id(callback.data, "rename_workout_")
        await state.update_data(editing_workout_id=workout_id)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
        await state.set_state("renaming_workout")
        await callback.answer()
    except Exception as e:
        logger.exception("rename_workout error: %s", e)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

@workouts_router.callback_query(F.data.startswith("change_desc_workout_"))
async def change_workout_desc(callback: CallbackQuery, state: FSMContext):
    try:
        workout_id = parse_callback_id(callback.data, "change_desc_workout_")
        await state.update_data(editing_workout_id=workout_id)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
        await state.set_state("changing_workout_description")
        await callback.answer()
    except Exception as e:
        logger.exception("change_workout_desc error: %s", e)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

@workouts_router.callback_query(F.data.startswith("delete_workout_"))
async def delete_workout(callback: CallbackQuery):
    try:
        workout_id = parse_callback_id(callback.data, "delete_workout_")
        async with db_manager.pool.acquire() as conn:
            await conn.execute("UPDATE workouts SET is_active = false WHERE id = $1", workout_id)
        await callback.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)
        await callback.message.edit_text("‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
    except Exception as e:
        logger.exception("delete_workout error: %s", e)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

# -----------------------
# Find workout by name (text flow)
# -----------------------
@workouts_router.message(F.text)
async def generic_text_handler(message: Message, state: FSMContext):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π:
    - —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (name/description)
    - –ø–æ–∏—Å–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (finding_workout_name)
    - renaming/changing description
    - waiting_rpe / waiting_weight
    """
    current_state = await state.get_state()

    # -- —Å–æ–∑–¥–∞–Ω–∏–µ --
    if current_state == CreateWorkoutStates.waiting_workout_name.state:
        await process_workout_name(message, state)
        return
    if current_state == CreateWorkoutStates.waiting_workout_description.state:
        await process_workout_description(message, state)
        return

    # -- –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–ø—É–±–ª–∏—á–Ω—ã–µ + —Å–≤–æ–∏) --
    if current_state == "finding_workout_name":
        query = message.text.strip().lower()
        try:
            user = await db_manager.get_user_by_telegram_id(message.from_user.id)
            async with db_manager.pool.acquire() as conn:
                results = await conn.fetch(
                    """
                    SELECT id, name, description, unique_id, visibility
                    FROM workouts
                    WHERE (visibility = 'public' OR created_by = $2)
                      AND LOWER(name) LIKE $1
                    ORDER BY created_at DESC
                    LIMIT 12
                    """, f"%{query}%", user['id']
                )

            if not results:
                await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                await state.clear()
                return

            text = "üîé **–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:**\n\n"
            keyboard = InlineKeyboardBuilder()
            for w in results:
                text += f"üè∑ **{w['name']}** ‚Äî `{w['unique_id']}` ({w['visibility']})\n"
                if w.get('description'):
                    text += f"_{w['description']}_\n"
                keyboard.button(text=f"{w['name']}", callback_data=f"view_workout_{w['id']}")

            keyboard.button(text="üîô –í –º–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", callback_data="workouts_menu")
            keyboard.adjust(1)
            await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
            await state.clear()
            return
        except Exception as e:
            logger.exception("find_workout error: %s", e)
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞.")
            await state.clear()
            return

    # -- renaming
    if current_state == "renaming_workout":
        data = await state.get_data()
        workout_id = data.get('editing_workout_id')
        new_name = message.text.strip()
        if not workout_id:
            await message.answer("‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ç–µ—Ä—è–Ω.")
            await state.clear()
            return
        if len(new_name) < 3:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω 3 —Å–∏–º–≤–æ–ª–∞).")
            return
        try:
            async with db_manager.pool.acquire() as conn:
                await conn.execute("UPDATE workouts SET name = $1 WHERE id = $2", new_name, workout_id)
            await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
            await state.clear()
            # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await message.answer(f"–û—Ç–∫—Ä–æ–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É: /view {workout_id} (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –≤ –º–µ–Ω—é)")
        except Exception as e:
            logger.exception("rename_workout db error: %s", e)
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
            await state.clear()
        return

    # -- change description
    if current_state == "changing_workout_description":
        data = await state.get_data()
        workout_id = data.get('editing_workout_id')
        new_desc = message.text.strip()
        if not workout_id:
            await message.answer("‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ç–µ—Ä—è–Ω.")
            await state.clear()
            return
        try:
            async with db_manager.pool.acquire() as conn:
                await conn.execute("UPDATE workouts SET description = $1 WHERE id = $2", new_desc, workout_id)
            await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
            await state.clear()
        except Exception as e:
            logger.exception("change description db error: %s", e)
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
            await state.clear()
        return

    # -- waiting for RPE
    if current_state == "waiting_rpe":
        try:
            rpe_val = int(message.text.strip())
            if rpe_val < 1 or rpe_val > 10:
                await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
                return
            data = await state.get_data()
            workout_id = data.get('finishing_workout_id')
            await state.update_data(last_rpe=rpe_val)
            # ask for weight
            await message.answer("üì¶ –£–∫–∞–∂–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—â–∏–π –≤–µ—Å (–∫–≥) –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")
            await state.set_state("waiting_weight")
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
        return

    # -- waiting for weight
    if current_state == "waiting_weight":
        data = await state.get_data()
        workout_id = data.get('finishing_workout_id')
        rpe_val = data.get('last_rpe')
        txt = message.text.strip().lower()
        weight_val: Optional[float] = None
        if txt not in ("–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip", "-"):
            try:
                weight_val = float(txt.replace(",", "."))
            except ValueError:
                await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–≤ –∫–≥) –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
                return
        success = await _try_insert_result(workout_id, (await db_manager.get_user_by_telegram_id(message.from_user.id))['id'], rpe_val, weight_val)
        if success:
            await message.answer("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –°–ø–∞—Å–∏–±–æ!")
        else:
            await message.answer("‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É (–≤–æ–∑–º–æ–∂–Ω–æ —Ç–∞–±–ª–∏—Ü–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç). –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–∏–Ω—è—Ç.")
        await state.clear()
        return

# -----------------------
# Utility small processors (used by generic_text_handler)
# -----------------------
async def process_workout_name(message: Message, state: FSMContext):
    workout_name = message.text.strip()
    if len(workout_name) < 3:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
        return
    if len(workout_name) > 100:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    await state.update_data(name=workout_name)
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="skip_workout_description")
    await message.answer(f"‚úÖ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {workout_name}\n\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):", reply_markup=keyboard.as_markup(), parse_mode="Markdown")
    await state.set_state(CreateWorkoutStates.waiting_workout_description)

async def process_workout_description(message: Message, state: FSMContext):
    description = message.text.strip()
    await state.update_data(description=description)
    await show_block_selection_menu(message, state)

# -----------------------
# Copy code
# -----------------------
@workouts_router.callback_query(F.data.startswith("copy_workout_code_"))
async def copy_workout_code(callback: CallbackQuery):
    try:
        workout_id = parse_callback_id(callback.data, "copy_workout_code_")

        async with db_manager.pool.acquire() as conn:
            workout = await conn.fetchrow("SELECT unique_id, name FROM workouts WHERE id = $1", workout_id)

        if workout:
            text = f"üîó **–ö–æ–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!**\n\n"
            text += f"üèãÔ∏è **{workout['name']}**\n"
            text += f"üí° –ö–æ–¥: `{workout['unique_id']}`\n\n"
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data=f"view_workout_{workout_id}")
            keyboard.button(text="üèãÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="my_workouts")
            await callback.message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
            await callback.answer("–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä (–ø–æ–∫–∞–∑—ã–≤–∞—é).")
        else:
            await callback.answer("‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)

    except Exception as e:
        logger.exception("copy_workout_code error: %s", e)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)

# -----------------------
# Feature coming soon handler removed ‚Äî replaced by real implementations
# -----------------------

# -----------------------
# Registration helper
# -----------------------
def register_workout_handlers(dp):
    dp.include_router(workouts_router)
    logger.info("üèãÔ∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

__all__ = [
    'workouts_router',
    'register_workout_handlers',
]
