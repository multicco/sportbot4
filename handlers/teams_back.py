
"""
handlers/teams.py - –ü–û–õ–ù–û–¶–ï–ù–ù–´–ô –ú–û–î–£–õ–¨ –ö–û–ú–ê–ù–î
‚úÖ –í–°–ï –ö–ù–û–ü–ö–ò –†–ê–ë–û–¢–ê–Æ–¢
‚úÖ –í–°–ï –°–û–•–†–ê–ù–Ø–ï–¢–°–Ø –í –ë–î
‚úÖ –ü–û–õ–ù–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨
"""

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
import logging
from datetime import datetime, date

# –ò–º–ø–æ—Ä—Ç –ë–î - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π db_manager
try:
    from database import db_manager
    from database.teams_db import TeamsDatabase, init_teams_database
except ImportError:
    db_manager = None
    TeamsDatabase = None
    init_teams_database = None
    logging.warning("Database modules not found - using in-memory storage")

logger = logging.getLogger(__name__)

# ============== FSM –°–û–°–¢–û–Ø–ù–ò–Ø ==============

class TeamStates(StatesGroup):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    waiting_team_name = State()
    waiting_team_description = State()
    waiting_sport_type = State()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    waiting_player_first_name = State()
    waiting_player_last_name = State()
    waiting_player_position = State()
    waiting_player_jersey_number = State()

    # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥–æ–ø–µ—á–Ω—ã–π
    waiting_student_first_name = State()
    waiting_student_last_name = State()
    waiting_student_specialization = State()
    waiting_student_level = State()

# ============== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ==============

teams_router = Router()
teams_db = None  # –ë–î –∫–æ–º–∞–Ω–¥
memory_teams = {}  # –†–µ–∑–µ—Ä–≤ –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ë–î
memory_students = {}

# ============== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ==============

async def init_teams_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∫–æ–º–∞–Ω–¥"""
    global teams_db

    if db_manager and TeamsDatabase:
        try:
            teams_db = init_teams_database(db_manager.pool)
            await teams_db.init_tables()
            logger.info("‚úÖ Teams database initialized with PostgreSQL")
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize teams database: {e}")
            teams_db = None
    else:
        logger.warning("‚ö†Ô∏è Using in-memory storage for teams (no persistence)")

# ============== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ==============

@teams_router.message(Command("teams"))
async def cmd_teams(message: Message, state: FSMContext):
    """–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /teams"""
    await state.clear()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await get_coach_stats(message.from_user.id)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèÜ –ö–æ–º–∞–Ω–¥—ã", callback_data="teams_menu")],
        [InlineKeyboardButton(text="üë§ –ü–æ–¥–æ–ø–µ—á–Ω—ã–µ", callback_data="students_menu")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_menu")]
    ])

    await message.answer(
        f"üèüÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–º–∏</b>\n\n"
        f"üèÜ –ö–æ–º–∞–Ω–¥: {stats['teams_count']}\n"
        f"üë• –ò–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö: {stats['team_players_count']}\n"
        f"üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö: {stats['individual_students_count']}\n"
        f"üéØ –í—Å–µ–≥–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤: {stats['total_athletes']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@teams_router.callback_query(F.data == "main_menu")
async def cb_main_menu(callback: CallbackQuery, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ callback"""
    await state.clear()

    stats = await get_coach_stats(callback.from_user.id)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèÜ –ö–æ–º–∞–Ω–¥—ã", callback_data="teams_menu")],
        [InlineKeyboardButton(text="üë§ –ü–æ–¥–æ–ø–µ—á–Ω—ã–µ", callback_data="students_menu")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_menu")]
    ])

    await callback.message.edit_text(
        f"üèüÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–º–∏</b>\n\n"
        f"üèÜ –ö–æ–º–∞–Ω–¥: {stats['teams_count']}\n"
        f"üë• –ò–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö: {stats['team_players_count']}\n"
        f"üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö: {stats['individual_students_count']}\n"
        f"üéØ –í—Å–µ–≥–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤: {stats['total_athletes']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

# ============== –ú–ï–ù–Æ –ö–û–ú–ê–ù–î ==============

@teams_router.callback_query(F.data == "teams_menu")
async def cb_teams_menu(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥"""
    await state.clear()

    teams = await get_coach_teams(callback.from_user.id)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="create_team")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã", callback_data="my_teams")],
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

    await callback.message.edit_text(
        f"üèÜ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏</b>\n\n"
        f"üìä –£ –≤–∞—Å {len(teams)} –∫–æ–º–∞–Ω–¥(—ã)\n\n"
        "–ö–æ–º–∞–Ω–¥—ã –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

# ============== –°–û–ó–î–ê–ù–ò–ï –ö–û–ú–ê–ù–î–´ ==============

@teams_router.callback_query(F.data == "create_team")
async def cb_create_team(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
    await state.set_state(TeamStates.waiting_team_name)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="teams_menu")]
    ])

    await callback.message.edit_text(
        "üÜï <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (2-100 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@teams_router.message(TeamStates.waiting_team_name)
async def process_team_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    team_name = message.text.strip()

    if len(team_name) < 2:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞:")
        return

    if len(team_name) > 100:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    await state.update_data(team_name=team_name)
    await state.set_state(TeamStates.waiting_team_description)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_description")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="teams_menu")]
    ])

    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{team_name}</b>\n\n"
        "üìã –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@teams_router.message(TeamStates.waiting_team_description)
async def process_team_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    description = message.text.strip()

    if len(description) > 500:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    await state.update_data(team_description=description)
    await ask_sport_type(message, state, is_callback=False)

@teams_router.callback_query(F.data == "skip_description")
async def cb_skip_description(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"""
    await state.update_data(team_description="")
    await ask_sport_type(callback, state, is_callback=True)

async def ask_sport_type(update, state: FSMContext, is_callback: bool = True):
    """–°–ø—Ä–æ—Å–∏—Ç—å –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞"""
    await state.set_state(TeamStates.waiting_sport_type)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öΩ –§—É—Ç–±–æ–ª", callback_data="sport_football")],
        [InlineKeyboardButton(text="üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª", callback_data="sport_basketball")],
        [InlineKeyboardButton(text="üèê –í–æ–ª–µ–π–±–æ–ª", callback_data="sport_volleyball")],
        [InlineKeyboardButton(text="üèí –•–æ–∫–∫–µ–π", callback_data="sport_hockey")],
        [InlineKeyboardButton(text="üèÉ –õ–µ–≥–∫–∞—è –∞—Ç–ª–µ—Ç–∏–∫–∞", callback_data="sport_athletics")],
        [InlineKeyboardButton(text="ü•ä –ï–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞", callback_data="sport_combat")],
        [InlineKeyboardButton(text="üèä –ü–ª–∞–≤–∞–Ω–∏–µ", callback_data="sport_swimming")],
        [InlineKeyboardButton(text="üí™ –û–§–ü", callback_data="sport_general")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="teams_menu")]
    ])

    data = await state.get_data()
    team_name = data.get('team_name', '–ö–æ–º–∞–Ω–¥–∞')
    description = data.get('team_description', '')

    desc_text = f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n" if description else ""

    text = (
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{team_name}</b>\n"
        f"{desc_text}\n"
        "üèÉ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞:"
    )

    if is_callback:
        await update.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        await update.answer(text, reply_markup=keyboard, parse_mode="HTML")

@teams_router.callback_query(F.data.startswith("sport_"))
async def cb_finalize_team_creation(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    sport_mapping = {
        "sport_football": "—Ñ—É—Ç–±–æ–ª",
        "sport_basketball": "–±–∞—Å–∫–µ—Ç–±–æ–ª",
        "sport_volleyball": "–≤–æ–ª–µ–π–±–æ–ª",
        "sport_hockey": "—Ö–æ–∫–∫–µ–π",
        "sport_athletics": "–ª–µ–≥–∫–∞—è –∞—Ç–ª–µ—Ç–∏–∫–∞",
        "sport_combat": "–µ–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞",
        "sport_swimming": "–ø–ª–∞–≤–∞–Ω–∏–µ",
        "sport_general": "–û–§–ü"
    }

    sport_type = sport_mapping.get(callback.data, "–û–§–ü")
    data = await state.get_data()

    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    team = await create_team(
        callback.from_user.id,
        data['team_name'],
        data.get('team_description', ''),
        sport_type
    )

    await state.clear()

    if team:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data=f"add_player_{team.id}")],
            [InlineKeyboardButton(text="üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data=f"view_team_{team.id}")],
            [InlineKeyboardButton(text="üèÜ –ö –∫–æ–º–∞–Ω–¥–∞–º", callback_data="teams_menu")]
        ])

        await callback.message.edit_text(
            f"‚úÖ <b>–ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"üèÜ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {team.name}\n"
            f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {team.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
            f"üèÉ <b>–í–∏–¥ —Å–ø–æ—Ä—Ç–∞:</b> {team.sport_type}\n"
            f"üë• <b>–ò–≥—Ä–æ–∫–æ–≤:</b> {team.players_count}\n"
            f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {team.created_at.strftime('%d.%m.%Y %H:%M')}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer("‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞!")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã", show_alert=True)

# ============== –ú–û–ò –ö–û–ú–ê–ù–î–´ ==============

@teams_router.callback_query(F.data == "my_teams")
async def cb_my_teams(callback: CallbackQuery, state: FSMContext):
    """–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Ç—Ä–µ–Ω–µ—Ä–∞"""
    await state.clear()

    teams = await get_coach_teams(callback.from_user.id)

    if not teams:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="create_team")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="teams_menu")]
        ])

        await callback.message.edit_text(
            "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–∞–Ω–¥</b>\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–æ–º–∞–Ω–¥—É!",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
        return

    buttons = []
    sport_emojis = {
        "—Ñ—É—Ç–±–æ–ª": "‚öΩ", "–±–∞—Å–∫–µ—Ç–±–æ–ª": "üèÄ", "–≤–æ–ª–µ–π–±–æ–ª": "üèê",
        "—Ö–æ–∫–∫–µ–π": "üèí", "–ª–µ–≥–∫–∞—è –∞—Ç–ª–µ—Ç–∏–∫–∞": "üèÉ", "–µ–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞": "ü•ä",
        "–ø–ª–∞–≤–∞–Ω–∏–µ": "üèä", "–û–§–ü": "üí™"
    }

    for team in teams:
        emoji = sport_emojis.get(team.sport_type, "üèÜ")
        buttons.append([InlineKeyboardButton(
            text=f"{emoji} {team.name} ({team.players_count} –∏–≥—Ä.)",
            callback_data=f"view_team_{team.id}"
        )])

    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="teams_menu")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text(
        f"üèÜ <b>–í–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã ({len(teams)})</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

# ============== –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –í –°–õ–ï–î–£–Æ–©–ï–ú –ë–õ–û–ö–ï ==============

# ============== –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï handlers/teams.py ==============

# ============== –ü–†–û–°–ú–û–¢–† –ö–û–ú–ê–ù–î–´ ==============

@teams_router.callback_query(F.data.startswith("view_team_"))
async def cb_view_team(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–∞–Ω–¥—ã"""
    await state.clear()
    team_id = int(callback.data.split("_")[-1])

    team = await get_team_by_id(team_id)
    if not team:
        await callback.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    players = await get_team_players(team_id)

    sport_emojis = {
        "—Ñ—É—Ç–±–æ–ª": "‚öΩ", "–±–∞—Å–∫–µ—Ç–±–æ–ª": "üèÄ", "–≤–æ–ª–µ–π–±–æ–ª": "üèê",
        "—Ö–æ–∫–∫–µ–π": "üèí", "–ª–µ–≥–∫–∞—è –∞—Ç–ª–µ—Ç–∏–∫–∞": "üèÉ", "–µ–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞": "ü•ä",
        "–ø–ª–∞–≤–∞–Ω–∏–µ": "üèä", "–û–§–ü": "üí™"
    }

    emoji = sport_emojis.get(team.sport_type, "üèÜ")

    buttons = [
        [InlineKeyboardButton(text="üë• –ò–≥—Ä–æ–∫–∏", callback_data=f"team_players_{team_id}")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data=f"add_player_{team_id}")],
        [InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–∞–º", callback_data="my_teams")]
    ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text(
        f"{emoji} <b>{team.name}</b>\n\n"
        f"üìã {team.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
        f"üèÉ <b>–í–∏–¥ —Å–ø–æ—Ä—Ç–∞:</b> {team.sport_type}\n"
        f"üë• <b>–ò–≥—Ä–æ–∫–æ–≤:</b> {len(players)}/{team.max_players}\n"
        f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {team.created_at.strftime('%d.%m.%Y')}",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

# ============== –ò–ì–†–û–ö–ò –ö–û–ú–ê–ù–î–´ ==============

@teams_router.callback_query(F.data.startswith("team_players_"))
async def cb_team_players(callback: CallbackQuery, state: FSMContext):
    """–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã"""
    await state.clear()
    team_id = int(callback.data.split("_")[-1])

    team = await get_team_by_id(team_id)
    players = await get_team_players(team_id)

    if not players:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data=f"add_player_{team_id}")],
            [InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–µ", callback_data=f"view_team_{team_id}")]
        ])

        await callback.message.edit_text(
            f"üë• <b>–ò–≥—Ä–æ–∫–∏ –∫–æ–º–∞–Ω–¥—ã \"{team.name}\"</b>\n\n"
            "üì≠ –í –∫–æ–º–∞–Ω–¥–µ –ø–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞!",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
        return

    players_text = ""
    for i, player in enumerate(players, 1):
        full_name = player.first_name
        if player.last_name:
            full_name += f" {player.last_name}"

        number = f"#{player.jersey_number}" if player.jersey_number else ""
        position = f"({player.position})" if player.position else ""

        players_text += f"{i}. {number} {full_name} {position}\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data=f"add_player_{team_id}")],
        [InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–µ", callback_data=f"view_team_{team_id}")]
    ])

    await callback.message.edit_text(
        f"üë• <b>–ò–≥—Ä–æ–∫–∏ –∫–æ–º–∞–Ω–¥—ã \"{team.name}\"</b>\n\n"
        f"{players_text}\n"
        f"–í—Å–µ–≥–æ: {len(players)} –∏–≥—Ä–æ–∫–æ–≤",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

# ============== –î–û–ë–ê–í–õ–ï–ù–ò–ï –ò–ì–†–û–ö–ê ==============

@teams_router.callback_query(F.data.startswith("add_player_"))
async def cb_add_player(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞"""
    team_id = int(callback.data.split("_")[-1])

    team = await get_team_by_id(team_id)
    if not team:
        await callback.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    await state.update_data(team_id=team_id)
    await state.set_state(TeamStates.waiting_player_first_name)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_team_{team_id}")]
    ])

    await callback.message.edit_text(
        f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ \"{team.name}\"</b>\n\n"
        "üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@teams_router.message(TeamStates.waiting_player_first_name)
async def process_player_first_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞"""
    first_name = message.text.strip()

    if len(first_name) < 1:
        await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º:")
        return

    if len(first_name) > 100:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    await state.update_data(player_first_name=first_name)
    await state.set_state(TeamStates.waiting_player_last_name)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_last_name")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_player")]
    ])

    await message.answer(
        f"‚úÖ –ò–º—è: <b>{first_name}</b>\n\n"
        "üë§ –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏–≥—Ä–æ–∫–∞ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@teams_router.message(TeamStates.waiting_player_last_name)
async def process_player_last_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–º–∏–ª–∏–∏ –∏–≥—Ä–æ–∫–∞"""
    last_name = message.text.strip()

    if len(last_name) > 100:
        await message.answer("‚ùå –§–∞–º–∏–ª–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    await state.update_data(player_last_name=last_name)
    await ask_player_position(message, state, is_callback=False)

@teams_router.callback_query(F.data == "skip_last_name")
async def cb_skip_last_name(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é"""
    await state.update_data(player_last_name="")
    await ask_player_position(callback, state, is_callback=True)

async def ask_player_position(update, state: FSMContext, is_callback: bool = True):
    """–°–ø—Ä–æ—Å–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞"""
    await state.set_state(TeamStates.waiting_player_position)

    data = await state.get_data()
    first_name = data['player_first_name']
    last_name = data.get('player_last_name', '')

    full_name = f"{first_name} {last_name}".strip()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_position")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_player")]
    ])

    text = (
        f"‚úÖ –ò–≥—Ä–æ–∫: <b>{full_name}</b>\n\n"
        "üèÉ –í–≤–µ–¥–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):"
    )

    if is_callback:
        await update.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        await update.answer(text, reply_markup=keyboard, parse_mode="HTML")

@teams_router.message(TeamStates.waiting_player_position)
async def process_player_position(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞"""
    position = message.text.strip()

    if len(position) > 50:
        await message.answer("‚ùå –ü–æ–∑–∏—Ü–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    await state.update_data(player_position=position)
    await ask_player_jersey_number(message, state, is_callback=False)

@teams_router.callback_query(F.data == "skip_position")
async def cb_skip_position(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é"""
    await state.update_data(player_position="")
    await ask_player_jersey_number(callback, state, is_callback=True)

async def ask_player_jersey_number(update, state: FSMContext, is_callback: bool = True):
    """–°–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–º–µ—Ä –º–∞–π–∫–∏"""
    await state.set_state(TeamStates.waiting_player_jersey_number)

    data = await state.get_data()
    first_name = data['player_first_name']
    last_name = data.get('player_last_name', '')
    position = data.get('player_position', '')

    full_name = f"{first_name} {last_name}".strip()
    position_text = f"üèÉ –ü–æ–∑–∏—Ü–∏—è: <b>{position}</b>\n" if position else ""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_jersey_number")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_player")]
    ])

    text = (
        f"‚úÖ –ò–≥—Ä–æ–∫: <b>{full_name}</b>\n"
        f"{position_text}\n"
        "üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞ –º–∞–π–∫–µ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):"
    )

    if is_callback:
        await update.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        await update.answer(text, reply_markup=keyboard, parse_mode="HTML")

@teams_router.message(TeamStates.waiting_player_jersey_number)
async def process_player_jersey_number(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –º–∞–π–∫–∏"""
    try:
        jersey_number = int(message.text.strip())
        if jersey_number < 1 or jersey_number > 999:
            await message.answer("‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 999:")
            return
    except ValueError:
        await message.answer("‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º:")
        return

    await state.update_data(player_jersey_number=jersey_number)
    await finalize_player_creation(message, state, is_callback=False)

@teams_router.callback_query(F.data == "skip_jersey_number")
async def cb_skip_jersey_number(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–º–µ—Ä –º–∞–π–∫–∏"""
    await state.update_data(player_jersey_number=None)
    await finalize_player_creation(callback, state, is_callback=True)

async def finalize_player_creation(update, state: FSMContext, is_callback: bool = True):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞"""
    data = await state.get_data()

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –ë–î
    player = await add_team_player(
        team_id=data['team_id'],
        first_name=data['player_first_name'],
        last_name=data.get('player_last_name') or None,
        position=data.get('player_position') or None,
        jersey_number=data.get('player_jersey_number')
    )

    await state.clear()

    if player:
        full_name = player.first_name
        if player.last_name:
            full_name += f" {player.last_name}"

        position_text = f"üèÉ <b>–ü–æ–∑–∏—Ü–∏—è:</b> {player.position}\n" if player.position else ""
        jersey_text = f"üî¢ <b>–ù–æ–º–µ—Ä:</b> {player.jersey_number}\n" if player.jersey_number else ""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–≥—Ä–æ–∫–∞", callback_data=f"add_player_{data['team_id']}")],
            [InlineKeyboardButton(text="üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–≥—Ä–æ–∫–æ–≤", callback_data=f"team_players_{data['team_id']}")],
            [InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–µ", callback_data=f"view_team_{data['team_id']}")]
        ])

        text = (
            f"‚úÖ <b>–ò–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"üë§ <b>–ò–º—è:</b> {full_name}\n"
            f"{position_text}"
            f"{jersey_text}"
            f"üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω:</b> {player.joined_at.strftime('%d.%m.%Y %H:%M')}"
        )

        if is_callback:
            await update.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            await update.answer("‚úÖ –ò–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            await update.answer(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        error_msg = "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞"
        if is_callback:
            await update.answer(error_msg, show_alert=True)
        else:
            await update.answer(error_msg)

@teams_router.callback_query(F.data == "cancel_add_player")
async def cb_cancel_add_player(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞"""
    data = await state.get_data()
    team_id = data.get('team_id')
    await state.clear()

    if team_id:
        await callback.message.edit_text(
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–µ", callback_data=f"view_team_{team_id}")]
            ])
        )
    else:
        await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")

    await callback.answer()

# ============== –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –í –°–õ–ï–î–£–Æ–©–ï–ú –ë–õ–û–ö–ï ==============


"""
handlers/teams.py - –ü–û–õ–ù–û–¶–ï–ù–ù–´–ô –ú–û–î–£–õ–¨ –ö–û–ú–ê–ù–î
‚úÖ –í–°–ï –ö–ù–û–ü–ö–ò –†–ê–ë–û–¢–ê–Æ–¢
‚úÖ –í–°–ï –°–û–•–†–ê–ù–Ø–ï–¢–°–Ø –í –ë–î
‚úÖ –ü–û–õ–ù–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨
"""

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
import logging
from datetime import datetime, date

# –ò–º–ø–æ—Ä—Ç –ë–î - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π db_manager
try:
    from database import db_manager
    from database.teams_db import TeamsDatabase, init_teams_database
except ImportError:
    db_manager = None
    TeamsDatabase = None
    init_teams_database = None
    logging.warning("Database modules not found - using in-memory storage")

logger = logging.getLogger(__name__)

# ============== FSM –°–û–°–¢–û–Ø–ù–ò–Ø ==============

class TeamStates(StatesGroup):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    waiting_team_name = State()
    waiting_team_description = State()
    waiting_sport_type = State()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    waiting_player_first_name = State()
    waiting_player_last_name = State()
    waiting_player_position = State()
    waiting_player_jersey_number = State()

    # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥–æ–ø–µ—á–Ω—ã–π
    waiting_student_first_name = State()
    waiting_student_last_name = State()
    waiting_student_specialization = State()
    waiting_student_level = State()

# ============== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ==============

teams_router = Router()
teams_db = None  # –ë–î –∫–æ–º–∞–Ω–¥
memory_teams = {}  # –†–µ–∑–µ—Ä–≤ –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ë–î
memory_students = {}

# ============== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ==============

async def init_teams_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∫–æ–º–∞–Ω–¥"""
    global teams_db

    if db_manager and TeamsDatabase:
        try:
            teams_db = init_teams_database(db_manager.pool)
            await teams_db.init_tables()
            logger.info("‚úÖ Teams database initialized with PostgreSQL")
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize teams database: {e}")
            teams_db = None
    else:
        logger.warning("‚ö†Ô∏è Using in-memory storage for teams (no persistence)")

# ============== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ==============

@teams_router.message(Command("teams"))
async def cmd_teams(message: Message, state: FSMContext):
    """–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /teams"""
    await state.clear()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await get_coach_stats(message.from_user.id)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèÜ –ö–æ–º–∞–Ω–¥—ã", callback_data="teams_menu")],
        [InlineKeyboardButton(text="üë§ –ü–æ–¥–æ–ø–µ—á–Ω—ã–µ", callback_data="students_menu")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_menu")]
    ])

    await message.answer(
        f"üèüÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–º–∏</b>\n\n"
        f"üèÜ –ö–æ–º–∞–Ω–¥: {stats['teams_count']}\n"
        f"üë• –ò–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö: {stats['team_players_count']}\n"
        f"üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö: {stats['individual_students_count']}\n"
        f"üéØ –í—Å–µ–≥–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤: {stats['total_athletes']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@teams_router.callback_query(F.data == "main_menu")
async def cb_main_menu(callback: CallbackQuery, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ callback"""
    await state.clear()

    stats = await get_coach_stats(callback.from_user.id)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèÜ –ö–æ–º–∞–Ω–¥—ã", callback_data="teams_menu")],
        [InlineKeyboardButton(text="üë§ –ü–æ–¥–æ–ø–µ—á–Ω—ã–µ", callback_data="students_menu")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_menu")]
    ])

    await callback.message.edit_text(
        f"üèüÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–º–∏</b>\n\n"
        f"üèÜ –ö–æ–º–∞–Ω–¥: {stats['teams_count']}\n"
        f"üë• –ò–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö: {stats['team_players_count']}\n"
        f"üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö: {stats['individual_students_count']}\n"
        f"üéØ –í—Å–µ–≥–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤: {stats['total_athletes']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

# ============== –ú–ï–ù–Æ –ö–û–ú–ê–ù–î ==============

@teams_router.callback_query(F.data == "teams_menu")
async def cb_teams_menu(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥"""
    await state.clear()

    teams = await get_coach_teams(callback.from_user.id)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="create_team")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã", callback_data="my_teams")],
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

    await callback.message.edit_text(
        f"üèÜ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏</b>\n\n"
        f"üìä –£ –≤–∞—Å {len(teams)} –∫–æ–º–∞–Ω–¥(—ã)\n\n"
        "–ö–æ–º–∞–Ω–¥—ã –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

# ============== –°–û–ó–î–ê–ù–ò–ï –ö–û–ú–ê–ù–î–´ ==============

@teams_router.callback_query(F.data == "create_team")
async def cb_create_team(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
    await state.set_state(TeamStates.waiting_team_name)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="teams_menu")]
    ])

    await callback.message.edit_text(
        "üÜï <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (2-100 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@teams_router.message(TeamStates.waiting_team_name)
async def process_team_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    team_name = message.text.strip()

    if len(team_name) < 2:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞:")
        return

    if len(team_name) > 100:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    await state.update_data(team_name=team_name)
    await state.set_state(TeamStates.waiting_team_description)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_description")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="teams_menu")]
    ])

    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{team_name}</b>\n\n"
        "üìã –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@teams_router.message(TeamStates.waiting_team_description)
async def process_team_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    description = message.text.strip()

    if len(description) > 500:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    await state.update_data(team_description=description)
    await ask_sport_type(message, state, is_callback=False)

@teams_router.callback_query(F.data == "skip_description")
async def cb_skip_description(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"""
    await state.update_data(team_description="")
    await ask_sport_type(callback, state, is_callback=True)

async def ask_sport_type(update, state: FSMContext, is_callback: bool = True):
    """–°–ø—Ä–æ—Å–∏—Ç—å –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞"""
    await state.set_state(TeamStates.waiting_sport_type)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öΩ –§—É—Ç–±–æ–ª", callback_data="sport_football")],
        [InlineKeyboardButton(text="üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª", callback_data="sport_basketball")],
        [InlineKeyboardButton(text="üèê –í–æ–ª–µ–π–±–æ–ª", callback_data="sport_volleyball")],
        [InlineKeyboardButton(text="üèí –•–æ–∫–∫–µ–π", callback_data="sport_hockey")],
        [InlineKeyboardButton(text="üèÉ –õ–µ–≥–∫–∞—è –∞—Ç–ª–µ—Ç–∏–∫–∞", callback_data="sport_athletics")],
        [InlineKeyboardButton(text="ü•ä –ï–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞", callback_data="sport_combat")],
        [InlineKeyboardButton(text="üèä –ü–ª–∞–≤–∞–Ω–∏–µ", callback_data="sport_swimming")],
        [InlineKeyboardButton(text="üí™ –û–§–ü", callback_data="sport_general")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="teams_menu")]
    ])

    data = await state.get_data()
    team_name = data.get('team_name', '–ö–æ–º–∞–Ω–¥–∞')
    description = data.get('team_description', '')

    desc_text = f"üìã –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n" if description else ""

    text = (
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{team_name}</b>\n"
        f"{desc_text}\n"
        "üèÉ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞:"
    )

    if is_callback:
        await update.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        await update.answer(text, reply_markup=keyboard, parse_mode="HTML")

@teams_router.callback_query(F.data.startswith("sport_"))
async def cb_finalize_team_creation(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    sport_mapping = {
        "sport_football": "—Ñ—É—Ç–±–æ–ª",
        "sport_basketball": "–±–∞—Å–∫–µ—Ç–±–æ–ª",
        "sport_volleyball": "–≤–æ–ª–µ–π–±–æ–ª",
        "sport_hockey": "—Ö–æ–∫–∫–µ–π",
        "sport_athletics": "–ª–µ–≥–∫–∞—è –∞—Ç–ª–µ—Ç–∏–∫–∞",
        "sport_combat": "–µ–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞",
        "sport_swimming": "–ø–ª–∞–≤–∞–Ω–∏–µ",
        "sport_general": "–û–§–ü"
    }

    sport_type = sport_mapping.get(callback.data, "–û–§–ü")
    data = await state.get_data()

    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    team = await create_team(
        callback.from_user.id,
        data['team_name'],
        data.get('team_description', ''),
        sport_type
    )

    await state.clear()

    if team:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data=f"add_player_{team.id}")],
            [InlineKeyboardButton(text="üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data=f"view_team_{team.id}")],
            [InlineKeyboardButton(text="üèÜ –ö –∫–æ–º–∞–Ω–¥–∞–º", callback_data="teams_menu")]
        ])

        await callback.message.edit_text(
            f"‚úÖ <b>–ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"üèÜ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {team.name}\n"
            f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {team.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
            f"üèÉ <b>–í–∏–¥ —Å–ø–æ—Ä—Ç–∞:</b> {team.sport_type}\n"
            f"üë• <b>–ò–≥—Ä–æ–∫–æ–≤:</b> {team.players_count}\n"
            f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {team.created_at.strftime('%d.%m.%Y %H:%M')}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer("‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞!")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã", show_alert=True)

# ============== –ú–û–ò –ö–û–ú–ê–ù–î–´ ==============

@teams_router.callback_query(F.data == "my_teams")
async def cb_my_teams(callback: CallbackQuery, state: FSMContext):
    """–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Ç—Ä–µ–Ω–µ—Ä–∞"""
    await state.clear()

    teams = await get_coach_teams(callback.from_user.id)

    if not teams:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="create_team")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="teams_menu")]
        ])

        await callback.message.edit_text(
            "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–∞–Ω–¥</b>\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–æ–º–∞–Ω–¥—É!",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
        return

    buttons = []
    sport_emojis = {
        "—Ñ—É—Ç–±–æ–ª": "‚öΩ", "–±–∞—Å–∫–µ—Ç–±–æ–ª": "üèÄ", "–≤–æ–ª–µ–π–±–æ–ª": "üèê",
        "—Ö–æ–∫–∫–µ–π": "üèí", "–ª–µ–≥–∫–∞—è –∞—Ç–ª–µ—Ç–∏–∫–∞": "üèÉ", "–µ–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞": "ü•ä",
        "–ø–ª–∞–≤–∞–Ω–∏–µ": "üèä", "–û–§–ü": "üí™"
    }

    for team in teams:
        emoji = sport_emojis.get(team.sport_type, "üèÜ")
        buttons.append([InlineKeyboardButton(
            text=f"{emoji} {team.name} ({team.players_count} –∏–≥—Ä.)",
            callback_data=f"view_team_{team.id}"
        )])

    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="teams_menu")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text(
        f"üèÜ <b>–í–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã ({len(teams)})</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

# ============== –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –í –°–õ–ï–î–£–Æ–©–ï–ú –ë–õ–û–ö–ï ==============

# ============== –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï handlers/teams.py ==============

# ============== –ü–†–û–°–ú–û–¢–† –ö–û–ú–ê–ù–î–´ ==============

@teams_router.callback_query(F.data.startswith("view_team_"))
async def cb_view_team(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–∞–Ω–¥—ã"""
    await state.clear()
    team_id = int(callback.data.split("_")[-1])

    team = await get_team_by_id(team_id)
    if not team:
        await callback.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    players = await get_team_players(team_id)

    sport_emojis = {
        "—Ñ—É—Ç–±–æ–ª": "‚öΩ", "–±–∞—Å–∫–µ—Ç–±–æ–ª": "üèÄ", "–≤–æ–ª–µ–π–±–æ–ª": "üèê",
        "—Ö–æ–∫–∫–µ–π": "üèí", "–ª–µ–≥–∫–∞—è –∞—Ç–ª–µ—Ç–∏–∫–∞": "üèÉ", "–µ–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞": "ü•ä",
        "–ø–ª–∞–≤–∞–Ω–∏–µ": "üèä", "–û–§–ü": "üí™"
    }

    emoji = sport_emojis.get(team.sport_type, "üèÜ")

    buttons = [
        [InlineKeyboardButton(text="üë• –ò–≥—Ä–æ–∫–∏", callback_data=f"team_players_{team_id}")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data=f"add_player_{team_id}")],
        [InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–∞–º", callback_data="my_teams")]
    ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text(
        f"{emoji} <b>{team.name}</b>\n\n"
        f"üìã {team.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
        f"üèÉ <b>–í–∏–¥ —Å–ø–æ—Ä—Ç–∞:</b> {team.sport_type}\n"
        f"üë• <b>–ò–≥—Ä–æ–∫–æ–≤:</b> {len(players)}/{team.max_players}\n"
        f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {team.created_at.strftime('%d.%m.%Y')}",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

# ============== –ò–ì–†–û–ö–ò –ö–û–ú–ê–ù–î–´ ==============

@teams_router.callback_query(F.data.startswith("team_players_"))
async def cb_team_players(callback: CallbackQuery, state: FSMContext):
    """–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã"""
    await state.clear()
    team_id = int(callback.data.split("_")[-1])

    team = await get_team_by_id(team_id)
    players = await get_team_players(team_id)

    if not players:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data=f"add_player_{team_id}")],
            [InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–µ", callback_data=f"view_team_{team_id}")]
        ])

        await callback.message.edit_text(
            f"üë• <b>–ò–≥—Ä–æ–∫–∏ –∫–æ–º–∞–Ω–¥—ã \"{team.name}\"</b>\n\n"
            "üì≠ –í –∫–æ–º–∞–Ω–¥–µ –ø–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞!",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
        return

    players_text = ""
    for i, player in enumerate(players, 1):
        full_name = player.first_name
        if player.last_name:
            full_name += f" {player.last_name}"

        number = f"#{player.jersey_number}" if player.jersey_number else ""
        position = f"({player.position})" if player.position else ""

        players_text += f"{i}. {number} {full_name} {position}\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data=f"add_player_{team_id}")],
        [InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–µ", callback_data=f"view_team_{team_id}")]
    ])

    await callback.message.edit_text(
        f"üë• <b>–ò–≥—Ä–æ–∫–∏ –∫–æ–º–∞–Ω–¥—ã \"{team.name}\"</b>\n\n"
        f"{players_text}\n"
        f"–í—Å–µ–≥–æ: {len(players)} –∏–≥—Ä–æ–∫–æ–≤",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

# ============== –î–û–ë–ê–í–õ–ï–ù–ò–ï –ò–ì–†–û–ö–ê ==============

@teams_router.callback_query(F.data.startswith("add_player_"))
async def cb_add_player(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞"""
    team_id = int(callback.data.split("_")[-1])

    team = await get_team_by_id(team_id)
    if not team:
        await callback.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    await state.update_data(team_id=team_id)
    await state.set_state(TeamStates.waiting_player_first_name)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_team_{team_id}")]
    ])

    await callback.message.edit_text(
        f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ \"{team.name}\"</b>\n\n"
        "üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@teams_router.message(TeamStates.waiting_player_first_name)
async def process_player_first_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞"""
    first_name = message.text.strip()

    if len(first_name) < 1:
        await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º:")
        return

    if len(first_name) > 100:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    await state.update_data(player_first_name=first_name)
    await state.set_state(TeamStates.waiting_player_last_name)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_last_name")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_player")]
    ])

    await message.answer(
        f"‚úÖ –ò–º—è: <b>{first_name}</b>\n\n"
        "üë§ –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏–≥—Ä–æ–∫–∞ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@teams_router.message(TeamStates.waiting_player_last_name)
async def process_player_last_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–º–∏–ª–∏–∏ –∏–≥—Ä–æ–∫–∞"""
    last_name = message.text.strip()

    if len(last_name) > 100:
        await message.answer("‚ùå –§–∞–º–∏–ª–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    await state.update_data(player_last_name=last_name)
    await ask_player_position(message, state, is_callback=False)

@teams_router.callback_query(F.data == "skip_last_name")
async def cb_skip_last_name(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é"""
    await state.update_data(player_last_name="")
    await ask_player_position(callback, state, is_callback=True)

async def ask_player_position(update, state: FSMContext, is_callback: bool = True):
    """–°–ø—Ä–æ—Å–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞"""
    await state.set_state(TeamStates.waiting_player_position)

    data = await state.get_data()
    first_name = data['player_first_name']
    last_name = data.get('player_last_name', '')

    full_name = f"{first_name} {last_name}".strip()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_position")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_player")]
    ])

    text = (
        f"‚úÖ –ò–≥—Ä–æ–∫: <b>{full_name}</b>\n\n"
        "üèÉ –í–≤–µ–¥–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –∏–≥—Ä–æ–∫–∞ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):"
    )

    if is_callback:
        await update.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        await update.answer(text, reply_markup=keyboard, parse_mode="HTML")

@teams_router.message(TeamStates.waiting_player_position)
async def process_player_position(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞"""
    position = message.text.strip()

    if len(position) > 50:
        await message.answer("‚ùå –ü–æ–∑–∏—Ü–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    await state.update_data(player_position=position)
    await ask_player_jersey_number(message, state, is_callback=False)

@teams_router.callback_query(F.data == "skip_position")
async def cb_skip_position(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é"""
    await state.update_data(player_position="")
    await ask_player_jersey_number(callback, state, is_callback=True)

async def ask_player_jersey_number(update, state: FSMContext, is_callback: bool = True):
    """–°–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–º–µ—Ä –º–∞–π–∫–∏"""
    await state.set_state(TeamStates.waiting_player_jersey_number)

    data = await state.get_data()
    first_name = data['player_first_name']
    last_name = data.get('player_last_name', '')
    position = data.get('player_position', '')

    full_name = f"{first_name} {last_name}".strip()
    position_text = f"üèÉ –ü–æ–∑–∏—Ü–∏—è: <b>{position}</b>\n" if position else ""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_jersey_number")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_player")]
    ])

    text = (
        f"‚úÖ –ò–≥—Ä–æ–∫: <b>{full_name}</b>\n"
        f"{position_text}\n"
        "üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞ –º–∞–π–∫–µ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):"
    )

    if is_callback:
        await update.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        await update.answer(text, reply_markup=keyboard, parse_mode="HTML")

@teams_router.message(TeamStates.waiting_player_jersey_number)
async def process_player_jersey_number(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –º–∞–π–∫–∏"""
    try:
        jersey_number = int(message.text.strip())
        if jersey_number < 1 or jersey_number > 999:
            await message.answer("‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 999:")
            return
    except ValueError:
        await message.answer("‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º:")
        return

    await state.update_data(player_jersey_number=jersey_number)
    await finalize_player_creation(message, state, is_callback=False)

@teams_router.callback_query(F.data == "skip_jersey_number")
async def cb_skip_jersey_number(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–º–µ—Ä –º–∞–π–∫–∏"""
    await state.update_data(player_jersey_number=None)
    await finalize_player_creation(callback, state, is_callback=True)

async def finalize_player_creation(update, state: FSMContext, is_callback: bool = True):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞"""
    data = await state.get_data()

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –ë–î
    player = await add_team_player(
        team_id=data['team_id'],
        first_name=data['player_first_name'],
        last_name=data.get('player_last_name') or None,
        position=data.get('player_position') or None,
        jersey_number=data.get('player_jersey_number')
    )

    await state.clear()

    if player:
        full_name = player.first_name
        if player.last_name:
            full_name += f" {player.last_name}"

        position_text = f"üèÉ <b>–ü–æ–∑–∏—Ü–∏—è:</b> {player.position}\n" if player.position else ""
        jersey_text = f"üî¢ <b>–ù–æ–º–µ—Ä:</b> {player.jersey_number}\n" if player.jersey_number else ""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–≥—Ä–æ–∫–∞", callback_data=f"add_player_{data['team_id']}")],
            [InlineKeyboardButton(text="üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–≥—Ä–æ–∫–æ–≤", callback_data=f"team_players_{data['team_id']}")],
            [InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–µ", callback_data=f"view_team_{data['team_id']}")]
        ])

        text = (
            f"‚úÖ <b>–ò–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"üë§ <b>–ò–º—è:</b> {full_name}\n"
            f"{position_text}"
            f"{jersey_text}"
            f"üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω:</b> {player.joined_at.strftime('%d.%m.%Y %H:%M')}"
        )

        if is_callback:
            await update.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            await update.answer("‚úÖ –ò–≥—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            await update.answer(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        error_msg = "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞"
        if is_callback:
            await update.answer(error_msg, show_alert=True)
        else:
            await update.answer(error_msg)

@teams_router.callback_query(F.data == "cancel_add_player")
async def cb_cancel_add_player(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞"""
    data = await state.get_data()
    team_id = data.get('team_id')
    await state.clear()

    if team_id:
        await callback.message.edit_text(
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–µ", callback_data=f"view_team_{team_id}")]
            ])
        )
    else:
        await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")

    await callback.answer()

# ============== –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –í –°–õ–ï–î–£–Æ–©–ï–ú –ë–õ–û–ö–ï ==============

# ============== –§–ò–ù–ê–õ–¨–ù–ê–Ø –ß–ê–°–¢–¨ handlers/teams.py ==============

# ============== –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ï –ü–û–î–û–ü–ï–ß–ù–´–ï ==============

@teams_router.callback_query(F.data == "students_menu")
async def cb_students_menu(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö"""
    await state.clear()

    students = await get_individual_students(callback.from_user.id)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ", callback_data="add_student")],
        [InlineKeyboardButton(text="üë• –ú–æ–∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–µ", callback_data="my_students")],
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

    await callback.message.edit_text(
        f"üë§ <b>–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–æ–¥–æ–ø–µ—á–Ω—ã–µ</b>\n\n"
        f"üìä –£ –≤–∞—Å {len(students)} –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö\n\n"
        "–ü–æ–¥–æ–ø–µ—á–Ω—ã–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@teams_router.callback_query(F.data == "add_student")
async def cb_add_student(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ"""
    await state.set_state(TeamStates.waiting_student_first_name)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="students_menu")]
    ])

    await callback.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ</b>\n\n"
        "üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@teams_router.message(TeamStates.waiting_student_first_name)
async def process_student_first_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ"""
    first_name = message.text.strip()

    if len(first_name) < 1:
        await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º:")
        return

    if len(first_name) > 100:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    await state.update_data(student_first_name=first_name)
    await state.set_state(TeamStates.waiting_student_last_name)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_student_last_name")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="students_menu")]
    ])

    await message.answer(
        f"‚úÖ –ò–º—è: <b>{first_name}</b>\n\n"
        "üë§ –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@teams_router.message(TeamStates.waiting_student_last_name)
async def process_student_last_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–º–∏–ª–∏–∏ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ"""
    last_name = message.text.strip()

    if len(last_name) > 100:
        await message.answer("‚ùå –§–∞–º–∏–ª–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    await state.update_data(student_last_name=last_name)
    await ask_student_specialization(message, state, is_callback=False)

@teams_router.callback_query(F.data == "skip_student_last_name")
async def cb_skip_student_last_name(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ"""
    await state.update_data(student_last_name="")
    await ask_student_specialization(callback, state, is_callback=True)

async def ask_student_specialization(update, state: FSMContext, is_callback: bool = True):
    """–°–ø—Ä–æ—Å–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é"""
    await state.set_state(TeamStates.waiting_student_specialization)

    data = await state.get_data()
    first_name = data['student_first_name']
    last_name = data.get('student_last_name', '')

    full_name = f"{first_name} {last_name}".strip()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèÉ –ë–µ–≥", callback_data="spec_running")],
        [InlineKeyboardButton(text="üí™ –°–∏–ª–æ–≤—ã–µ", callback_data="spec_strength")],
        [InlineKeyboardButton(text="ü§∏ –ì–∏–º–Ω–∞—Å—Ç–∏–∫–∞", callback_data="spec_gymnastics")],
        [InlineKeyboardButton(text="üèä –ü–ª–∞–≤–∞–Ω–∏–µ", callback_data="spec_swimming")],
        [InlineKeyboardButton(text="ü•ä –ï–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞", callback_data="spec_combat")],
        [InlineKeyboardButton(text="‚öΩ –§—É—Ç–±–æ–ª", callback_data="spec_football")],
        [InlineKeyboardButton(text="üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª", callback_data="spec_basketball")],
        [InlineKeyboardButton(text="üí™ –û–§–ü", callback_data="spec_general")],
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_specialization")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="students_menu")]
    ])

    text = (
        f"‚úÖ –ü–æ–¥–æ–ø–µ—á–Ω—ã–π: <b>{full_name}</b>\n\n"
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:"
    )

    if is_callback:
        await update.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        await update.answer(text, reply_markup=keyboard, parse_mode="HTML")

@teams_router.callback_query(F.data.startswith("spec_"))
@teams_router.callback_query(F.data == "skip_specialization")
async def cb_student_specialization(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ"""
    if callback.data == "skip_specialization":
        specialization = ""
    else:
        spec_mapping = {
            "spec_running": "–ë–µ–≥",
            "spec_strength": "–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
            "spec_gymnastics": "–ì–∏–º–Ω–∞—Å—Ç–∏–∫–∞",
            "spec_swimming": "–ü–ª–∞–≤–∞–Ω–∏–µ",
            "spec_combat": "–ï–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞",
            "spec_football": "–§—É—Ç–±–æ–ª",
            "spec_basketball": "–ë–∞—Å–∫–µ—Ç–±–æ–ª",
            "spec_general": "–û–§–ü"
        }
        specialization = spec_mapping.get(callback.data, "")

    await state.update_data(student_specialization=specialization)
    await ask_student_level(callback, state)

async def ask_student_level(callback: CallbackQuery, state: FSMContext):
    """–°–ø—Ä–æ—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ"""
    await state.set_state(TeamStates.waiting_student_level)

    data = await state.get_data()
    first_name = data['student_first_name']
    last_name = data.get('student_last_name', '')
    specialization = data.get('student_specialization', '')

    full_name = f"{first_name} {last_name}".strip()
    spec_text = f"üéØ <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> {specialization}\n" if specialization else ""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üü¢ –ù–æ–≤–∏—á–æ–∫", callback_data="level_beginner")],
        [InlineKeyboardButton(text="üü° –°—Ä–µ–¥–Ω–∏–π", callback_data="level_intermediate")],
        [InlineKeyboardButton(text="üî¥ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", callback_data="level_advanced")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="students_menu")]
    ])

    await callback.message.edit_text(
        f"‚úÖ –ü–æ–¥–æ–ø–µ—á–Ω—ã–π: <b>{full_name}</b>\n"
        f"{spec_text}\n"
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@teams_router.callback_query(F.data.startswith("level_"))
async def cb_student_level(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ä–æ–≤–Ω—è –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ"""
    level_mapping = {
        "level_beginner": "beginner",
        "level_intermediate": "intermediate",
        "level_advanced": "advanced"
    }

    level = level_mapping.get(callback.data, "beginner")
    data = await state.get_data()

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ –≤ –ë–î
    student = await add_individual_student(
        coach_telegram_id=callback.from_user.id,
        first_name=data['student_first_name'],
        last_name=data.get('student_last_name') or None,
        specialization=data.get('student_specialization') or None,
        level=level
    )

    await state.clear()

    if student:
        full_name = student.first_name
        if student.last_name:
            full_name += f" {student.last_name}"

        level_emojis = {"beginner": "üü¢", "intermediate": "üü°", "advanced": "üî¥"}
        level_names = {"beginner": "–ù–æ–≤–∏—á–æ–∫", "intermediate": "–°—Ä–µ–¥–Ω–∏–π", "advanced": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"}

        spec_text = f"üéØ <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> {student.specialization}\n" if student.specialization else ""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ", callback_data="add_student")],
            [InlineKeyboardButton(text="üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö", callback_data="my_students")],
            [InlineKeyboardButton(text="üîô –ö –ø–æ–¥–æ–ø–µ—á–Ω—ã–º", callback_data="students_menu")]
        ])

        await callback.message.edit_text(
            f"‚úÖ <b>–ü–æ–¥–æ–ø–µ—á–Ω—ã–π –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"üë§ <b>–ò–º—è:</b> {full_name}\n"
            f"{spec_text}"
            f"üìä <b>–£—Ä–æ–≤–µ–Ω—å:</b> {level_emojis[level]} {level_names[level]}\n"
            f"üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω:</b> {student.created_at.strftime('%d.%m.%Y %H:%M')}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer("‚úÖ –ü–æ–¥–æ–ø–µ—á–Ω—ã–π –¥–æ–±–∞–≤–ª–µ–Ω!")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ", show_alert=True)

# ============== –ú–û–ò –ü–û–î–û–ü–ï–ß–ù–´–ï ==============

@teams_router.callback_query(F.data == "my_students")
async def cb_my_students(callback: CallbackQuery, state: FSMContext):
    """–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö"""
    await state.clear()

    students = await get_individual_students(callback.from_user.id)

    if not students:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ", callback_data="add_student")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="students_menu")]
        ])

        await callback.message.edit_text(
            "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö</b>\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
        return

    students_text = ""
    level_emojis = {"beginner": "üü¢", "intermediate": "üü°", "advanced": "üî¥"}
    spec_emojis = {
        "–ë–µ–≥": "üèÉ", "–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏": "üí™", "–ì–∏–º–Ω–∞—Å—Ç–∏–∫–∞": "ü§∏",
        "–ü–ª–∞–≤–∞–Ω–∏–µ": "üèä", "–ï–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞": "ü•ä", "–§—É—Ç–±–æ–ª": "‚öΩ",
        "–ë–∞—Å–∫–µ—Ç–±–æ–ª": "üèÄ", "–û–§–ü": "üí™"
    }

    for i, student in enumerate(students, 1):
        full_name = student.first_name
        if student.last_name:
            full_name += f" {student.last_name}"

        level_emoji = level_emojis.get(student.level, "")
        spec_emoji = spec_emojis.get(student.specialization, "üë§")

        spec_text = f" ({student.specialization})" if student.specialization else ""
        students_text += f"{i}. {level_emoji} {spec_emoji} {full_name}{spec_text}\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ", callback_data="add_student")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="students_menu")]
    ])

    await callback.message.edit_text(
        f"üë• <b>–ú–æ–∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–µ ({len(students)})</b>\n\n"
        f"{students_text}\n"
        "üü¢ –ù–æ–≤–∏—á–æ–∫ ‚Ä¢ üü° –°—Ä–µ–¥–Ω–∏–π ‚Ä¢ üî¥ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

# ============== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ==============

@teams_router.callback_query(F.data == "stats_menu")
async def cb_stats_menu(callback: CallbackQuery, state: FSMContext):
    """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    await state.clear()

    stats = await get_coach_stats(callback.from_user.id)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

    await callback.message.edit_text(
        f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üèÜ <b>–ö–æ–º–∞–Ω–¥:</b> {stats['teams_count']}\n"
        f"üë• <b>–ò–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö:</b> {stats['team_players_count']}\n"
        f"üë§ <b>–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö:</b> {stats['individual_students_count']}\n\n"
        f"üéØ <b>–í—Å–µ–≥–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤:</b> {stats['total_athletes']}\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã!",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

# ============== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==============

async def get_coach_stats(coach_telegram_id: int) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–Ω–µ—Ä–∞"""
    if teams_db:
        return await teams_db.get_coach_statistics(coach_telegram_id)
    else:
        # Fallback –¥–ª—è —Ä–µ–∂–∏–º–∞ –±–µ–∑ –ë–î
        user_teams = memory_teams.get(coach_telegram_id, [])
        user_students = memory_students.get(coach_telegram_id, [])

        team_players_count = sum(len(team.get("players", [])) for team in user_teams)

        return {
            'teams_count': len(user_teams),
            'team_players_count': team_players_count,
            'individual_students_count': len(user_students),
            'total_athletes': team_players_count + len(user_students)
        }

async def create_team(coach_telegram_id: int, name: str, description: str = "", sport_type: str = "–û–§–ü"):
    """–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É"""
    if teams_db:
        try:
            return await teams_db.create_team(coach_telegram_id, name, description, sport_type)
        except Exception as e:
            logger.error(f"‚ùå Error creating team: {e}")
            return None
    else:
        # Fallback –¥–ª—è —Ä–µ–∂–∏–º–∞ –±–µ–∑ –ë–î
        if coach_telegram_id not in memory_teams:
            memory_teams[coach_telegram_id] = []

        team = {
            "id": len(memory_teams[coach_telegram_id]) + 1,
            "name": name,
            "description": description,
            "sport_type": sport_type,
            "players": [],
            "created_at": datetime.now(),
            "players_count": 0
        }

        memory_teams[coach_telegram_id].append(team)
        return type('Team', (), team)  # Mock –æ–±—ä–µ–∫—Ç

async def get_coach_teams(coach_telegram_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–Ω–µ—Ä–∞"""
    if teams_db:
        try:
            return await teams_db.get_coach_teams(coach_telegram_id)
        except Exception as e:
            logger.error(f"‚ùå Error getting teams: {e}")
            return []
    else:
        return memory_teams.get(coach_telegram_id, [])

async def get_team_by_id(team_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–æ ID"""
    if teams_db:
        try:
            return await teams_db.get_team_by_id(team_id)
        except Exception as e:
            logger.error(f"‚ùå Error getting team: {e}")
            return None
    else:
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏
        for user_teams in memory_teams.values():
            for team in user_teams:
                if team.get("id") == team_id:
                    return type('Team', (), team)
        return None

async def get_team_players(team_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã"""
    if teams_db:
        try:
            return await teams_db.get_team_players(team_id)
        except Exception as e:
            logger.error(f"‚ùå Error getting players: {e}")
            return []
    else:
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏
        for user_teams in memory_teams.values():
            for team in user_teams:
                if team.get("id") == team_id:
                    return team.get("players", [])
        return []

async def add_team_player(team_id: int, first_name: str, last_name: str = None, 
                         position: str = None, jersey_number: int = None):
    """–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É"""
    if teams_db:
        try:
            return await teams_db.add_team_player(team_id, first_name, last_name, position, jersey_number)
        except Exception as e:
            logger.error(f"‚ùå Error adding player: {e}")
            return None
    else:
        # –ü—Ä–æ—Å—Ç–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
        for user_teams in memory_teams.values():
            for team in user_teams:
                if team.get("id") == team_id:
                    player = {
                        "first_name": first_name,
                        "last_name": last_name,
                        "position": position,
                        "jersey_number": jersey_number,
                        "joined_at": datetime.now()
                    }
                    team.setdefault("players", []).append(player)
                    return type('Player', (), player)
        return None

async def add_individual_student(coach_telegram_id: int, first_name: str, last_name: str = None,
                                specialization: str = None, level: str = "beginner"):
    """–î–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ"""
    if teams_db:
        try:
            return await teams_db.add_individual_student(
                coach_telegram_id, first_name, last_name, 
                specialization=specialization, level=level
            )
        except Exception as e:
            logger.error(f"‚ùå Error adding student: {e}")
            return None
    else:
        # –ü—Ä–æ—Å—Ç–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
        if coach_telegram_id not in memory_students:
            memory_students[coach_telegram_id] = []

        student = {
            "first_name": first_name,
            "last_name": last_name,
            "specialization": specialization,
            "level": level,
            "created_at": datetime.now()
        }

        memory_students[coach_telegram_id].append(student)
        return type('Student', (), student)

async def get_individual_students(coach_telegram_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö"""
    if teams_db:
        try:
            return await teams_db.get_individual_students(coach_telegram_id)
        except Exception as e:
            logger.error(f"‚ùå Error getting students: {e}")
            return []
    else:
        return memory_students.get(coach_telegram_id, [])

# ============== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò ==============

# –°—Ç–∞—Ä—ã–µ callback_data –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –≤–µ—Ä—Å–∏—è–º–∏
@teams_router.callback_query(F.data.in_(["create_team", "my_teams", "my_students", "teams_main"]))
async def handle_old_callbacks(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö callback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    mapping = {
        "create_team": "create_team",
        "my_teams": "my_teams",
        "my_students": "my_students", 
        "teams_main": "main_menu"
    }

    new_callback = mapping.get(callback.data, "main_menu")
    callback.data = new_callback  # –ü–æ–¥–º–µ–Ω—è–µ–º callback_data

    # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    if new_callback == "create_team":
        await cb_create_team(callback, state)
    elif new_callback == "my_teams":
        await cb_my_teams(callback, state)
    elif new_callback == "my_students":
        await cb_my_students(callback, state)
    else:
        await cb_main_menu(callback, state)

# ============== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ==============

def register_team_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    dp.include_router(teams_router)
    logger.info("‚úÖ Teams module registered successfully")

__all__ = ['register_team_handlers', 'init_teams_database']


# ============== –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ï –ü–û–î–û–ü–ï–ß–ù–´–ï ==============

@teams_router.callback_query(F.data == "students_menu")
async def cb_students_menu(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö"""
    await state.clear()

    students = await get_individual_students(callback.from_user.id)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ", callback_data="add_student")],
        [InlineKeyboardButton(text="üë• –ú–æ–∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–µ", callback_data="my_students")],
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

    await callback.message.edit_text(
        f"üë§ <b>–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–æ–¥–æ–ø–µ—á–Ω—ã–µ</b>\n\n"
        f"üìä –£ –≤–∞—Å {len(students)} –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö\n\n"
        "–ü–æ–¥–æ–ø–µ—á–Ω—ã–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@teams_router.callback_query(F.data == "add_student")
async def cb_add_student(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ"""
    await state.set_state(TeamStates.waiting_student_first_name)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="students_menu")]
    ])

    await callback.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ</b>\n\n"
        "üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@teams_router.message(TeamStates.waiting_student_first_name)
async def process_student_first_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ"""
    first_name = message.text.strip()

    if len(first_name) < 1:
        await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º:")
        return

    if len(first_name) > 100:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    await state.update_data(student_first_name=first_name)
    await state.set_state(TeamStates.waiting_student_last_name)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_student_last_name")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="students_menu")]
    ])

    await message.answer(
        f"‚úÖ –ò–º—è: <b>{first_name}</b>\n\n"
        "üë§ –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@teams_router.message(TeamStates.waiting_student_last_name)
async def process_student_last_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–º–∏–ª–∏–∏ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ"""
    last_name = message.text.strip()

    if len(last_name) > 100:
        await message.answer("‚ùå –§–∞–º–∏–ª–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    await state.update_data(student_last_name=last_name)
    await ask_student_specialization(message, state, is_callback=False)

@teams_router.callback_query(F.data == "skip_student_last_name")
async def cb_skip_student_last_name(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ"""
    await state.update_data(student_last_name="")
    await ask_student_specialization(callback, state, is_callback=True)

async def ask_student_specialization(update, state: FSMContext, is_callback: bool = True):
    """–°–ø—Ä–æ—Å–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é"""
    await state.set_state(TeamStates.waiting_student_specialization)

    data = await state.get_data()
    first_name = data['student_first_name']
    last_name = data.get('student_last_name', '')

    full_name = f"{first_name} {last_name}".strip()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèÉ –ë–µ–≥", callback_data="spec_running")],
        [InlineKeyboardButton(text="üí™ –°–∏–ª–æ–≤—ã–µ", callback_data="spec_strength")],
        [InlineKeyboardButton(text="ü§∏ –ì–∏–º–Ω–∞—Å—Ç–∏–∫–∞", callback_data="spec_gymnastics")],
        [InlineKeyboardButton(text="üèä –ü–ª–∞–≤–∞–Ω–∏–µ", callback_data="spec_swimming")],
        [InlineKeyboardButton(text="ü•ä –ï–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞", callback_data="spec_combat")],
        [InlineKeyboardButton(text="‚öΩ –§—É—Ç–±–æ–ª", callback_data="spec_football")],
        [InlineKeyboardButton(text="üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª", callback_data="spec_basketball")],
        [InlineKeyboardButton(text="üí™ –û–§–ü", callback_data="spec_general")],
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_specialization")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="students_menu")]
    ])

    text = (
        f"‚úÖ –ü–æ–¥–æ–ø–µ—á–Ω—ã–π: <b>{full_name}</b>\n\n"
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:"
    )

    if is_callback:
        await update.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        await update.answer(text, reply_markup=keyboard, parse_mode="HTML")

@teams_router.callback_query(F.data.startswith("spec_"))
@teams_router.callback_query(F.data == "skip_specialization")
async def cb_student_specialization(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ"""
    if callback.data == "skip_specialization":
        specialization = ""
    else:
        spec_mapping = {
            "spec_running": "–ë–µ–≥",
            "spec_strength": "–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
            "spec_gymnastics": "–ì–∏–º–Ω–∞—Å—Ç–∏–∫–∞",
            "spec_swimming": "–ü–ª–∞–≤–∞–Ω–∏–µ",
            "spec_combat": "–ï–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞",
            "spec_football": "–§—É—Ç–±–æ–ª",
            "spec_basketball": "–ë–∞—Å–∫–µ—Ç–±–æ–ª",
            "spec_general": "–û–§–ü"
        }
        specialization = spec_mapping.get(callback.data, "")

    await state.update_data(student_specialization=specialization)
    await ask_student_level(callback, state)

async def ask_student_level(callback: CallbackQuery, state: FSMContext):
    """–°–ø—Ä–æ—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ"""
    await state.set_state(TeamStates.waiting_student_level)

    data = await state.get_data()
    first_name = data['student_first_name']
    last_name = data.get('student_last_name', '')
    specialization = data.get('student_specialization', '')

    full_name = f"{first_name} {last_name}".strip()
    spec_text = f"üéØ <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> {specialization}\n" if specialization else ""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üü¢ –ù–æ–≤–∏—á–æ–∫", callback_data="level_beginner")],
        [InlineKeyboardButton(text="üü° –°—Ä–µ–¥–Ω–∏–π", callback_data="level_intermediate")],
        [InlineKeyboardButton(text="üî¥ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", callback_data="level_advanced")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="students_menu")]
    ])

    await callback.message.edit_text(
        f"‚úÖ –ü–æ–¥–æ–ø–µ—á–Ω—ã–π: <b>{full_name}</b>\n"
        f"{spec_text}\n"
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@teams_router.callback_query(F.data.startswith("level_"))
async def cb_student_level(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ä–æ–≤–Ω—è –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ"""
    level_mapping = {
        "level_beginner": "beginner",
        "level_intermediate": "intermediate",
        "level_advanced": "advanced"
    }

    level = level_mapping.get(callback.data, "beginner")
    data = await state.get_data()

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ –≤ –ë–î
    student = await add_individual_student(
        coach_telegram_id=callback.from_user.id,
        first_name=data['student_first_name'],
        last_name=data.get('student_last_name') or None,
        specialization=data.get('student_specialization') or None,
        level=level
    )

    await state.clear()

    if student:
        full_name = student.first_name
        if student.last_name:
            full_name += f" {student.last_name}"

        level_emojis = {"beginner": "üü¢", "intermediate": "üü°", "advanced": "üî¥"}
        level_names = {"beginner": "–ù–æ–≤–∏—á–æ–∫", "intermediate": "–°—Ä–µ–¥–Ω–∏–π", "advanced": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"}

        spec_text = f"üéØ <b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> {student.specialization}\n" if student.specialization else ""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ", callback_data="add_student")],
            [InlineKeyboardButton(text="üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö", callback_data="my_students")],
            [InlineKeyboardButton(text="üîô –ö –ø–æ–¥–æ–ø–µ—á–Ω—ã–º", callback_data="students_menu")]
        ])

        await callback.message.edit_text(
            f"‚úÖ <b>–ü–æ–¥–æ–ø–µ—á–Ω—ã–π –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"üë§ <b>–ò–º—è:</b> {full_name}\n"
            f"{spec_text}"
            f"üìä <b>–£—Ä–æ–≤–µ–Ω—å:</b> {level_emojis[level]} {level_names[level]}\n"
            f"üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω:</b> {student.created_at.strftime('%d.%m.%Y %H:%M')}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer("‚úÖ –ü–æ–¥–æ–ø–µ—á–Ω—ã–π –¥–æ–±–∞–≤–ª–µ–Ω!")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ", show_alert=True)

# ============== –ú–û–ò –ü–û–î–û–ü–ï–ß–ù–´–ï ==============

@teams_router.callback_query(F.data == "my_students")
async def cb_my_students(callback: CallbackQuery, state: FSMContext):
    """–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö"""
    await state.clear()

    students = await get_individual_students(callback.from_user.id)

    if not students:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ", callback_data="add_student")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="students_menu")]
        ])

        await callback.message.edit_text(
            "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö</b>\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
        return

    students_text = ""
    level_emojis = {"beginner": "üü¢", "intermediate": "üü°", "advanced": "üî¥"}
    spec_emojis = {
        "–ë–µ–≥": "üèÉ", "–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏": "üí™", "–ì–∏–º–Ω–∞—Å—Ç–∏–∫–∞": "ü§∏",
        "–ü–ª–∞–≤–∞–Ω–∏–µ": "üèä", "–ï–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞": "ü•ä", "–§—É—Ç–±–æ–ª": "‚öΩ",
        "–ë–∞—Å–∫–µ—Ç–±–æ–ª": "üèÄ", "–û–§–ü": "üí™"
    }

    for i, student in enumerate(students, 1):
        full_name = student.first_name
        if student.last_name:
            full_name += f" {student.last_name}"

        level_emoji = level_emojis.get(student.level, "")
        spec_emoji = spec_emojis.get(student.specialization, "üë§")

        spec_text = f" ({student.specialization})" if student.specialization else ""
        students_text += f"{i}. {level_emoji} {spec_emoji} {full_name}{spec_text}\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ", callback_data="add_student")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="students_menu")]
    ])

    await callback.message.edit_text(
        f"üë• <b>–ú–æ–∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–µ ({len(students)})</b>\n\n"
        f"{students_text}\n"
        "üü¢ –ù–æ–≤–∏—á–æ–∫ ‚Ä¢ üü° –°—Ä–µ–¥–Ω–∏–π ‚Ä¢ üî¥ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

# ============== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ==============

@teams_router.callback_query(F.data == "stats_menu")
async def cb_stats_menu(callback: CallbackQuery, state: FSMContext):
    """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    await state.clear()

    stats = await get_coach_stats(callback.from_user.id)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

    await callback.message.edit_text(
        f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üèÜ <b>–ö–æ–º–∞–Ω–¥:</b> {stats['teams_count']}\n"
        f"üë• <b>–ò–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö:</b> {stats['team_players_count']}\n"
        f"üë§ <b>–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö:</b> {stats['individual_students_count']}\n\n"
        f"üéØ <b>–í—Å–µ–≥–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤:</b> {stats['total_athletes']}\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã!",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

# ============== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==============

async def get_coach_stats(coach_telegram_id: int) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–Ω–µ—Ä–∞"""
    if teams_db:
        return await teams_db.get_coach_statistics(coach_telegram_id)
    else:
        # Fallback –¥–ª—è —Ä–µ–∂–∏–º–∞ –±–µ–∑ –ë–î
        user_teams = memory_teams.get(coach_telegram_id, [])
        user_students = memory_students.get(coach_telegram_id, [])

        team_players_count = sum(len(team.get("players", [])) for team in user_teams)

        return {
            'teams_count': len(user_teams),
            'team_players_count': team_players_count,
            'individual_students_count': len(user_students),
            'total_athletes': team_players_count + len(user_students)
        }

async def create_team(coach_telegram_id: int, name: str, description: str = "", sport_type: str = "–û–§–ü"):
    """–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É"""
    if teams_db:
        try:
            return await teams_db.create_team(coach_telegram_id, name, description, sport_type)
        except Exception as e:
            logger.error(f"‚ùå Error creating team: {e}")
            return None
    else:
        # Fallback –¥–ª—è —Ä–µ–∂–∏–º–∞ –±–µ–∑ –ë–î
        if coach_telegram_id not in memory_teams:
            memory_teams[coach_telegram_id] = []

        team = {
            "id": len(memory_teams[coach_telegram_id]) + 1,
            "name": name,
            "description": description,
            "sport_type": sport_type,
            "players": [],
            "created_at": datetime.now(),
            "players_count": 0
        }

        memory_teams[coach_telegram_id].append(team)
        return type('Team', (), team)  # Mock –æ–±—ä–µ–∫—Ç

async def get_coach_teams(coach_telegram_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–Ω–µ—Ä–∞"""
    if teams_db:
        try:
            return await teams_db.get_coach_teams(coach_telegram_id)
        except Exception as e:
            logger.error(f"‚ùå Error getting teams: {e}")
            return []
    else:
        return memory_teams.get(coach_telegram_id, [])

async def get_team_by_id(team_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–æ ID"""
    if teams_db:
        try:
            return await teams_db.get_team_by_id(team_id)
        except Exception as e:
            logger.error(f"‚ùå Error getting team: {e}")
            return None
    else:
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏
        for user_teams in memory_teams.values():
            for team in user_teams:
                if team.get("id") == team_id:
                    return type('Team', (), team)
        return None

async def get_team_players(team_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã"""
    if teams_db:
        try:
            return await teams_db.get_team_players(team_id)
        except Exception as e:
            logger.error(f"‚ùå Error getting players: {e}")
            return []
    else:
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏
        for user_teams in memory_teams.values():
            for team in user_teams:
                if team.get("id") == team_id:
                    return team.get("players", [])
        return []

async def add_team_player(team_id: int, first_name: str, last_name: str = None, 
                         position: str = None, jersey_number: int = None):
    """–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É"""
    if teams_db:
        try:
            return await teams_db.add_team_player(team_id, first_name, last_name, position, jersey_number)
        except Exception as e:
            logger.error(f"‚ùå Error adding player: {e}")
            return None
    else:
        # –ü—Ä–æ—Å—Ç–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
        for user_teams in memory_teams.values():
            for team in user_teams:
                if team.get("id") == team_id:
                    player = {
                        "first_name": first_name,
                        "last_name": last_name,
                        "position": position,
                        "jersey_number": jersey_number,
                        "joined_at": datetime.now()
                    }
                    team.setdefault("players", []).append(player)
                    return type('Player', (), player)
        return None

async def add_individual_student(coach_telegram_id: int, first_name: str, last_name: str = None,
                                specialization: str = None, level: str = "beginner"):
    """–î–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ"""
    if teams_db:
        try:
            return await teams_db.add_individual_student(
                coach_telegram_id, first_name, last_name, 
                specialization=specialization, level=level
            )
        except Exception as e:
            logger.error(f"‚ùå Error adding student: {e}")
            return None
    else:
        # –ü—Ä–æ—Å—Ç–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
        if coach_telegram_id not in memory_students:
            memory_students[coach_telegram_id] = []

        student = {
            "first_name": first_name,
            "last_name": last_name,
            "specialization": specialization,
            "level": level,
            "created_at": datetime.now()
        }

        memory_students[coach_telegram_id].append(student)
        return type('Student', (), student)

async def get_individual_students(coach_telegram_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö"""
    if teams_db:
        try:
            return await teams_db.get_individual_students(coach_telegram_id)
        except Exception as e:
            logger.error(f"‚ùå Error getting students: {e}")
            return []
    else:
        return memory_students.get(coach_telegram_id, [])

# ============== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò ==============

# –°—Ç–∞—Ä—ã–µ callback_data –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –≤–µ—Ä—Å–∏—è–º–∏
@teams_router.callback_query(F.data.in_(["create_team", "my_teams", "my_students", "teams_main"]))
async def handle_old_callbacks(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö callback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    mapping = {
        "create_team": "create_team",
        "my_teams": "my_teams",
        "my_students": "my_students", 
        "teams_main": "main_menu"
    }

    new_callback = mapping.get(callback.data, "main_menu")
    callback.data = new_callback  # –ü–æ–¥–º–µ–Ω—è–µ–º callback_data

    # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    if new_callback == "create_team":
        await cb_create_team(callback, state)
    elif new_callback == "my_teams":
        await cb_my_teams(callback, state)
    elif new_callback == "my_students":
        await cb_my_students(callback, state)
    else:
        await cb_main_menu(callback, state)

# ============== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ==============

def register_team_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    dp.include_router(teams_router)
    logger.info("‚úÖ Teams module registered successfully")

__all__ = ['register_team_handlers', 'init_teams_database']

