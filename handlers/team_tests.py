# ===== –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–ú–ê–ù–î–ù–´–ï –¢–ï–°–¢–´ –î–õ–Ø –¢–†–ï–ù–ï–†–û–í - handlers/team_tests.py =====

from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database import db_manager
from utils.validators import validate_test_set_name, validate_test_requirement
# –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
# from utils.formatters import format_test_set_summary, format_test_set_participants
from states.test_set_states import CreateTestSetStates

def register_team_test_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –ú–µ–Ω—é —Ç—Ä–µ–Ω–µ—Ä–∞
    dp.callback_query.register(coach_test_sets_menu, F.data == "coach_test_sets")
    dp.callback_query.register(my_test_sets, F.data == "my_test_sets")
    dp.callback_query.register(create_test_set_start, F.data == "create_test_set")
    dp.callback_query.register(skip_test_set_description, F.data == "skip_test_set_description")
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤
    dp.callback_query.register(cancel_test_set_creation, F.data == "cancel_test_set_creation")
    dp.callback_query.register(set_test_set_visibility, F.data.startswith("visibility_"))
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏ –≤ –Ω–∞–±–æ—Ä–µ
    dp.callback_query.register(add_exercise_to_test_set, F.data == "add_exercise_to_set")
    dp.callback_query.register(search_exercise_for_test_set, F.data == "search_exercise_for_set")
    dp.callback_query.register(browse_categories_for_test_set, F.data == "browse_categories_for_set")
    dp.callback_query.register(show_test_set_category_exercises, F.data.startswith("test_set_cat_"))
    dp.callback_query.register(select_exercise_for_test_set, F.data.startswith("add_to_set_"))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –Ω–∞–±–æ—Ä–µ
    dp.callback_query.register(configure_test_exercise, F.data.startswith("config_test_"))
    dp.callback_query.register(set_exercise_required, F.data.startswith("required_"))
    dp.callback_query.register(finish_test_set_creation, F.data == "finish_test_set")
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–±–æ—Ä–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    dp.callback_query.register(view_test_set_details, F.data.startswith("view_set_"))
    dp.callback_query.register(view_test_set_results, F.data.startswith("results_"))
    dp.callback_query.register(manage_test_set, F.data.startswith("manage_"))

# ===== –ú–ï–ù–Æ –¢–†–ï–ù–ï–†–ê =====
async def coach_test_sets_menu(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–±–æ—Ä–æ–≤ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞"""
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    
    if user['role'] not in ['coach', 'admin']:
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–±–æ—Ä–∞–º–∏ —Ç–µ—Å—Ç–æ–≤!")
        return
    
    try:
        async with db_manager.pool.acquire() as conn:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–∞
            stats = await conn.fetchrow("""
                SELECT 
                    COUNT(*) as total_sets,
                    COUNT(*) FILTER (WHERE visibility = 'public') as public_sets,
                    COUNT(*) FILTER (WHERE is_active = true) as active_sets
                FROM test_sets 
                WHERE created_by = $1
            """, user['id'])
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participant_stats = await conn.fetchrow("""
                SELECT 
                    COUNT(DISTINCT tsp.user_id) as total_participants,
                    COUNT(DISTINCT tsr.participant_id) as active_participants
                FROM test_sets ts
                LEFT JOIN test_set_participants tsp ON ts.id = tsp.test_set_id
                LEFT JOIN test_set_results tsr ON tsp.id = tsr.participant_id
                WHERE ts.created_by = $1
            """, user['id'])
    
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üìä –ú–æ–∏ –Ω–∞–±–æ—Ä—ã —Ç–µ—Å—Ç–æ–≤", callback_data="my_test_sets")
        keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–∞–±–æ—Ä", callback_data="create_test_set")
        keyboard.button(text="üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="coach_test_stats")
        keyboard.button(text="üîç –ü—É–±–ª–∏—á–Ω—ã–µ –Ω–∞–±–æ—Ä—ã", callback_data="public_test_sets")
        keyboard.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        keyboard.adjust(2)
        
        text = f"üë®‚Äçüè´ **–ö–æ–º–∞–Ω–¥–Ω—ã–µ —Ç–µ—Å—Ç—ã - –¢—Ä–µ–Ω–µ—Ä—Å–∫–∞—è –ø–∞–Ω–µ–ª—å**\n\n"
        
        total_sets = stats['total_sets'] or 0
        if total_sets > 0:
            text += f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            text += f"‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –Ω–∞–±–æ—Ä–æ–≤: **{total_sets}**\n"
            text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤: **{stats['active_sets'] or 0}**\n"
            text += f"‚Ä¢ –ü—É–±–ª–∏—á–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤: **{stats['public_sets'] or 0}**\n\n"
            
            text += f"üë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏:**\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: **{participant_stats['total_participants'] or 0}**\n"
            text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É—é—Ç—Å—è: **{participant_stats['active_participants'] or 0}**\n\n"
        else:
            text += f"üÜï **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!**\n\n"
            text += f"–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –Ω–∞–±–æ—Ä—ã —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Å–≤–æ–∏—Ö –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö:\n"
            text += f"‚Ä¢ üéØ –ù–∞–∑–Ω–∞—á–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n"
            text += f"‚Ä¢ üìã –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã\n"
            text += f"‚Ä¢ üë• –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∫–æ–¥—É\n"
            text += f"‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n\n"
        
        text += f"**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**"
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await callback.answer()

async def my_test_sets(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–±–æ—Ä—ã —Ç–µ—Å—Ç–æ–≤ —Ç—Ä–µ–Ω–µ—Ä–∞"""
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    
    try:
        async with db_manager.pool.acquire() as conn:
            test_sets = await conn.fetch("""
                SELECT 
                    ts.*,
                    COUNT(DISTINCT tse.id) as exercises_count,
                    COUNT(DISTINCT tsp.id) as participants_count,
                    COUNT(DISTINCT tsr.id) as results_count
                FROM test_sets ts
                LEFT JOIN test_set_exercises tse ON ts.id = tse.test_set_id
                LEFT JOIN test_set_participants tsp ON ts.id = tsp.test_set_id
                LEFT JOIN test_set_results tsr ON ts.id = tsr.test_set_id
                WHERE ts.created_by = $1 AND ts.is_active = true
                GROUP BY ts.id
                ORDER BY ts.created_at DESC
                LIMIT 10
            """, user['id'])
        
        if test_sets:
            text = f"üìä **–í–∞—à–∏ –Ω–∞–±–æ—Ä—ã —Ç–µ—Å—Ç–æ–≤ ({len(test_sets)}):**\n\n"
            
            keyboard = InlineKeyboardBuilder()
            
            for ts in test_sets:
                status_emoji = "üîí" if ts['visibility'] == 'private' else "üåê"
                
                text += f"{status_emoji} **{ts['name']}**\n"
                text += f"üÜî –ö–æ–¥: `{ts['access_code']}`\n"
                text += f"üìã –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {ts['exercises_count']} ‚Ä¢ üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {ts['participants_count']}\n"
                
                if ts['description']:
                    text += f"üìù _{ts['description'][:60]}{'...' if len(ts['description']) > 60 else ''}_\n"
                
                text += f"üìÖ {ts['created_at'].strftime('%d.%m.%Y')}\n\n"
                
                keyboard.button(
                    text=f"üìä {ts['name'][:25]}{'...' if len(ts['name']) > 25 else ''}", 
                    callback_data=f"view_set_{ts['id']}"
                )
            
            keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="create_test_set")
            keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="coach_test_sets")
            keyboard.adjust(1)
            
        else:
            text = f"üìä **–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–±–æ—Ä–æ–≤ —Ç–µ—Å—Ç–æ–≤**\n\n"
            text += f"–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –Ω–∞–±–æ—Ä –¥–ª—è —Å–≤–æ–∏—Ö –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö!"
            
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–∞–±–æ—Ä", callback_data="create_test_set")
            keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="coach_test_sets")
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await callback.answer()

# ===== –°–û–ó–î–ê–ù–ò–ï –ù–ê–ë–û–†–ê –¢–ï–°–¢–û–í =====
async def create_test_set_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤"""
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    
    if user['role'] not in ['coach', 'admin']:
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞–±–æ—Ä—ã —Ç–µ—Å—Ç–æ–≤!")
        return
    
    await callback.message.edit_text(
        "üìä **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤**\n\n"
        "üéØ **–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤?**\n"
        "‚Ä¢ –°–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö\n"
        "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n"
        "‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
        "üìù **–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤:**\n"
        "_–ù–∞–ø—Ä–∏–º–µ—Ä: \"–û—Ç–±–æ—Ä –≤ —Å–±–æ—Ä–Ω—É—é 2025\" –∏–ª–∏ \"–ë–∞–∑–æ–≤–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞\"_",
        parse_mode="Markdown"
    )
    await state.set_state(CreateTestSetStates.waiting_name)
    await callback.answer()

async def cancel_test_set_creation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ**",
        parse_mode="Markdown"
    )
    await callback.answer()

async def set_test_set_visibility(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤"""
    visibility = callback.data.split("_")[1]  # visibility_private –∏–ª–∏ visibility_public
    await state.update_data(visibility=visibility)
    
    visibility_text = {
        'private': 'üîí **–ü—Ä–∏–≤–∞—Ç–Ω—ã–π** - –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –ø–æ –∫–æ–¥—É',
        'public': 'üåê **–ü—É–±–ª–∏—á–Ω—ã–π** - –≤–∏–¥–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º'
    }
    
    await callback.message.edit_text(
        f"‚úÖ **–í—ã–±—Ä–∞–Ω–∞ –≤–∏–¥–∏–º–æ—Å—Ç—å:** {visibility_text[visibility]}\n\n"
        f"üìù **–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤** (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n"
        f"_–ù–∞–ø—Ä–∏–º–µ—Ä: \"–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–ª—è —Ñ—É—Ç–±–æ–ª–∏—Å—Ç–æ–≤\"_\n\n"
        f"–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:",
        parse_mode="Markdown"
    )
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="skip_test_set_description")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_test_set_creation")
    
    await callback.message.edit_reply_markup(reply_markup=keyboard.as_markup())
    await state.set_state(CreateTestSetStates.waiting_description)
    await callback.answer()

# ===== –î–û–ë–ê–í–õ–ï–ù–ò–ï –£–ü–†–ê–ñ–ù–ï–ù–ò–ô –í –ù–ê–ë–û–† =====
async def add_exercise_to_test_set(callback: CallbackQuery):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data="search_exercise_for_set")
    keyboard.button(text="üìÇ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="browse_categories_for_set")
    keyboard.button(text="üîô –ö —Å–æ–∑–¥–∞–Ω–∏—é –Ω–∞–±–æ—Ä–∞", callback_data="back_to_test_set_creation")
    keyboard.adjust(1)
    
    await callback.message.edit_text(
        "üîç **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:\n\n"
        "üí° **–õ—é–±–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å —Ç–µ—Å—Ç–æ–º!**\n"
        "–í—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è.",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

# ===== –ü–£–°–¢–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò) =====
async def search_exercise_for_test_set(callback: CallbackQuery, state: FSMContext):
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

async def browse_categories_for_test_set(callback: CallbackQuery):
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

async def show_test_set_category_exercises(callback: CallbackQuery, state: FSMContext):
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

async def select_exercise_for_test_set(callback: CallbackQuery, state: FSMContext):
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

async def configure_test_exercise(callback: CallbackQuery, state: FSMContext):
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

async def set_exercise_required(callback: CallbackQuery, state: FSMContext):
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

async def finish_test_set_creation(callback: CallbackQuery, state: FSMContext):
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

async def view_test_set_details(callback: CallbackQuery):
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

async def view_test_set_results(callback: CallbackQuery):
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

async def manage_test_set(callback: CallbackQuery):
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô =====
async def process_test_set_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤"""
    test_set_name = message.text.strip()
    validation = validate_test_set_name(test_set_name)
    
    if not validation['valid']:
        await message.answer(validation['error'])
        return
    
    await state.update_data(name=test_set_name)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π (–ø–æ –∫–æ–¥—É)", callback_data="visibility_private")
    keyboard.button(text="üåê –ü—É–±–ª–∏—á–Ω—ã–π (–¥–ª—è –≤—Å–µ—Ö)", callback_data="visibility_public")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_test_set_creation")
    keyboard.adjust(1)
    
    await message.answer(
        f"‚úÖ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {test_set_name}\n\n"
        f"üëÅÔ∏è **–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–∏–º–æ—Å—Ç—å –Ω–∞–±–æ—Ä–∞:**\n\n"
        f"üîí **–ü—Ä–∏–≤–∞—Ç–Ω—ã–π** - –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É\n"
        f"üåê **–ü—É–±–ª–∏—á–Ω—ã–π** - –≤–∏–¥–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –∫–∞—Ç–∞–ª–æ–≥–µ",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )

async def process_team_test_text_input(message: Message, state: FSMContext):
    current_state = await state.get_state()
    
    if current_state == CreateTestSetStates.waiting_name:
        await process_test_set_name(message, state)
    elif current_state == CreateTestSetStates.waiting_description:
        await process_test_set_description(message, state)  # ‚Üê –î–û–ë–ê–í–ò–¢–¨
    else:
        await message.answer("üöß –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")



async def skip_test_set_description(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é –Ω–∞–±–æ—Ä–∞"""
    await state.update_data(description="")
    await save_test_set_to_database(callback.message, state)
    await callback.answer()

async def process_test_set_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤"""
    description = message.text.strip()
    
    if len(description) > 1000:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(description=description)
    await save_test_set_to_database(message, state)

async def save_test_set_to_database(message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    data = await state.get_data()
    user = await db_manager.get_user_by_telegram_id(message.from_user.id)
    
    try:
        async with db_manager.pool.acquire() as conn:
            test_set_id = await conn.fetchval("""
                INSERT INTO test_sets (name, description, created_by, visibility)
                VALUES ($1, $2, $3, $4)
                RETURNING id
            """, data['name'], data.get('description', ''), user['id'], data['visibility'])
            
            test_set = await conn.fetchrow("""
                SELECT access_code FROM test_sets WHERE id = $1
            """, test_set_id)
        
        visibility_text = "üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π" if data['visibility'] == 'private' else "üåê –ü—É–±–ª–∏—á–Ω—ã–π"
        
        text = f"üéâ **–ù–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!**\n\n"
        text += f"üìä **–ù–∞–∑–≤–∞–Ω–∏–µ:** {data['name']}\n"
        text += f"üëÅÔ∏è **–í–∏–¥–∏–º–æ—Å—Ç—å:** {visibility_text}\n"
        text += f"üÜî **–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞:** `{test_set['access_code']}`\n\n"
        
        if data.get('description'):
            text += f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {data['description']}\n\n"
        
        text += f"üéØ **–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–¥–æ–º `{test_set['access_code']}` —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏!**"
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üìä –ú–æ–∏ –Ω–∞–±–æ—Ä—ã", callback_data="my_test_sets")
        keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        keyboard.adjust(1)
        
        await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤: {e}")


__all__ = [
    'register_team_test_handlers', 
    'process_team_test_text_input',
    'coach_test_sets_menu'
]