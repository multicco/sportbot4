# ===== –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ö–û–ú–ê–ù–î–ù–´–ï –¢–ï–°–¢–´ –î–õ–Ø –ò–ì–†–û–ö–û–í - handlers/player_tests.py =====

from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database import db_manager
from utils.validators import validate_test_data
# –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
# from utils.formatters import format_test_set_for_participant, format_test_result_for_set
from states.test_set_states import JoinTestSetStates, TestExecutionStates

def register_player_test_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    dp.callback_query.register(player_test_sets_menu, F.data == "player_test_sets")
    dp.callback_query.register(join_test_set_start, F.data == "join_test_set")
    dp.callback_query.register(my_assigned_test_sets, F.data == "my_assigned_sets")
    dp.callback_query.register(browse_public_test_sets, F.data == "browse_public_sets")
    
    # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –Ω–∞–±–æ—Ä—É —Ç–µ—Å—Ç–æ–≤
    dp.callback_query.register(confirm_join_test_set, F.data.startswith("confirm_join_"))
    dp.callback_query.register(cancel_join_test_set, F.data == "cancel_join")
    
    # –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
    dp.callback_query.register(view_assigned_test_set, F.data.startswith("assigned_set_"))
    dp.callback_query.register(start_test_from_set, F.data.startswith("start_set_test_"))
    dp.callback_query.register(view_my_test_results, F.data.startswith("my_results_"))

# ===== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –î–õ–Ø –ò–ì–†–û–ö–û–í =====
async def player_test_sets_menu(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–±–æ—Ä–æ–≤ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤"""
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    
    try:
        async with db_manager.pool.acquire() as conn:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            stats = await conn.fetchrow("""
                SELECT 
                    COUNT(DISTINCT tsp.test_set_id) as joined_sets,
                    COUNT(DISTINCT tsr.exercise_id) as completed_tests,
                    COUNT(DISTINCT ts.id) FILTER (WHERE ts.visibility = 'public') as available_public_sets
                FROM test_set_participants tsp
                RIGHT JOIN users u ON u.id = $1
                LEFT JOIN test_set_results tsr ON tsp.id = tsr.participant_id
                LEFT JOIN test_sets ts ON ts.visibility = 'public' AND ts.is_active = true
                WHERE tsp.user_id = $1 OR tsp.user_id IS NULL
            """, user['id'])
    
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üìä –ú–æ–∏ –Ω–∞–±–æ—Ä—ã —Ç–µ—Å—Ç–æ–≤", callback_data="my_assigned_sets")
        keyboard.button(text="üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –ø–æ –∫–æ–¥—É", callback_data="join_test_set")
        keyboard.button(text="üåê –ü—É–±–ª–∏—á–Ω—ã–µ –Ω–∞–±–æ—Ä—ã", callback_data="browse_public_sets")
        keyboard.button(text="üìà –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="my_all_test_results")
        keyboard.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        keyboard.adjust(2)
        
        text = f"üë§ **–ö–æ–º–∞–Ω–¥–Ω—ã–µ —Ç–µ—Å—Ç—ã - –ü–∞–Ω–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞**\n\n"
        
        joined_sets = stats['joined_sets'] or 0
        completed_tests = stats['completed_tests'] or 0
        
        if joined_sets > 0:
            text += f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            text += f"‚Ä¢ –£—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –Ω–∞–±–æ—Ä–∞—Ö: **{joined_sets}**\n"
            text += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: **{completed_tests}**\n\n"
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞–±–æ—Ä—ã
            try:
                async with db_manager.pool.acquire() as conn:
                    active_sets = await conn.fetch("""
                        SELECT ts.name, COUNT(DISTINCT tse.id) as total_tests, 
                               COUNT(DISTINCT tsr.id) as completed_tests
                        FROM test_set_participants tsp
                        JOIN test_sets ts ON tsp.test_set_id = ts.id
                        LEFT JOIN test_set_exercises tse ON ts.id = tse.test_set_id
                        LEFT JOIN test_set_results tsr ON tsp.id = tsr.participant_id AND tse.exercise_id = tsr.exercise_id
                        WHERE tsp.user_id = $1 AND ts.is_active = true
                        GROUP BY ts.id, ts.name
                        LIMIT 3
                    """, user['id'])
                
                if active_sets:
                    text += f"üéØ **–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–±–æ—Ä—ã:**\n"
                    for s in active_sets:
                        progress = f"{s['completed_tests'] or 0}/{s['total_tests']}"
                        text += f"‚Ä¢ {s['name']}: {progress} —Ç–µ—Å—Ç–æ–≤\n"
                    text += "\n"
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        else:
            text += f"üÜï **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!**\n\n"
            text += f"üìã **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n"
            text += f"‚Ä¢ –¢—Ä–µ–Ω–µ—Ä —Å–æ–∑–¥–∞–µ—Ç –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤\n"
            text += f"‚Ä¢ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç–µ—Å—å –ø–æ –∫–æ–¥—É\n"
            text += f"‚Ä¢ –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã\n"
            text += f"‚Ä¢ –¢—Ä–µ–Ω–µ—Ä –≤–∏–¥–∏—Ç –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\n"
        
        available_public = stats['available_public_sets'] or 0
        if available_public > 0:
            text += f"üåê **–î–æ—Å—Ç—É–ø–Ω–æ –ø—É–±–ª–∏—á–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤:** {available_public}\n\n"
        
        text += f"**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**"
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await callback.answer()

# ===== –ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–ï –ö –ù–ê–ë–û–†–£ –¢–ï–°–¢–û–í =====
async def join_test_set_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –Ω–∞–±–æ—Ä—É —Ç–µ—Å—Ç–æ–≤"""
    await callback.message.edit_text(
        "üîó **–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –Ω–∞–±–æ—Ä—É —Ç–µ—Å—Ç–æ–≤**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞–±–æ—Ä—É —Ç–µ—Å—Ç–æ–≤:\n"
        "_–ù–∞–ø—Ä–∏–º–µ—Ä: `TS-AB12` –∏–ª–∏ `TS-XY-98`_\n\n"
        "üí° **–ì–¥–µ –≤–∑—è—Ç—å –∫–æ–¥:**\n"
        "‚Ä¢ –£ –≤–∞—à–µ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞\n"
        "‚Ä¢ –í –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –∫–æ–º–∞–Ω–¥—ã\n"
        "‚Ä¢ –ù–∞ –¥–æ—Å–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å–ø–æ—Ä—Ç–∑–∞–ª–∞",
        parse_mode="Markdown"
    )
    await state.set_state(JoinTestSetStates.waiting_access_code)
    await callback.answer()

# ===== –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –û–°–¢–ê–õ–¨–ù–´–• –§–£–ù–ö–¶–ò–ô =====
async def confirm_join_test_set(callback: CallbackQuery, state: FSMContext):
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

async def cancel_join_test_set(callback: CallbackQuery, state: FSMContext):
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

async def my_assigned_test_sets(callback: CallbackQuery):
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

async def browse_public_test_sets(callback: CallbackQuery):
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

async def view_assigned_test_set(callback: CallbackQuery):
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

async def start_test_from_set(callback: CallbackQuery, state: FSMContext):
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

async def view_my_test_results(callback: CallbackQuery):
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô =====
async def process_player_test_text_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤"""
    current_state = await state.get_state()
    
    if current_state == JoinTestSetStates.waiting_access_code:
        await message.answer("üöß –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    else:
        await message.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

__all__ = [
    'register_player_test_handlers',
    'process_player_test_text_input',
    'player_test_sets_menu'
]