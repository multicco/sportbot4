# handlers/player_workouts.py

import logging
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from states.workout_assignment_states import WorkoutPlayerStates
#from database.teams_database import teams_database
#from handlers.teams import teams_db
logger = logging.getLogger(__name__)
from handlers.teams import  teams_db
player_workouts_router = Router(name="player_workouts")
logger.info("–ò–º–ø–æ—Ä—Ç teams_db –≤ player_workouts.py: %s", teams_db)


@player_workouts_router.message(Command("myworkouts"))
@player_workouts_router.callback_query(F.data == "my_workouts")
async def show_my_workouts(update: Message | CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–≥—Ä–æ–∫–∞"""
    await state.clear()
    
    if isinstance(update, CallbackQuery):
        telegram_id = update.from_user.id
        message = update.message
        is_callback = True
    else:
        telegram_id = update.from_user.id
        message = update
        is_callback = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ teams_db
    if teams_db is None:
        logger.error("teams_db –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ show_my_workouts")
        text = (
            "<b>‚ùå –û—à–∏–±–∫–∞</b>\n\n"
            "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        
        if is_callback:
            await message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")
            await update.answer()
        else:
            await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–≥—Ä–æ–∫–∞
    try:
        workouts = await teams_db.get_player_workouts(telegram_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è telegram_id {telegram_id}: {e}", exc_info=True)
        text = (
            "<b>‚ùå –û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        
        if is_callback:
            await message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")
            await update.answer()
        else:
            await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")
        return
    
    if not workouts:
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        
        text = (
            "<b>üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</b>\n\n"
            "–¢—Ä–µ–Ω–µ—Ä –Ω–∞–∑–Ω–∞—á–∏—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∏ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å."
        )
        
        if is_callback:
            await message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")
            await update.answer()
        else:
            await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    new_workouts = [w for w in workouts if w['status'] == 'pending']
    in_progress = [w for w in workouts if w['status'] == 'in_progress']
    completed = [w for w in workouts if w['status'] == 'completed']
    
    text = "<b>üí™ –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</b>\n\n"
    
    keyboard = InlineKeyboardBuilder()
    
    # –ù–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    if new_workouts:
        text += f"<b>üî¥ –ù–æ–≤—ã–µ ({len(new_workouts)}):</b>\n"
        for w in new_workouts:
            deadline_text = ""
            if w['deadline']:
                deadline_text = f" ‚è∞ –î–æ {w['deadline'].strftime('%d.%m')}"
            
            text += f"  ‚Ä¢ {w['workout_name']} ({w['team_name']}){deadline_text}\n"
            keyboard.button(
                text=f"üí™ {w['workout_name']}",
                callback_data=f"start_workout_{w['workout_id']}"
            )
        text += "\n"
    
    # –í –ø—Ä–æ—Ü–µ—Å—Å–µ
    if in_progress:
        text += f"<b>‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ ({len(in_progress)}):</b>\n"
        for w in in_progress:
            text += f"  ‚Ä¢ {w['workout_name']} ({w['team_name']})\n"
            keyboard.button(
                text=f"‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å: {w['workout_name']}",
                callback_data=f"continue_workout_{w['workout_id']}"
            )
        text += "\n"
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)
    if completed:
        text += f"<b>‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ ({len(completed)}):</b>\n"
        for w in completed[:5]:
            rpe_text = f" (RPE: {w['rpe']:.1f})" if w['rpe'] else ""
            completed_date = w['completed_at'].strftime('%d.%m') if w['completed_at'] else ""
            text += f"  ‚Ä¢ {w['workout_name']}{rpe_text} - {completed_date}\n"
    
    keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    keyboard.adjust(1)
    
    if is_callback:
        await message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")
        await update.answer()
    else:
        await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")

@player_workouts_router.callback_query(F.data.startswith("start_workout_"))
async def start_workout(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"""
    workout_id = int(callback.data.split("_")[-1])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    success = await teams_db.update_player_workout_status(
        telegram_id=callback.from_user.id,
        workout_id=workout_id,
        status='in_progress'
    )
    
    if not success:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data=f"finish_workout_{workout_id}")
    keyboard.button(text="üìã –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="my_workouts")
    keyboard.adjust(1)
    
    await callback.message.edit_text(
        f"üí™ **–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞—á–∞—Ç–∞!**\n\n"
        f"–£–¥–∞—á–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏! –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ \"–ó–∞–≤–µ—Ä—à–∏—Ç—å\".\n\n"
        f"üí° *–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ —à–∫–∞–ª–µ RPE –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è*",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer("‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞—á–∞—Ç–∞!")

@player_workouts_router.callback_query(F.data.startswith("finish_workout_"))
async def finish_workout(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å RPE"""
    workout_id = int(callback.data.split("_")[-1])
    
    await state.set_state(WorkoutPlayerStates.rating_rpe)
    await state.update_data(workout_id=workout_id)
    
    keyboard = InlineKeyboardBuilder()
    for i in range(1, 11):
        emoji = "üü¢" if i <= 3 else "üü°" if i <= 6 else "üü†" if i <= 8 else "üî¥"
        keyboard.button(text=f"{emoji} {i}", callback_data=f"rpe_{i}")
    keyboard.button(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="rpe_skip")
    keyboard.adjust(5, 5, 1)
    
    await callback.message.edit_text(
        "üìä **–û—Ü–µ–Ω–∏—Ç–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏**\n\n"
        "**–®–∫–∞–ª–∞ RPE (Rate of Perceived Exertion):**\n\n"
        "1-3 üü¢ –õ–µ–≥–∫–æ\n"
        "4-6 üü° –£–º–µ—Ä–µ–Ω–Ω–æ\n"
        "7-8 üü† –¢—è–∂–µ–ª–æ\n"
        "9-10 üî¥ –ú–∞–∫—Å–∏–º—É–º\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 10:",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

@player_workouts_router.callback_query(F.data.startswith("rpe_"))
async def process_rpe_rating(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ü–µ–Ω–∫—É RPE"""
    data = await state.get_data()
    workout_id = data.get('workout_id')
    
    if callback.data == "rpe_skip":
        rpe = None
        rpe_text = "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    else:
        rpe = float(callback.data.split("_")[-1])
        rpe_text = f"{rpe}/10"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å RPE
    success = await teams_db.update_player_workout_status(
        telegram_id=callback.from_user.id,
        workout_id=workout_id,
        status='completed',
        rpe=rpe
    )
    
    await state.clear()
    
    if success:
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üìã –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="my_workouts")
        keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        keyboard.adjust(1)
        
        await callback.message.edit_text(
            f"üéâ **–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
            f"‚úÖ –°—Ç–∞—Ç—É—Å: –í—ã–ø–æ–ª–Ω–µ–Ω–æ\n"
            f"üìä RPE: {rpe_text}\n\n"
            f"–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üí™",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        await callback.answer("‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

def get_player_workouts_router():
    """–≠–∫—Å–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–∞"""
    return player_workouts_router
