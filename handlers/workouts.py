# ===== –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô handlers/workouts.py –° –ò–ù–¢–ï–ì–†–ê–¶–ò–ï–ô –°–¢–ê–†–û–ì–û –ö–û–î–ê =====
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database import db_manager
from states.workout_states import CreateWorkoutStates

# ===== –û–ë–ù–û–í–õ–ï–ù–ù–´–ï FSM –°–û–°–¢–û–Ø–ù–ò–Ø =====
# –í states/workout_states.py –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å:
"""
from aiogram.fsm.state import State, StatesGroup

class CreateWorkoutStates(StatesGroup):
    waiting_name = State()
    waiting_description = State()  
    selecting_blocks = State()
    adding_block_description = State()
    adding_exercises = State()
    configuring_exercise = State()
"""

# ===== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –¢–†–ï–ù–ò–†–û–í–û–ö =====
async def workouts_menu(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    
    try:
        async with db_manager.pool.acquire() as conn:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            stats = await conn.fetchrow("""
                SELECT COUNT(*) as total_workouts,
                COUNT(*) FILTER (WHERE created_at > NOW() - INTERVAL '7 days') as recent_workouts
                FROM workouts WHERE created_by = $1
            """, user['id'])
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üèãÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="my_workouts")
        keyboard.button(text="üîç –ù–∞–π—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="find_workout")
        keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="create_workout")
        keyboard.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="workout_stats")
        keyboard.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        keyboard.adjust(2)
        
        text = f"üèãÔ∏è **–°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫**\n\n"
        
        total_workouts = stats['total_workouts'] or 0
        if total_workouts > 0:
            text += f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: **{total_workouts}**\n"
            text += f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: **{stats['recent_workouts'] or 0}**\n\n"
        else:
            text += f"üÜï **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!**\n\n"
            text += f"üí™ **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
            text += f"‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
            text += f"‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä—É–π—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –±–ª–æ–∫–∏\n"
            text += f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
            text += f"‚Ä¢ –î–µ–ª–∏—Ç–µ—Å—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏ —Å –∫–æ–º–∞–Ω–¥–æ–π\n\n"
        
        text += f"**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**"
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await callback.answer()

# ===== –ú–û–ò –¢–†–ï–ù–ò–†–û–í–ö–ò =====
async def my_workouts(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    
    try:
        async with db_manager.pool.acquire() as conn:
            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            workouts = await conn.fetch("""
                SELECT w.*, COUNT(DISTINCT we.id) as exercises_count
                FROM workouts w
                LEFT JOIN workout_exercises we ON w.id = we.workout_id
                WHERE w.created_by = $1
                GROUP BY w.id
                ORDER BY w.created_at DESC
                LIMIT 10
            """, user['id'])
        
        if workouts:
            text = f"üèãÔ∏è **–í–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ({len(workouts)}):**\n\n"
            
            keyboard = InlineKeyboardBuilder()
            
            for workout in workouts:
                text += f"üí™ **{workout['name']}**\n"
                text += f"üìä –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {workout['exercises_count']} ‚Ä¢ "
                text += f"ID: `{workout.get('unique_id', workout['id'])}`\n"
                
                if workout['description']:
                    text += f"üìù _{workout['description'][:50]}{'...' if len(workout['description']) > 50 else ''}_\n"
                
                text += f"üìÖ {workout['created_at'].strftime('%d.%m.%Y')}\n\n"
                
                keyboard.button(
                    text=f"üí™ {workout['name'][:20]}{'...' if len(workout['name']) > 20 else ''}",   
                    callback_data=f"view_workout_{workout['id']}"
                )
            
            keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é", callback_data="create_workout")
            keyboard.button(text="üîô –ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º", callback_data="workouts_menu")
            keyboard.adjust(1)
            
        else:
            text = f"üèãÔ∏è **–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫**\n\n"
            text += f"–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!\n\n"
            text += f"üí° **–ò–¥–µ–∏ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:**\n"
            text += f"‚Ä¢ –°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤–µ—Ä—Ö–∞\n"
            text += f"‚Ä¢ –ö–∞—Ä–¥–∏–æ + —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ\n"
            text += f"‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞\n"
            text += f"‚Ä¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–æ–º–∞"
            
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="create_workout")
            keyboard.button(text="üîç –ù–∞–π—Ç–∏ –≥–æ—Ç–æ–≤—É—é", callback_data="find_workout")
            keyboard.button(text="üîô –ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º", callback_data="workouts_menu")
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await callback.answer()

# ===== –°–û–ó–î–ê–ù–ò–ï –¢–†–ï–ù–ò–†–û–í–ö–ò –° –ë–õ–û–ö–ê–ú–ò =====
async def create_workout(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    await callback.message.edit_text(
        "üèãÔ∏è **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n"
        "_–ù–∞–ø—Ä–∏–º–µ—Ä: \"–°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤–µ—Ä—Ö–∞\" –∏–ª–∏ \"–û–§–ü –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤\"_",
        parse_mode="Markdown"
    )
    await state.set_state(CreateWorkoutStates.waiting_name)
    await callback.answer()

async def process_workout_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    workout_name = message.text.strip()
    
    if len(workout_name) < 3:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
        return
    
    if len(workout_name) > 100:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(name=workout_name)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="skip_description")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_workout_creation")
    
    await message.answer(
        f"‚úÖ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {workout_name}\n\n"
        f"üìù **–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏** (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n"
        f"_–ù–∞–ø—Ä–∏–º–µ—Ä: '–°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤–µ—Ä—Ö–∞ —Ç–µ–ª–∞'_\n\n"
        f"–ò–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥:",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await state.set_state(CreateWorkoutStates.waiting_description)

async def process_workout_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    description = message.text.strip()
    await state.update_data(description=description)
    await show_block_selection_menu(message, state)

async def skip_description(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –±–ª–æ–∫–∞–º"""
    await state.update_data(description="")
    await show_block_selection_menu(callback.message, state)
    await callback.answer()

# ===== –ú–ï–ù–Æ –í–´–ë–û–†–ê –ë–õ–û–ö–û–í =====
async def show_block_selection_menu(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –±–ª–æ–∫–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    data = await state.get_data()
    selected_blocks = data.get('selected_blocks', {})
    
    text = f"üèóÔ∏è **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {data['name']}**\n\n"
    text += f"üìã **–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫–∏ –¥–ª—è –≤–∞—à–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:**\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞
    blocks = {
        'warmup': 'üî• –†–∞–∑–º–∏–Ω–∫–∞',
        'nervous_prep': '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã', 
        'main': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å',
        'cooldown': 'üßò –ó–∞–º–∏–Ω–∫–∞'
    }
    
    for block_key, block_name in blocks.items():
        status = "‚úÖ" if block_key in selected_blocks else "‚≠ï"
        text += f"{status} **{block_name}**"
        if block_key in selected_blocks:
            exercises_count = len(selected_blocks[block_key].get('exercises', []))
            text += f" ({exercises_count} —É–ø—Ä.)"
            if selected_blocks[block_key].get('description'):
                text += f"\n   _üìù {selected_blocks[block_key]['description'][:50]}..._"
        text += "\n\n"
    
    keyboard = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞
    for block_key, block_name in blocks.items():
        action = "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å" if block_key in selected_blocks else "‚ûï –î–æ–±–∞–≤–∏—Ç—å"
        keyboard.button(
            text=f"{action} {block_name.split(' ', 1)}", 
            callback_data=f"select_block_{block_key}"
        )
    
    # –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
    if selected_blocks:
        keyboard.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="finish_workout_creation")
    
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_workout_creation")
    keyboard.adjust(2)
    
    try:
        await message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
    except:
        await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
    
    await state.set_state(CreateWorkoutStates.selecting_blocks)

# ===== –í–´–ë–û–† –ë–õ–û–ö–ê =====
async def select_workout_block(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–ª–æ–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–∫—É –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ block_key
    print(f"üîç DEBUG: callback.data = '{callback.data}'")
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ callback_data
    parts = callback.data.split("_")
    print(f"üîç DEBUG: split parts = {parts}")
    
    if len(parts) < 3:
        print("‚ùå ERROR: –ù–µ–ø–æ–ª–Ω—ã–π callback_data")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏")
        return
    
    # –ë–µ—Ä–µ–º –∏–º–µ–Ω–Ω–æ —Ç—Ä–µ—Ç—å—é —á–∞—Å—Ç—å –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
    block_key = parts[2]
    print(f"üîç DEBUG: block_key = '{block_key}' (—Ç–∏–ø: {type(block_key)})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ block_key - —Å—Ç—Ä–æ–∫–∞
    if not isinstance(block_key, str):
        print(f"‚ùå ERROR: block_key –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –ø–æ–ª—É—á–µ–Ω {type(block_key)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ block_key –Ω–µ –ø—É—Å—Ç–æ–π
    if not block_key or block_key == "":
        print("‚ùå ERROR: –ü—É—Å—Ç–æ–π block_key")
        await callback.answer("‚ùå –ü—É—Å—Ç–æ–π –∫–ª—é—á –±–ª–æ–∫–∞")
        return
    
    block_info = {
        'warmup': {
            'name': 'üî• –†–∞–∑–º–∏–Ω–∫–∞',
            'description': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–ª–∞ –∫ –Ω–∞–≥—Ä—É–∑–∫–µ, —Ä–∞–∑–æ–≥—Ä–µ–≤ –º—ã—à—Ü –∏ —Å—É—Å—Ç–∞–≤–æ–≤',
            'examples': '–õ–µ–≥–∫–æ–µ –∫–∞—Ä–¥–∏–æ, –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞, —Å—É—Å—Ç–∞–≤–Ω–∞—è –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞'
        },
        'nervous_prep': {
            'name': '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã',
            'description': '–ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π',
            'examples': '–í–∑—Ä—ã–≤–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è, –∞–∫—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –ø–ª–∏–æ–º–µ—Ç—Ä–∏–∫–∞'
        },
        'main': {
            'name': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å',
            'description': '–ì–ª–∞–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞',
            'examples': '–û—Å–Ω–æ–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, —Å–∏–ª–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã'
        },
        'cooldown': {
            'name': 'üßò –ó–∞–º–∏–Ω–∫–∞',
            'description': '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
            'examples': '–°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞, –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ'
        }
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ block_key —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ
    if block_key not in block_info:
        print(f"‚ùå ERROR: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π block_key = '{block_key}'")
        available_keys = list(block_info.keys())
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: {available_keys}")
        await callback.answer(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–ª–æ–∫: {block_key}")
        return
    
    info = block_info[block_key]
    await state.update_data(current_block=block_key)
    
    text = f"üìã **{info['name']}**\n\n"
    text += f"**–û–ø–∏—Å–∞–Ω–∏–µ:**\n{info['description']}\n\n"
    text += f"**–ü—Ä–∏–º–µ—Ä—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:**\n{info['examples']}\n\n"
    text += f"**–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º –±–ª–æ–∫–æ–º?**"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìù –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–∫–∞", callback_data="add_block_description")
    keyboard.button(text="‚è≠Ô∏è –°—Ä–∞–∑—É –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º", callback_data="skip_block_description")
    keyboard.button(text="üóëÔ∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –±–ª–æ–∫", callback_data="skip_entire_block")
    keyboard.button(text="üîô –ö –≤—ã–±–æ—Ä—É –±–ª–æ–∫–æ–≤", callback_data="back_to_blocks")
    keyboard.adjust(1)
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

# ===== –û–ü–ò–°–ê–ù–ò–ï –ë–õ–û–ö–ê =====
async def add_block_description(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –±–ª–æ–∫–∞"""
    data = await state.get_data()
    block_key = data.get('current_block')
    
    block_names = {
        'warmup': 'üî• –†–∞–∑–º–∏–Ω–∫–∞',
        'nervous_prep': '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã',
        'main': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å', 
        'cooldown': 'üßò –ó–∞–º–∏–Ω–∫–∞'
    }
    
    await callback.message.edit_text(
        f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–∫–∞: {block_names[block_key]}**\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞:\n"
        f"_–ù–∞–ø—Ä–∏–º–µ—Ä: \"10 –º–∏–Ω—É—Ç –ª–µ–≥–∫–æ–≥–æ –∫–∞—Ä–¥–∏–æ + —Å—É—Å—Ç–∞–≤–Ω–∞—è —Ä–∞–∑–º–∏–Ω–∫–∞\"_\n\n"
        f"–ò–ª–∏ –æ–ø–∏—à–∏—Ç–µ —Ü–µ–ª–∏ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞.",
        parse_mode="Markdown"
    )
    await state.set_state(CreateWorkoutStates.adding_block_description)
    await callback.answer()

async def skip_block_description(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –æ–ø–∏—Å–∞–Ω–∏—è –±–ª–æ–∫–∞"""
    await state.update_data(current_block_description="")
    await show_block_exercises_menu(callback.message, state)
    await callback.answer()

async def skip_entire_block(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –≤—Å–µ–≥–æ –±–ª–æ–∫–∞"""
    await show_block_selection_menu(callback.message, state)
    await callback.answer()

async def back_to_blocks(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –±–ª–æ–∫–æ–≤"""
    await show_block_selection_menu(callback.message, state)
    await callback.answer()

# ===== –ú–ï–ù–Æ –£–ü–†–ê–ñ–ù–ï–ù–ò–ô –ë–õ–û–ö–ê =====
async def show_block_exercises_menu(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –±–ª–æ–∫"""
    data = await state.get_data()
    block_key = data.get('current_block')
    selected_blocks = data.get('selected_blocks', {})
    current_block_data = selected_blocks.get(block_key, {'exercises': [], 'description': data.get('current_block_description', '')})
    
    block_names = {
        'warmup': 'üî• –†–∞–∑–º–∏–Ω–∫–∞',
        'nervous_prep': '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã',
        'main': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å',
        'cooldown': 'üßò –ó–∞–º–∏–Ω–∫–∞'
    }
    
    exercises = current_block_data['exercises']
    
    text = f"üèãÔ∏è **{block_names[block_key]}**\n\n"
    
    if current_block_data['description']:
        text += f"üìù _{current_block_data['description']}_\n\n"
    
    if exercises:
        text += f"**üìã –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –±–ª–æ–∫–µ: {len(exercises)}**\n"
        for i, ex in enumerate(exercises, 1):
            text += f"{i}. {ex['name']} - {ex['sets']}√ó{ex['reps_min']}-{ex['reps_max']}"
            if ex.get('one_rm_percent'):
                text += f" ({ex['one_rm_percent']}% 1–ü–ú)"
            text += "\n"
        text += "\n"
    
    text += "‚ûï **–î–æ–±–∞–≤—å—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –±–ª–æ–∫:**"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîç –ù–∞–π—Ç–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", callback_data="find_exercise_for_block")
    keyboard.button(text="üìÇ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="browse_categories_for_block")
    
    if exercises:
        keyboard.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–ª–æ–∫", callback_data="finish_current_block")
        keyboard.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ", callback_data="remove_last_block_exercise")
    else:
        keyboard.button(text="‚úÖ –ü—É—Å—Ç–æ–π –±–ª–æ–∫", callback_data="finish_current_block")
    
    keyboard.button(text="üîô –ö –≤—ã–±–æ—Ä—É –±–ª–æ–∫–æ–≤", callback_data="back_to_blocks")
    keyboard.adjust(2)
    
    try:
        await message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
    except:
        await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
    
    await state.set_state(CreateWorkoutStates.adding_exercises)

# ===== –ó–ê–í–ï–†–®–ï–ù–ò–ï –ë–õ–û–ö–ê =====
async def finish_current_block(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞"""
    data = await state.get_data()
    block_key = data.get('current_block')
    selected_blocks = data.get('selected_blocks', {})
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–ª–æ–∫
    current_block_data = selected_blocks.get(block_key, {'exercises': [], 'description': ''})
    current_block_data['description'] = data.get('current_block_description', '')
    selected_blocks[block_key] = current_block_data
    
    await state.update_data(selected_blocks=selected_blocks)
    await callback.answer("‚úÖ –ë–ª–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    await show_block_selection_menu(callback.message, state)

# ===== –ü–û–ò–°–ö –£–ü–†–ê–ñ–ù–ï–ù–ò–ô –î–õ–Ø –ë–õ–û–ö–û–í =====
async def find_exercise_for_block(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –±–ª–æ–∫–∞"""
    await callback.message.edit_text(
        "üîç **–ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –±–ª–æ–∫–∞**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n"
        "_–ù–∞–ø—Ä–∏–º–µ—Ä: –∂–∏–º, –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è, –ø–ª–∞–Ω–∫–∞, —Ä–∞—Å—Ç—è–∂–∫–∞_",
        parse_mode="Markdown"
    )
    await state.set_state("searching_exercise_for_block")
    await callback.answer()

async def handle_block_exercise_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –±–ª–æ–∫–∞"""
    search_term = message.text.lower()
    
    try:
        async with db_manager.pool.acquire() as conn:
            exercises = await conn.fetch("""
                SELECT id, name, category, muscle_group 
                FROM exercises 
                WHERE LOWER(name) LIKE $1 
                   OR LOWER(muscle_group) LIKE $1
                ORDER BY name
                LIMIT 10
            """, f"%{search_term}%")
        
        if exercises:
            text = f"üîç **–ù–∞–π–¥–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {len(exercises)}**\n\n"
            keyboard = InlineKeyboardBuilder()
            
            for ex in exercises:
                keyboard.button(
                    text=f"{ex['name']} ({ex['muscle_group']})", 
                    callback_data=f"add_block_ex_{ex['id']}"
                )
            
            keyboard.button(text="üîô –ö –±–ª–æ–∫—É", callback_data="back_to_block_exercises")
            keyboard.adjust(1)
            
            await message.answer(
                text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
            await state.set_state(CreateWorkoutStates.adding_exercises)
        else:
            await message.answer(f"‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

async def browse_categories_for_block(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –±–ª–æ–∫–∞"""
    try:
        async with db_manager.pool.acquire() as conn:
            categories = await conn.fetch("SELECT DISTINCT category FROM exercises ORDER BY category")
        
        keyboard = InlineKeyboardBuilder()
        for cat in categories:
            keyboard.button(
                text=f"üìÇ {cat['category']}", 
                callback_data=f"block_cat_{cat['category']}"
            )
        keyboard.button(text="üîô –ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º –±–ª–æ–∫–∞", callback_data="back_to_block_exercises")
        keyboard.adjust(2)
        
        await callback.message.edit_text(
            "üìÇ **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:**",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await callback.answer()

async def show_block_category_exercises(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±–ª–æ–∫–∞"""
    category = callback.data[10:]  # –£–±–∏—Ä–∞–µ–º "block_cat_"
    
    try:
        async with db_manager.pool.acquire() as conn:
            exercises = await conn.fetch(
                "SELECT id, name, muscle_group FROM exercises WHERE category = $1 ORDER BY name",
                category
            )
        
        if exercises:
            text = f"üìÇ **{category} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:**\n\n"
            keyboard = InlineKeyboardBuilder()
            
            for ex in exercises:
                keyboard.button(
                    text=f"{ex['name']} ({ex['muscle_group']})", 
                    callback_data=f"add_block_ex_{ex['id']}"
                )
            
            keyboard.button(text="üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="browse_categories_for_block")
            keyboard.adjust(1)
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
        else:
            await callback.message.edit_text(f"‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await callback.answer()

async def back_to_block_exercises(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º –±–ª–æ–∫–∞"""
    await show_block_exercises_menu(callback.message, state)
    await callback.answer()

# ===== –î–û–ë–ê–í–õ–ï–ù–ò–ï –£–ü–†–ê–ñ–ù–ï–ù–ò–Ø –í –ë–õ–û–ö =====
async def add_exercise_to_block(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –±–ª–æ–∫"""
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º exercise_id
    print(f"üîç DEBUG: callback.data = '{callback.data}'")
    
    parts = callback.data.split("_")
    print(f"üîç DEBUG: split parts = {parts}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∞—Å—Ç–µ–π (add_block_ex_123 = 4 —á–∞—Å—Ç–∏)
    if len(parts) < 4:
        print("‚ùå ERROR: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∞—Å—Ç–µ–π –≤ callback_data")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")
        return
    
    try:
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ: –±–µ—Ä–µ–º 4-–π —ç–ª–µ–º–µ–Ω—Ç (–∏–Ω–¥–µ–∫—Å 3) –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
        exercise_id = int(parts[3])  # add_block_ex_123 -> parts[3] = '123'
        print(f"üîç DEBUG: exercise_id = {exercise_id}")
    except ValueError as e:
        print(f"‚ùå ERROR: –ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å '{parts[3]}' –≤ int: {e}")
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")
        return
    
    try:
        async with db_manager.pool.acquire() as conn:
            exercise = await conn.fetchrow(
                "SELECT id, name, category, muscle_group FROM exercises WHERE id = $1", 
                exercise_id
            )
        
        if exercise:
            await state.update_data(
                current_exercise_id=exercise_id,
                current_exercise_name=exercise['name']
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
            text = f"‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –±–ª–æ–∫–∞**\n\n"
            text += f"üí™ **{exercise['name']}**\n"
            text += f"üìÇ {exercise['category']} ‚Ä¢ {exercise['muscle_group']}\n\n"
            text += f"**–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**"
            
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üèãÔ∏è –ü—Ä–æ—Å—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", callback_data="simple_block_config")
            keyboard.button(text="üìä –° –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏ –æ—Ç 1–ü–ú", callback_data="advanced_block_config")
            keyboard.button(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="back_to_block_exercises")
            keyboard.adjust(1)
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
        else:
            await callback.message.edit_text("‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
    except Exception as e:
        print(f"‚ùå ERROR: –û—à–∏–±–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await callback.answer()

async def advanced_block_config(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏ –æ—Ç 1–ü–ú"""
    data = await state.get_data()
    exercise_name = data.get('current_exercise_name', '')
    exercise_id = data.get('current_exercise_id')
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    
    try:
        async with db_manager.pool.acquire() as conn:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç 1–ü–ú –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
            user_1rm = await conn.fetchrow("""
                SELECT weight FROM onerepmax 
                WHERE user_id = $1 AND exercise_id = $2 
                ORDER BY tested_at DESC LIMIT 1
            """, user['id'], exercise_id)
        
        text = f"üìä **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏ –æ—Ç 1–ü–ú**\n\n"
        text += f"üí™ **{exercise_name}**\n\n"
        
        if user_1rm:
            current_1rm = float(user_1rm['weight'])
            text += f"üèÜ **–í–∞—à —Ç–µ–∫—É—â–∏–π 1–ü–ú:** {current_1rm} –∫–≥\n\n"
            text += f"üìã **–ì–æ—Ç–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:**\n"
            text += f"‚Ä¢ **4 6 8 80** - 4√ó6-8 —Å 80% ({round(current_1rm * 0.8, 1)} –∫–≥)\n"
            text += f"‚Ä¢ **3 8 12 70** - 3√ó8-12 —Å 70% ({round(current_1rm * 0.7, 1)} –∫–≥)\n"
            text += f"‚Ä¢ **5 3 5 85** - 5√ó3-5 —Å 85% ({round(current_1rm * 0.85, 1)} –∫–≥)\n\n"
            text += f"**–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç:**\n"
            text += f"_–§–æ—Ä–º–∞—Ç: –ø–æ–¥—Ö–æ–¥—ã –ø–æ–≤—Ç–æ—Ä_–º–∏–Ω –ø–æ–≤—Ç–æ—Ä_–º–∞–∫—Å –ø—Ä–æ—Ü–µ–Ω—Ç_\n"
            text += f"_–ù–∞–ø—Ä–∏–º–µ—Ä: 4 6 8 80_"
        else:
            text += f"‚ùå **–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ 1–ü–ú –¥–ª—è —ç—Ç–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è**\n\n"
            text += f"**–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**\n"
            text += f"1. –ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç 1–ü–ú –¥–ª—è —ç—Ç–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è\n"
            text += f"2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É\n\n"
            
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üî¨ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç 1–ü–ú", callback_data=f"1rm_ex_{exercise_id}")
            keyboard.button(text="üèãÔ∏è –ü—Ä–æ—Å—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", callback_data="simple_block_config")
            keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_block_exercises")
            
            await callback.message.edit_text(
                text, 
                reply_markup=keyboard.as_markup(), 
                parse_mode="Markdown"
            )
            await callback.answer()
            return
        
        await callback.message.edit_text(text, parse_mode="Markdown")
        await state.set_state("advanced_block_config")
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await callback.answer()

async def process_advanced_block_config(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å 1–ü–ú"""
    try:
        parts = message.text.split()
        if len(parts) not in [3, 4]:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ø–æ–¥—Ö–æ–¥—ã –ø–æ–≤—Ç–æ—Ä_–º–∏–Ω –ø–æ–≤—Ç–æ—Ä_–º–∞–∫—Å [–ø—Ä–æ—Ü–µ–Ω—Ç]")
            return
        
        sets = int(parts[0])
        reps_min = int(parts[1])
        reps_max = int(parts[2])
        one_rm_percent = int(parts[3]) if len(parts) == 4 else None
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not (1 <= sets <= 10) or not (1 <= reps_min <= 50) or not (reps_min <= reps_max <= 50):
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –ø–æ–¥—Ö–æ–¥—ã 1-10, –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è 1-50")
            return
        
        if one_rm_percent and not (30 <= one_rm_percent <= 120):
            await message.answer("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç 1–ü–ú –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 30 –¥–æ 120%")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤ –±–ª–æ–∫
        await add_exercise_to_block_data(message, state, sets, reps_min, reps_max, one_rm_percent)
        
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä: 4 6 8 80")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def add_exercise_to_block_data(message: Message, state: FSMContext, 
                                   sets: int, reps_min: int, reps_max: int, 
                                   one_rm_percent: int = None):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –±–ª–æ–∫ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    data = await state.get_data()
    block_key = data.get('current_block')
    selected_blocks = data.get('selected_blocks', {})
    current_block_data = selected_blocks.get(block_key, {'exercises': [], 'description': ''})
    
    exercise_data = {
        'id': data['current_exercise_id'],
        'name': data['current_exercise_name'],
        'sets': sets,
        'reps_min': reps_min,
        'reps_max': reps_max,
        'one_rm_percent': one_rm_percent,
        'rest_seconds': 90
    }
    
    current_block_data['exercises'].append(exercise_data)
    selected_blocks[block_key] = current_block_data
    
    await state.update_data(selected_blocks=selected_blocks)
    
    text = f"‚úÖ **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–ª–æ–∫!**\n\n"
    text += f"üí™ **{exercise_data['name']}**\n"
    text += f"üìä **{sets}√ó{reps_min}-{reps_max}**"
    if one_rm_percent:
        text += f" **({one_rm_percent}% 1–ü–ú)**"
    
    await message.answer(text, parse_mode="Markdown")
    await show_block_exercises_menu(message, state)



# ===== –ù–ê–°–¢–†–û–ô–ö–ê –£–ü–†–ê–ñ–ù–ï–ù–ò–ô =====
async def simple_block_config(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    data = await state.get_data()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    exercise_data = {
        'id': data['current_exercise_id'],
        'name': data['current_exercise_name'],
        'sets': 3,
        'reps_min': 8,
        'reps_max': 12,
        'rest_seconds': 60,
        'one_rm_percent': None
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–ª–æ–∫
    block_key = data.get('current_block')
    selected_blocks = data.get('selected_blocks', {})
    current_block_data = selected_blocks.get(block_key, {'exercises': [], 'description': ''})
    current_block_data['exercises'].append(exercise_data)
    selected_blocks[block_key] = current_block_data
    
    await state.update_data(selected_blocks=selected_blocks)
    await callback.answer("‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    await show_block_exercises_menu(callback.message, state)



# ===== –§–ò–ù–ê–õ–¨–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –¢–†–ï–ù–ò–†–û–í–ö–ò =====
async def finish_workout_creation(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    data = await state.get_data()
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    selected_blocks = data.get('selected_blocks', {})
    
    try:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        total_exercises = sum(len(block_data['exercises']) for block_data in selected_blocks.values())
        
        if total_exercises == 0:
            await callback.answer("‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ!")
            return
        
        async with db_manager.pool.acquire() as conn:
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
            workout_id = await conn.fetchval("""
                INSERT INTO workouts (name, description, created_by)
                VALUES ($1, $2, $3)
                RETURNING id
            """, data['name'], data.get('description', ''), user['id'])
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ –±–ª–æ–∫–∞–º
            exercise_order = 0
            for phase, block_data in selected_blocks.items():
                for exercise in block_data['exercises']:
                    exercise_order += 1
                    await conn.execute("""
                        INSERT INTO workout_exercises (
                            workout_id, exercise_id, phase, order_in_phase, sets, 
                            reps_min, reps_max, one_rm_percent, rest_seconds
                        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
                    """, workout_id, exercise['id'], phase, exercise_order, exercise['sets'], 
                         exercise['reps_min'], exercise['reps_max'], 
                         exercise.get('one_rm_percent'), exercise['rest_seconds'])
        
        # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = f"üéâ **–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n"
        text += f"üèãÔ∏è **–ù–∞–∑–≤–∞–Ω–∏–µ:** {data['name']}\n"
        text += f"üÜî **ID:** {workout_id}\n"
        text += f"üìã **–í—Å–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:** {total_exercises}\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ –±–ª–æ–∫–∞–º
        block_names = {
            'warmup': 'üî• –†–∞–∑–º–∏–Ω–∫–∞',
            'nervous_prep': '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ù–°',
            'main': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å',
            'cooldown': 'üßò –ó–∞–º–∏–Ω–∫–∞'
        }
        
        for phase, block_data in selected_blocks.items():
            if block_data['exercises']:
                text += f"**{block_names[phase]}:** {len(block_data['exercises'])} —É–ø—Ä.\n"
                if block_data.get('description'):
                    text += f"   _{block_data['description']}_\n"
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üèãÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="my_workouts")
        keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="create_workout")
        keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        keyboard.adjust(2)
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
        await state.clear()
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    await callback.answer()

# ===== –û–¢–ú–ï–ù–ê –°–û–ó–î–ê–ù–ò–Ø =====
async def cancel_workout_creation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    await state.clear()
    await workouts_menu(callback)

# ===== –ó–ê–ì–õ–£–®–ö–ò =====
async def find_workout(callback: CallbackQuery):
    """–ü–æ–∏—Å–∫ –≥–æ—Ç–æ–≤—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - –ø–æ–∏—Å–∫ –≥–æ—Ç–æ–≤—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")

async def workout_stats(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")

async def view_workout_details(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô =====
async def process_workout_text_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    current_state = await state.get_state()
    
    if current_state == CreateWorkoutStates.waiting_name:
        await process_workout_name(message, state)
    elif current_state == CreateWorkoutStates.waiting_description:
        await process_workout_description(message, state)
    elif current_state == CreateWorkoutStates.adding_block_description:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –±–ª–æ–∫–∞
        description = message.text.strip()
        await state.update_data(current_block_description=description)
        
        await message.answer(
            f"‚úÖ **–û–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:**\n_{description}_\n\n–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...",
            parse_mode="Markdown"
        )
        await show_block_exercises_menu(message, state)
    elif current_state == "searching_exercise_for_block":
        await handle_block_exercise_search(message, state)
    elif current_state == "advanced_block_config":  # ‚Üê –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£
        await process_advanced_block_config(message, state)  # ‚Üê –ò –≠–¢–£ –°–¢–†–û–ö–£
    else:
        await message.answer("üöß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")

# ===== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í =====
def register_workout_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    dp.callback_query.register(workouts_menu, F.data == "workouts_menu")
    
    # –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    dp.callback_query.register(my_workouts, F.data == "my_workouts")
    dp.callback_query.register(view_workout_details, F.data.startswith("view_workout_"))
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    dp.callback_query.register(create_workout, F.data == "create_workout")
    dp.callback_query.register(skip_description, F.data == "skip_description")
    dp.callback_query.register(cancel_workout_creation, F.data == "cancel_workout_creation")
    
    # –ë–ª–æ–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    dp.callback_query.register(select_workout_block, F.data.startswith("select_block_"))
    dp.callback_query.register(add_block_description, F.data == "add_block_description")
    dp.callback_query.register(skip_block_description, F.data == "skip_block_description")
    dp.callback_query.register(skip_entire_block, F.data == "skip_entire_block")
    dp.callback_query.register(back_to_blocks, F.data == "back_to_blocks")
    dp.callback_query.register(finish_current_block, F.data == "finish_current_block")
    
    # –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –±–ª–æ–∫–æ–≤
    dp.callback_query.register(find_exercise_for_block, F.data == "find_exercise_for_block")
    dp.callback_query.register(browse_categories_for_block, F.data == "browse_categories_for_block")
    dp.callback_query.register(show_block_category_exercises, F.data.startswith("block_cat_"))
    dp.callback_query.register(back_to_block_exercises, F.data == "back_to_block_exercises")
    dp.callback_query.register(add_exercise_to_block, F.data.startswith("add_block_ex_"))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    dp.callback_query.register(simple_block_config, F.data == "simple_block_config")
    dp.callback_query.register(advanced_block_config, F.data == "advanced_block_config")
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    dp.callback_query.register(finish_workout_creation, F.data == "finish_workout_creation")
    
    # –ó–∞–≥–ª—É—à–∫–∏
    dp.callback_query.register(find_workout, F.data == "find_workout")
    dp.callback_query.register(workout_stats, F.data == "workout_stats")

__all__ = [
    'register_workout_handlers',
    'process_workout_text_input'
]
