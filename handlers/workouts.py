# handlers/workouts.py
# -*- coding: utf-8 -*-
import logging
from typing import Optional, Dict, Any, List
from datetime import datetime

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import StateFilter
from aiogram.enums import ParseMode

from database import db_manager
from states.workout_states import CreateWorkoutStates

logger = logging.getLogger(__name__)
workouts_router = Router()
from handlers.exercises import search_exercise_menu
#........................nazaz.....................

@workouts_router.callback_query(F.data == "back_to_constructor")
async def back_to_constructor(callback: CallbackQuery, state: FSMContext):
    await state.set_state(CreateWorkoutStates.adding_exercises)
    await _show_block_selection(callback.message, state)
    await callback.answer()


# ----------------- HELPERS -----------------
def _parse_int_suffix(callback_data: str) -> Optional[int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–ª—ã–π —Å—É—Ñ—Ñ–∏–∫—Å –ø–æ—Å–ª–µ '_' –∏–ª–∏ None."""
    try:
        part = callback_data.split("_")[-1]
        return int(part) if part.isdigit() else None
    except Exception:
        return None

def _parse_id_with_prefix(callback_data: str, prefix: str) -> int:
    """–ü–∞—Ä—Å–∏—Ç ID –ø–æ—Å–ª–µ prefix, –±—Ä–æ—Å–∞–µ—Ç ValueError, –µ—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ."""
    if not callback_data.startswith(prefix):
        raise ValueError("prefix mismatch")
    tail = callback_data[len(prefix):]
    if tail.isdigit():
        return int(tail)
    raise ValueError("no numeric id")

async def _safe_edit_or_send(message, text, reply_markup=None, parse_mode=None):
    """–ü—Ä–æ–±—É–µ–º edit_text, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî answer."""
    try:
        await message.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
    except Exception:
        await message.answer(text, reply_markup=reply_markup, parse_mode=parse_mode)


# ----------------- MENU -----------------
@workouts_router.callback_query(F.data == "workouts_menu")
async def workouts_menu(callback: CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(text="üèãÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="my_workouts")
    kb.button(text="üîç –ù–∞–π—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="find_workout")
    kb.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="create_workout")
    kb.button(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="workout_statistics")
    kb.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    kb.adjust(2)
    await _safe_edit_or_send(callback.message, "üèãÔ∏è **–ú–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.as_markup(), parse_mode="Markdown")
    await callback.answer()

@workouts_router.callback_query(F.data == "manual_add_exercise")
async def add_exercise_manually(callback: CallbackQuery, state: FSMContext):
    """–†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º"""
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é:\n\n"
        "_–ù–∞–ø—Ä–∏–º–µ—Ä:_ ¬´–ñ–∏–º –ª—ë–∂–∞ 3—Ö10 70% –æ—Ç 1–ü–ú, –æ—Ç–¥—ã—Ö 90 —Å–µ–∫.¬ª",
        parse_mode="Markdown"
    )
    await state.set_state(CreateWorkoutStates.manual_exercise_input)
    await callback.answer()

@workouts_router.message(StateFilter(CreateWorkoutStates.manual_exercise_input))
async def handle_manual_exercise_input(message: Message, state: FSMContext):
    text = message.text.strip()
    data = await state.get_data()
    exercises = data.get("manual_exercises", [])
    exercises.append(text)
    await state.update_data(manual_exercises=exercises)

    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:\n\n{text}")

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="manual_add_exercise")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_constructor")
    kb.adjust(1)
    await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=kb.as_markup())

    await state.set_state(CreateWorkoutStates.adding_exercises)


# ----------------- MY WORKOUTS -----------------
@workouts_router.callback_query(F.data == "my_workouts")
async def my_workouts(callback: CallbackQuery):
    logger.info("my_workouts by user %s", callback.from_user.id)
    try:
        user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
        async with db_manager.pool.acquire() as conn:
            rows = await conn.fetch("""
                SELECT w.id, w.name, w.unique_id,
                    (SELECT COUNT(*) FROM workout_exercises we WHERE we.workout_id = w.id) as exercise_count,
                    w.estimated_duration_minutes
                FROM workouts w
                WHERE w.created_by = $1 AND coalesce(w.is_active, true) = true
                ORDER BY w.created_at DESC
                LIMIT 50
            """, user['id'])
        if not rows:
            kb = InlineKeyboardBuilder()
            kb.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é", callback_data="create_workout")
            kb.button(text="üîô –í –º–µ–Ω—é", callback_data="workouts_menu")
            kb.adjust(1)
            await _safe_edit_or_send(callback.message, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.", reply_markup=kb.as_markup())
            await callback.answer()
            return

        text = f"üèãÔ∏è **–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ({len(rows)}):**\n\n"
        kb = InlineKeyboardBuilder()
        for r in rows:
            cnt = r['exercise_count'] or 0
            text += f"**{r['name']}** ‚Äî {cnt} —É–ø—Ä. | –ö–æ–¥ `{r['unique_id']}`\n"
            kb.button(text=f"{r['name']} ({cnt})", callback_data=f"view_workout_{r['id']}")
        kb.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å", callback_data="create_workout")
        kb.button(text="üîô –í –º–µ–Ω—é", callback_data="workouts_menu")
        kb.adjust(1)
        await _safe_edit_or_send(callback.message, text, reply_markup=kb.as_markup(), parse_mode="Markdown")
        await callback.answer()
    except Exception as e:
        logger.exception("my_workouts error: %s", e)
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", show_alert=True)


# ----------------- VIEW DETAILS -----------------
@workouts_router.callback_query(F.data.startswith("view_workout_"))
async def view_workout_details(callback: CallbackQuery):
    try:
        wid = _parse_id_with_prefix(callback.data, "view_workout_")
    except ValueError:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID", show_alert=True)
        return

    try:
        async with db_manager.pool.acquire() as conn:
            workout = await conn.fetchrow("""
                SELECT w.*, u.first_name as creator_name, u.last_name as creator_lastname
                FROM workouts w
                LEFT JOIN users u ON w.created_by = u.id
                WHERE w.id = $1 AND coalesce(w.is_active, true) = true
            """, wid)
            if not workout:
                await callback.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
            exercises = await conn.fetch("""
                SELECT we.*, e.name as exercise_name, e.muscle_group, e.category
                FROM workout_exercises we
                LEFT JOIN exercises e ON e.id = we.exercise_id
                WHERE we.workout_id = $1
                ORDER BY we.phase, we.order_in_phase
            """, wid)
    except Exception as e:
        logger.exception("view_workout_details db error: %s", e)
        await callback.answer("–û—à–∏–±–∫–∞ –ë–î", show_alert=True)
        return

    text = f"üè∑ **{workout['name']}**\n\n"
    if workout.get('description'):
        text += f"üìù _{workout['description']}_\n\n"
    text += f"üë§ –ê–≤—Ç–æ—Ä: {workout.get('creator_name') or ''} {workout.get('creator_lastname') or ''}\n"
    text += f"‚è± –í—Ä–µ–º—è: ~{workout.get('estimated_duration_minutes') or 0} –º–∏–Ω\n"
    text += f"üí° –ö–æ–¥: `{workout.get('unique_id')}`\n\n"

    if exercises:
        phase_map = {'warmup': 'üî• –†–∞–∑–º–∏–Ω–∫–∞', 'nervousprep': '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ù–°', 'main': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è', 'cooldown': 'üßò –ó–∞–º–∏–Ω–∫–∞'}
        cur = None
        for ex in exercises:
            if ex['phase'] != cur:
                cur = ex['phase']
                text += f"\n**{phase_map.get(cur, cur)}:**\n"
            # show minimal info
            reps = ""
            if ex.get('reps_min') is not None:
                if ex.get('reps_max') is not None and ex['reps_min'] != ex['reps_max']:
                    reps = f"{ex['reps_min']}-{ex['reps_max']}"
                else:
                    reps = f"{ex['reps_min']}"
            else:
                reps = "-"
            sets = ex.get('sets') or "-"
            text += f"‚Ä¢ **{ex['exercise_name']}** ‚Äî {sets}√ó{reps}"
            if ex.get('one_rm_percent'):
                text += f" ({ex['one_rm_percent']}% 1–ü–ú)"
            if ex.get('rest_seconds'):
                rs = ex['rest_seconds']
                text += f" | –æ—Ç–¥—ã—Ö {rs//60}–º{rs%60}s" if rs >= 60 else f" | –æ—Ç–¥—ã—Ö {rs}s"
            text += "\n"
    else:
        text += "‚ö†Ô∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç."

    kb = InlineKeyboardBuilder()
    kb.button(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data=f"start_workout_{wid}")
    kb.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_workout_{wid}")
    kb.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_workout_{wid}")
    kb.button(text="üîô –í –º–æ–∏", callback_data="my_workouts")
    kb.adjust(2)
    await _safe_edit_or_send(callback.message, text, reply_markup=kb.as_markup(), parse_mode="Markdown")
    await callback.answer()


# ----------------- CREATE FLOW (FSM) -----------------
@workouts_router.callback_query(F.data == "create_workout")
async def create_workout_start(callback: CallbackQuery, state: FSMContext):
    logger.info("create_workout_start by %s", callback.from_user.id)
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="create_cancel")
    kb.adjust(1)
    await _safe_edit_or_send(callback.message, "üèãÔ∏è **–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=kb.as_markup(), parse_mode="Markdown")
    await state.set_state(CreateWorkoutStates.waiting_workout_name)
    await callback.answer()

@workouts_router.callback_query(F.data == "create_cancel")
async def create_cancel(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    kb = InlineKeyboardBuilder()
    kb.button(text="üèãÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="my_workouts")
    kb.button(text="üîô –í –º–µ–Ω—é", callback_data="workouts_menu")
    kb.adjust(1)
    await _safe_edit_or_send(callback.message, "–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.as_markup())
    await callback.answer()

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –±–ª–æ–∫–æ–≤
async def _show_block_selection(message, state: FSMContext):
    data = await state.get_data()
    name = data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    selected = data.get('selected_blocks', {})
    text = f"üîß **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:** {name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ –∏ –¥–æ–±–∞–≤—å—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n\n"
    blocks = [('warmup', 'üî• –†–∞–∑–º–∏–Ω–∫–∞'), ('nervousprep', '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ù–°'), ('main', 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è'), ('cooldown', 'üßò –ó–∞–º–∏–Ω–∫–∞')]
    for k, label in blocks:
        status = "‚úÖ" if k in selected else "‚≠ï"
        cnt = len(selected.get(k, {}).get('exercises', [])) if k in selected else 0
        text += f"{status} {label} ‚Äî {cnt} —É–ø—Ä.\n"
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï –†–∞–∑–º–∏–Ω–∫–∞", callback_data="create_add_warmup")
    kb.button(text="‚ûï –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ù–°", callback_data="create_add_nervousprep")
    kb.button(text="‚ûï –û—Å–Ω–æ–≤–Ω–∞—è", callback_data="create_add_main")
    kb.button(text="‚ûï –ó–∞–º–∏–Ω–∫–∞", callback_data="create_add_cooldown")
    kb.button(text="‚úÖ –ì–æ—Ç–æ–≤–æ ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="create_finish")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="create_cancel")
    kb.adjust(2)
    await _safe_edit_or_send(message, text, reply_markup=kb.as_markup(), parse_mode="Markdown")
    await state.set_state(CreateWorkoutStates.selecting_blocks)


# @workouts_router.callback_query(F.data.startswith("workout_add_ex_"))
# async def workout_add_exercise(callback: CallbackQuery, state: FSMContext):
#     ex_id = int(callback.data.split("_")[-1])
#     data = await state.get_data()
#     block = data.get("searching_in_block")
#     if not block:
#         await callback.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ç–µ—Ä—è–Ω.", show_alert=True)
#         return

#     async with db_manager.pool.acquire() as conn:
#         ex = await conn.fetchrow("SELECT name FROM exercises WHERE id = $1", ex_id)
#     if not ex:
#         await callback.answer("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
#         return

#     # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–ª–æ–∫
#     selected = data.get("selected_blocks", {})
#     selected.setdefault(block, {"description": "", "exercises": []})
#     selected[block]["exercises"].append({
#         "id": ex_id,
#         "name": ex["name"],
#         "sets": None, "reps_min": None, "reps_max": None,
#         "one_rm_percent": None, "rest_seconds": None
#     })
#     await state.update_data(selected_blocks=selected)

#     await callback.message.edit_text(f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ *{ex['name']}* –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–ª–æ–∫.")
#     await _show_exercises_for_block(callback.message, state)
#     await callback.answer()


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞ - –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –±–ª–æ–∫–∞
@workouts_router.callback_query(F.data.in_(["create_add_warmup", "create_add_nervousprep", "create_add_main", "create_add_cooldown"]))
async def create_add_block(callback: CallbackQuery, state: FSMContext):
    mapping = {
        "create_add_warmup": "warmup",
        "create_add_nervousprep": "nervousprep",
        "create_add_main": "main",
        "create_add_cooldown": "cooldown"
    }
    phase = mapping.get(callback.data)
    if not phase:
        await callback.answer()
        return
    await state.update_data(current_block=phase)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª")
    kb = InlineKeyboardBuilder()
    kb.button(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="create_skip_block_desc")
    kb.adjust(1)
    await callback.message.edit_reply_markup(reply_markup=kb.as_markup())
    await state.set_state(CreateWorkoutStates.adding_block_description)
    await callback.answer()

@workouts_router.callback_query(F.data == "create_skip_block_desc")
async def create_skip_block_desc(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    cur = data.get('current_block')
    sel = data.get('selected_blocks', {})
    sel.setdefault(cur, {"description": "", "exercises": []})
    await state.update_data(selected_blocks=sel)
    await _show_exercises_for_block(callback.message, state)
    await callback.answer()


async def _show_exercises_for_block(message, state: FSMContext):
    data = await state.get_data()
    cur = data.get('current_block', 'main')
    phase_map = {'warmup': 'üî• –†–∞–∑–º–∏–Ω–∫–∞', 'nervousprep': '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ù–°', 'main': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è', 'cooldown': 'üßò –ó–∞–º–∏–Ω–∫–∞'}
    sel = data.get('selected_blocks', {})
    block = sel.get(cur, {"description": "", "exercises": []})
    text = f"üìã **–ë–ª–æ–∫: {phase_map.get(cur)}**\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {block['description'] or '–ù–µ—Ç'}\n\n–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n"
    if block['exercises']:
        for ex in block['exercises']:
            text += f"‚Ä¢ {ex['name']}\n"
    else:
        text += "–ü–æ–∫–∞ –ø—É—Å—Ç–æ.\n"
    kb = InlineKeyboardBuilder()
    kb.button(text="üîç –ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", callback_data="workout_start_ex_search")
    kb.button(text="üìù –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="manual_add_exercise")
    kb.button(text="üîô –ö –±–ª–æ–∫–∞–º", callback_data="create_back_to_blocks")
    kb.adjust(1)
    await _safe_edit_or_send(message, text, reply_markup=kb.as_markup(), parse_mode="Markdown")
    await state.set_state(CreateWorkoutStates.adding_exercises)

@workouts_router.callback_query(F.data.startswith("workout_add_ex_"))
async def workout_add_exercise(callback: CallbackQuery, state: FSMContext):
    ex_id = int(callback.data.split("_")[-1])
    data = await state.get_data()
    block = data.get("searching_in_block")
    if not block:
        await callback.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ç–µ—Ä—è–Ω.", show_alert=True)
        return

    async with db_manager.pool.acquire() as conn:
        ex = await conn.fetchrow("SELECT name FROM exercises WHERE id = $1", ex_id)
    if not ex:
        await callback.answer("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    selected = data.get("selected_blocks", {})
    selected.setdefault(block, {"description": "", "exercises": []})
    selected[block]["exercises"].append({
        "id": ex_id,
        "name": ex["name"],
        "sets": None, "reps_min": None, "reps_max": None,
        "one_rm_percent": None, "rest_seconds": None
    })
    await state.update_data(selected_blocks=selected)

    await callback.message.edit_text(f"**{ex['name']}** –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–ª–æ–∫.")
    await _show_exercises_for_block(callback.message, state)
    await callback.answer()

# === –ü–û–ò–°–ö –£–ü–†–ê–ñ–ù–ï–ù–ò–ô –ß–ï–†–ï–ó –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===
@workouts_router.callback_query(F.data == "workout_start_ex_search")
async def workout_start_ex_search(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    block = data.get("current_block")
    if not block:
        await callback.answer("–û—à–∏–±–∫–∞: –±–ª–æ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω.", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º, –∫—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å
    await state.update_data(searching_in_block=block)
    await state.set_state(CreateWorkoutStates.searching_exercise_for_block)

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¢–û –ñ–ï –ú–ï–ù–Æ, —á—Ç–æ –∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
    
    await search_exercise_menu(callback)

@workouts_router.callback_query(F.data == "create_back_to_blocks")
async def create_back_to_blocks(callback: CallbackQuery, state: FSMContext):
    await _show_block_selection(callback.message, state)
    await callback.answer()

@workouts_router.callback_query(F.data == "workout_start_search")
async def workout_start_search(callback: CallbackQuery, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ –º—ã –∏—â–µ–º –≤ –±–ª–æ–∫–µ
    data = await state.get_data()
    block = data.get("current_block")
    if not block:
        await callback.answer("–û—à–∏–±–∫–∞: –±–ª–æ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω.", show_alert=True)
        return

    await state.update_data(searching_in_block=block)
    await state.set_state(CreateWorkoutStates.searching_exercise_for_block)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¢–û –ñ–ï –ú–ï–ù–Æ, —á—Ç–æ –∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!
    
    await search_exercise_menu(callback)

    await callback.answer()

@workouts_router.callback_query(F.data == "create_search_ex")
async def create_search_ex(callback: CallbackQuery, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ –º—ã –∏—â–µ–º –≤ –±–ª–æ–∫–µ
    data = await state.get_data()
    block = data.get("current_block")
    if not block:
        await callback.answer("–û—à–∏–±–∫–∞: –±–ª–æ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω.", show_alert=True)
        return

    await state.update_data(searching_in_block=block)
    await state.set_state(CreateWorkoutStates.searching_exercise_for_block)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ –∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await callback.answer()


# @workouts_router.callback_query(F.data.startswith("create_add_ex_"))
# async def create_add_ex(callback: CallbackQuery, state: FSMContext):
#     ex_id = _parse_int_suffix(callback.data)
#     if ex_id is None:
#         await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID", show_alert=True)
#         return
#     async with db_manager.pool.acquire() as conn:
#         row = await conn.fetchrow("SELECT id, name FROM exercises WHERE id = $1", ex_id)
#     if not row:
#         await callback.answer("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
#         return

#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state –≤—Ä–µ–º–µ–Ω–Ω–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
#     data = await state.get_data()
#     cur = data.get('current_block', 'main')
#     sel = data.get('selected_blocks', {})
#     sel.setdefault(cur, {"description": "", "exercises": []})
#     # –ø–æ –∏–¥–µ–µ —Ç—É—Ç –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: sets/reps/%1RM/rest
#     # –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä: –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π –ø—É–Ω–∫—Ç
#     await state.update_data(pending_exercise={"id": row['id'], "name": row['name'], "block": cur})
#     kb = InlineKeyboardBuilder()
#     kb.button(text="‚öôÔ∏è –£–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–ø–æ–¥—Ö–æ–¥—ã/–ø–æ–≤—Ç–æ—Ä—ã/%1–ü–ú)", callback_data="create_configure_pending_ex")
#     kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ (–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)", callback_data="create_confirm_add_pending_ex")
#     kb.button(text="üîô –ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞", callback_data="create_search_ex")
#     kb.adjust(1)
#     await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω–æ: *{row['name']}*\n\n–î–æ–±–∞–≤–∏—Ç—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ?", reply_markup=kb.as_markup(), parse_mode="Markdown")
#     await callback.answer()


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
@workouts_router.callback_query(F.data == "create_configure_pending_ex")
async def create_configure_pending_ex(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    pending = data.get('pending_exercise')
    if not pending:
        await callback.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ç–µ—Ä—è–Ω", show_alert=True)
        return
    # –Ω–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥: –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ö–æ–¥–æ–≤
    await state.update_data(config_step="sets")
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ), –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")
    await state.set_state(CreateWorkoutStates.configuring_exercise)
    await callback.answer()

# –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
@workouts_router.callback_query(F.data == "create_confirm_add_pending_ex")
async def create_confirm_add_pending_ex(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    pending = data.get('pending_exercise')
    if not pending:
        await callback.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ç–µ—Ä—è–Ω", show_alert=True)
        return
    cur = pending['block']
    sel = data.get('selected_blocks', {})
    sel.setdefault(cur, {"description": "", "exercises": []})
    sel[cur]['exercises'].append({
        "id": pending['id'],
        "name": pending['name'],
        "sets": None,
        "reps_min": None,
        "reps_max": None,
        "one_rm_percent": None,
        "rest_seconds": None
    })
    # —á–∏—Å—Ç–∏–º pending
    await state.update_data(selected_blocks=sel)
    await state.update_data(pending_exercise=None)
    await callback.message.edit_text(f"‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ *{pending['name']}* –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–ª–æ–∫.", parse_mode="Markdown")
    await _show_block_selection(callback.message, state)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è pending exercise
@workouts_router.message(StateFilter(CreateWorkoutStates.configuring_exercise))
async def configuring_pending_ex_input(message: Message, state: FSMContext):
    text = message.text.strip().lower()
    data = await state.get_data()
    pending = data.get('pending_exercise')
    if not pending:
        await message.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ç–µ—Ä—è–Ω.")
        await state.clear()
        return
    step = data.get('config_step')
    # —à–∞–≥: sets -> reps -> percent -> rest -> confirm
    if step == "sets":
        if text in ("–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip", "-"):
            # –¥–æ–±–∞–≤–∏—Ç—å –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            sel = data.get('selected_blocks', {})
            cur = pending['block']
            sel.setdefault(cur, {"description": "", "exercises": []})
            sel[cur]['exercises'].append({
                "id": pending['id'],
                "name": pending['name'],
                "sets": None,
                "reps_min": None,
                "reps_max": None,
                "one_rm_percent": None,
                "rest_seconds": None
            })
            await state.update_data(selected_blocks=sel)
            await state.update_data(pending_exercise=None)
            await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")
            await _show_block_selection(message, state)
            return
        try:
            sets = int(text)
            await state.update_data(config_sets=sets, config_step="reps")
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤ (–æ–¥–∏–Ω–æ—á–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —á–µ—Ä–µ–∑ '-': –Ω–∞–ø—Ä–∏–º–µ—Ä '8' –∏–ª–∏ '8-12'):")
            return
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø–æ–¥—Ö–æ–¥–æ–≤ –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
            return
    if step == "reps":
        # –ø–∞—Ä—Å–∏–º reps
        if "-" in text:
            try:
                a, b = text.split("-", 1)
                rmin = int(a.strip())
                rmax = int(b.strip())
            except Exception:
                await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –ü—Ä–∏–º–µ—Ä: 8-12")
                return
        else:
            try:
                rmin = rmax = int(text)
            except Exception:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–æ–≤ –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω 8-12.")
                return
        await state.update_data(config_reps_min=rmin, config_reps_max=rmax, config_step="percent")
        await message.answer("–£–∫–∞–∂–∏—Ç–µ % –æ—Ç 1–ü–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä 70) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:")
        return
    if step == "percent":
        if text in ("–Ω–µ—Ç", "no", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip", "-"):
            await state.update_data(config_one_rm_percent=None, config_step="rest")
            await message.answer("–£–∫–∞–∂–∏—Ç–µ –æ—Ç–¥—ã—Ö –º–µ–∂–¥—É –ø–æ–¥—Ö–æ–¥–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä 90) –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")
            return
        try:
            perc = int(text)
            if not (0 < perc <= 200):
                raise ValueError
            await state.update_data(config_one_rm_percent=perc, config_step="rest")
            await message.answer("–£–∫–∞–∂–∏—Ç–µ –æ—Ç–¥—ã—Ö –º–µ–∂–¥—É –ø–æ–¥—Ö–æ–¥–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä 90) –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")
            return
        except Exception:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä 70, –∏–ª–∏ '–Ω–µ—Ç'.")
            return
    if step == "rest":
        if text in ("–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip", "-"):
            rest = None
        else:
            try:
                rest = int(text)
            except Exception:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥ –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
                return
        # —Å–æ–±–∏—Ä–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º
        sel = data.get('selected_blocks', {})
        cur = pending['block']
        sel.setdefault(cur, {"description": "", "exercises": []})
        entry = {
            "id": pending['id'],
            "name": pending['name'],
            "sets": data.get('config_sets'),
            "reps_min": data.get('config_reps_min'),
            "reps_max": data.get('config_reps_max'),
            "one_rm_percent": data.get('config_one_rm_percent'),
            "rest_seconds": rest
        }
        # –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω percent, –ø—Ä–æ–≤–µ—Ä–∏–º –µ—Å—Ç—å –ª–∏ 1RM —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        if entry.get('one_rm_percent'):
            user = await db_manager.get_user_by_telegram_id(message.from_user.id)
            async with db_manager.pool.acquire() as conn:
                orm = await conn.fetchrow("SELECT * FROM one_rep_max WHERE user_id = $1 AND exercise_id = $2", user['id'], pending['id'])
            if not orm:
                # –ø—Ä–µ–¥–ª–æ–∂–∏–º –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–æ–¥—É–ª—è tests)
                kb = InlineKeyboardBuilder()
                kb.button(text="–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ 1–ü–ú", callback_data=f"start_1rm_test_for_{pending['id']}")
                kb.button(text="–î–æ–±–∞–≤–∏—Ç—å –±–µ–∑ %", callback_data="create_confirm_add_pending_ex")
                kb.button(text="üîô –ö –±–ª–æ–∫–∞–º", callback_data="create_back_to_blocks")
                kb.adjust(1)
                await message.answer("1–ü–ú –¥–ª—è —ç—Ç–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç?", reply_markup=kb.as_markup())
                return
        sel[cur]['exercises'].append(entry)
        await state.update_data(selected_blocks=sel)
        await state.update_data(pending_exercise=None)
        # —á–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏
        for k in ["config_step", "config_sets", "config_reps_min", "config_reps_max", "config_one_rm_percent"]:
            await state.update_data({k: None})
        await message.answer(f"‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {entry['name']} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ {cur}.")
        await _show_block_selection(message, state)
        return


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞ 1–†–ú (—Å—Å—ã–ª–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –º–æ–¥—É–ª—å)
@workouts_router.callback_query(F.data.startswith("start_1rm_test_for_"))
async def start_1rm_test_for(callback: CallbackQuery, state: FSMContext):
    ex_id = _parse_int_suffix(callback.data)
    if ex_id is None:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", show_alert=True)
        return
    # –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –º–æ–¥—É–ª—å —Ç–µ—Å—Ç–æ–≤ ‚Äî –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω –µ—Å—Ç—å
    # —Å—Ç–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    data = await state.get_data()
    await state.update_data(await_state_return={"after": "add_pending_after_1rm", "exercise_id": ex_id, "context": data})
    # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤ handlers.tests –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è start_1rm_test_from_handlers
    try:
        from . import tests as tests_module
        # –µ—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ 1rm —Ç–µ—Å—Ç–∞ ‚Äî –≤—ã–∑—ã–≤–∞–µ–º –µ—ë (–µ—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º)
        if hasattr(tests_module, "start_1rm_test_from_handlers"):
            await tests_module.start_1rm_test_from_handlers(callback, ex_id)
            await callback.answer()
            return
    except Exception:
        logger.info("–ú–æ–¥—É–ª—å tests –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç start_1rm_test_from_handlers, –æ—Ç–ø—Ä–∞–≤–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é")
    await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç 1–ü–ú –≤—Ä—É—á–Ω—É—é (/start_1rm_test), –∑–∞—Ç–µ–º –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –¥–æ–±–∞–≤—å—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ.")
    await callback.answer()


# –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
@workouts_router.callback_query(F.data == "create_finish")
async def create_finish(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        name = data.get('name')
        if not name:
            await callback.answer("–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", show_alert=True)
            return
        selected = data.get('selected_blocks', {})
        total_exs = sum(len(b.get('exercises', [])) for b in selected.values())
        if total_exs == 0:
            await callback.answer("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ!", show_alert=True)
            return
        user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
        async with db_manager.pool.acquire() as conn:
            wid = await conn.fetchval("""
                INSERT INTO workouts (name, description, created_by, created_at, is_active)
                VALUES ($1,$2,$3, now(), true) RETURNING id
            """, name, data.get('description', ''))
            order = 0
            for phase, block in selected.items():
                for ex in block.get('exercises', []):
                    order += 1
                    await conn.execute("""
                        INSERT INTO workout_exercises 
                        (workout_id, exercise_id, phase, order_in_phase, sets, reps_min, reps_max, one_rm_percent, rest_seconds, notes)
                        VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)
                    """, wid, ex['id'], phase, order, ex.get('sets'), ex.get('reps_min'), ex.get('reps_max'), ex.get('one_rm_percent'), ex.get('rest_seconds'), ex.get('notes'))
            unique = await conn.fetchval("SELECT unique_id FROM workouts WHERE id = $1", wid)
        await callback.message.edit_text(f"üéâ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! –ö–æ–¥: `{unique}`\n–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {total_exs}", parse_mode="Markdown")
        await state.clear()
        await callback.answer()
    except Exception as e:
        logger.exception("create_finish error: %s", e)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", show_alert=True)


# ----------------- START/FINISH FLOW (player) -----------------
@workouts_router.callback_query(F.data.startswith("start_workout_"))
async def start_workout(callback: CallbackQuery):
    wid = _parse_int_suffix(callback.data)
    if wid is None:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID", show_alert=True)
        return
    async with db_manager.pool.acquire() as conn:
        w = await conn.fetchrow("SELECT name FROM workouts WHERE id = $1", wid)
    if not w:
        await callback.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data=f"finish_workout_{wid}")
    kb.button(text="üìã –î–µ—Ç–∞–ª–∏", callback_data=f"view_workout_{wid}")
    kb.adjust(1)
    await _safe_edit_or_send(callback.message, f"‚ñ∂Ô∏è –ù–∞—á–∏–Ω–∞–µ–º: **{w['name']}**\n\n–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ ¬´–ó–∞–≤–µ—Ä—à–∏–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É¬ª", reply_markup=kb.as_markup(), parse_mode="Markdown")
    await callback.answer()

@workouts_router.callback_query(F.data.startswith("finish_workout_"))
async def finish_workout(callback: CallbackQuery, state: FSMContext):
    wid = _parse_int_suffix(callback.data)
    if wid is None:
        await callback.answer()
        return
    await state.update_data(finishing_workout_id=wid)
    await callback.message.edit_text("‚úÖ –û—Ü–µ–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ —à–∫–∞–ª–µ 1-10 (RPE):")
    await state.set_state(CreateWorkoutStates.waiting_rpe)
    await callback.answer()


# ----------------- EDIT / DELETE -----------------
@workouts_router.callback_query(F.data.startswith("edit_workout_"))
async def edit_workout(callback: CallbackQuery, state: FSMContext):
    wid = _parse_int_suffix(callback.data)
    if wid is None:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID", show_alert=True)
        return
    async with db_manager.pool.acquire() as conn:
        w = await conn.fetchrow("SELECT id, name, description, created_by FROM workouts WHERE id = $1", wid)
    if not w:
        await callback.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    if w['created_by'] != user['id']:
        await callback.answer("–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", show_alert=True)
        return
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"rename_workout_{wid}")
    kb.button(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"change_desc_workout_{wid}")
    kb.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_workout_{wid}")
    kb.button(text="üîô –ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ", callback_data=f"view_workout_{wid}")
    kb.adjust(1)
    await _safe_edit_or_send(callback.message, f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {w['name']}", reply_markup=kb.as_markup())
    await callback.answer()

@workouts_router.callback_query(F.data.startswith("delete_workout_"))
async def delete_workout(callback: CallbackQuery):
    wid = _parse_int_suffix(callback.data)
    if wid is None:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID", show_alert=True)
        return
    try:
        async with db_manager.pool.acquire() as conn:
            await conn.execute("UPDATE workouts SET is_active = false WHERE id = $1", wid)
        await callback.message.edit_text("‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
        await callback.answer()
    except Exception as e:
        logger.exception("delete_workout error: %s", e)
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)


# –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ (legacy compatible)
@workouts_router.callback_query(F.data == "create_skip_description")
async def create_skip_description(callback: CallbackQuery, state: FSMContext):
    await state.update_data(description="")
    await _show_block_selection(callback.message, state)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ (–≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ handle_all_text_messages –≤ __init__.py
async def process_workout_text_input(message: Message, state: FSMContext):
    current = await state.get_state()
    data = await state.get_data()

    # -------------------------------------------------
    # 1. –ù–ê–ó–í–ê–ù–ò–ï –¢–†–ï–ù–ò–†–û–í–ö–ò
    # -------------------------------------------------
    if current == CreateWorkoutStates.waiting_workout_name:
        name = message.text.strip()
        if len(name) < 3:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω. 3 —Å–∏–º–≤–æ–ª–∞).")
            return
        await state.update_data(name=name)
        kb = InlineKeyboardBuilder()
        kb.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="create_skip_description")
        kb.button(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="create_cancel")
        kb.adjust(2)
        await message.answer(
            f"–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: *{name}*\n\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª",
            reply_markup=kb.as_markup(),
            parse_mode="Markdown"
        )
        await state.set_state(CreateWorkoutStates.waiting_workout_description)
        return

    # -------------------------------------------------
    # 2. –û–ü–ò–°–ê–ù–ò–ï –¢–†–ï–ù–ò–†–û–í–ö–ò
    # -------------------------------------------------
    if current == CreateWorkoutStates.waiting_workout_description:
        await state.update_data(description=message.text.strip())
        await _show_block_selection(message, state)
        return

    # -------------------------------------------------
    # 3. –û–ü–ò–°–ê–ù–ò–ï –ë–õ–û–ö–ê
    # -------------------------------------------------
    if current == CreateWorkoutStates.adding_block_description:
        desc = message.text.strip()
        cur_block = data.get('current_block')
        sel = data.get('selected_blocks', {})
        sel.setdefault(cur_block, {"description": "", "exercises": []})
        sel[cur_block]['description'] = desc
        await state.update_data(selected_blocks=sel)
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
        await _show_block_selection(message, state)
        return

    # -------------------------------------------------
    # 4. –ü–û–ò–°–ö –£–ü–†–ê–ñ–ù–ï–ù–ò–Ø –í –ë–õ–û–ö–ï
    # -------------------------------------------------
    if current == "searching_exercise_for_block":
        q = message.text.strip().lower()
        async with db_manager.pool.acquire() as conn:
            exs = await conn.fetch("""
                SELECT id, name, category, muscle_group
                FROM exercises
                WHERE lower(name) LIKE $1 OR lower(category) LIKE $1 OR lower(muscle_group) LIKE $1
                ORDER BY name
                LIMIT 20
            """, f"%{q}%")
        if not exs:
            await message.answer("–ü–æ –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        kb = InlineKeyboardBuilder()
        for e in exs:
            cat = e.get('category') or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            kb.button(text=f"{e['name']} ({cat})", callback_data=f"create_add_ex_{e['id']}")
        kb.button(text="–ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", callback_data="workout_start_search")
        kb.button(text="–ö –±–ª–æ–∫–∞–º", callback_data="create_back_to_blocks")
        kb.adjust(1)
        await message.answer(f"–ù–∞–π–¥–µ–Ω–æ: {len(exs)}", reply_markup=kb.as_markup())
        return

    # -------------------------------------------------
    # 5. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–ê–†–ê–ú–ï–¢–†–û–í –£–ü–†–ê–ñ–ù–ï–ù–ò–Ø (configuring_exercise)
    # -------------------------------------------------
    if current == CreateWorkoutStates.configuring_exercise:
        text = message.text.strip().lower()
        pending = data.get('pending_exercise')
        if not pending:
            await message.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ç–µ—Ä—è–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return

        step = data.get('config_step')

        # === –ü–û–î–•–û–î–´ (sets) ===
        if step == "sets":
            if text in ("–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip", "-", "–Ω–µ—Ç"):
                await _add_exercise_without_params(state, pending, message)
                return
            try:
                sets = int(text)
                if sets <= 0:
                    raise ValueError
                await state.update_data(config_sets=sets, config_step="reps")
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 8 –∏–ª–∏ 8-12):")
                return
            except ValueError:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3) –∏–ª–∏ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.")
                return

        # === –ü–û–í–¢–û–†–´ (reps) ===
        if step == "reps":
            if "-" in text:
                try:
                    a, b = text.split("-", 1)
                    rmin = int(a.strip())
                    rmax = int(b.strip())
                    if rmin <= 0 or rmax < rmin:
                        raise ValueError
                except Exception:
                    await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω. –ü—Ä–∏–º–µ—Ä: 8-12")
                    return
            else:
                try:
                    rmin = rmax = int(text)
                    if rmin <= 0:
                        raise ValueError
                except Exception:
                    await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10) –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω 8-12.")
                    return
            await state.update_data(config_reps_min=rmin, config_reps_max=rmax, config_step="percent")
            await message.answer("–£–∫–∞–∂–∏—Ç–µ % –æ—Ç 1–ü–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–µ—Ç¬ª:")
            return

        # === % –û–¢ 1–ü–ú (percent) ===
        if step == "percent":
            if text in ("–Ω–µ—Ç", "no", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip", "-"):
                await state.update_data(config_one_rm_percent=None, config_step="rest")
                await message.answer("–û—Ç–¥—ã—Ö –º–µ–∂–¥—É –ø–æ–¥—Ö–æ–¥–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 90) –∏–ª–∏ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:")
                return
            try:
                perc = int(text)
                if not (1 <= perc <= 200):
                    raise ValueError
                await state.update_data(config_one_rm_percent=perc, config_step="rest")
                await message.answer("–û—Ç–¥—ã—Ö –º–µ–∂–¥—É –ø–æ–¥—Ö–æ–¥–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 90) –∏–ª–∏ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:")
                return
            except Exception:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 200 –∏–ª–∏ ¬´–Ω–µ—Ç¬ª.")
                return

        # === –û–¢–î–´–• (rest) ===
        if step == "rest":
            if text in ("–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip", "-", "–Ω–µ—Ç"):
                rest = None
            else:
                try:
                    rest = int(text)
                    if rest < 0:
                        raise ValueError
                except Exception:
                    await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 90) –∏–ª–∏ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.")
                    return

            # === –ü–†–û–í–ï–†–ö–ê 1–ü–ú ===
            if data.get('config_one_rm_percent'):
                user = await db_manager.get_user_by_telegram_id(message.from_user.id)
                async with db_manager.pool.acquire() as conn:
                    orm = await conn.fetchrow(
                        "SELECT value FROM one_rep_max WHERE user_id = $1 AND exercise_id = $2",
                        user['id'], pending['id']
                    )
                if not orm:
                    kb = InlineKeyboardBuilder()
                    kb.button(text="–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç 1–ü–ú", callback_data=f"start_1rm_test_for_{pending['id']}")
                    kb.button(text="–î–æ–±–∞–≤–∏—Ç—å –±–µ–∑ %", callback_data="create_confirm_add_pending_ex")
                    kb.button(text="–ö –±–ª–æ–∫–∞–º", callback_data="create_back_to_blocks")
                    kb.adjust(1)
                    await message.answer(
                        "1–ü–ú –¥–ª—è —ç—Ç–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç?",
                        reply_markup=kb.as_markup()
                    )
                    return

            # === –î–û–ë–ê–í–õ–ï–ù–ò–ï –° –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò ===
            await _add_exercise_with_params(state, pending, rest, message)
            return

    # -------------------------------------------------
    # 6. –†–£–ß–ù–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –£–ü–†–ê–ñ–ù–ï–ù–ò–Ø
    # -------------------------------------------------
    if current == CreateWorkoutStates.manual_exercise_input:
        text = message.text.strip()
        manual = data.get("manual_exercises", [])
        manual.append(text)
        await state.update_data(manual_exercises=manual)

        await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ:\n\n{text}")

        kb = InlineKeyboardBuilder()
        kb.button(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="manual_add_exercise")
        kb.button(text="–ù–∞–∑–∞–¥", callback_data="back_to_constructor")
        kb.adjust(1)
        await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=kb.as_markup())
        await state.set_state(CreateWorkoutStates.adding_exercises)
        return

    # -------------------------------------------------
    # 7. RPE –ü–û–°–õ–ï –ó–ê–í–ï–†–®–ï–ù–ò–Ø –¢–†–ï–ù–ò–†–û–í–ö–ò
    # -------------------------------------------------
    if current == CreateWorkoutStates.waiting_rpe:
        try:
            rpe = int(message.text.strip())
            if not 1 <= rpe <= 10:
                raise ValueError
            wid = data.get("finishing_workout_id")
            async with db_manager.pool.acquire() as conn:
                await conn.execute(
                    """
                    INSERT INTO workout_completions (workout_id, user_id, rpe, completed_at)
                    VALUES ($1, (SELECT id FROM users WHERE telegram_id = $2), $3, now())
                    """,
                    wid, message.from_user.id, rpe
                )
            await message.answer(f"RPE {rpe} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            await state.clear()
        except Exception:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
        return

    # -------------------------------------------------
    # FALLBACK
    # -------------------------------------------------
    await message.answer("–Ø –Ω–µ –æ–∂–∏–¥–∞–ª —ç—Ç–æ—Ç –≤–≤–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")


# ‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê
# ‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê‚Üê



# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

async def _add_exercise_without_params(state: FSMContext, pending: dict, message: Message):
    data = await state.get_data()
    cur = pending['block']
    sel = data.get('selected_blocks', {})
    sel.setdefault(cur, {"description": "", "exercises": []})
    sel[cur]['exercises'].append({
        "id": pending['id'],
        "name": pending['name'],
        "sets": None, "reps_min": None, "reps_max": None,
        "one_rm_percent": None, "rest_seconds": None
    })
    await state.update_data(selected_blocks=sel, pending_exercise=None)
    for key in ["config_step", "config_sets", "config_reps_min", "config_reps_max", "config_one_rm_percent"]:
        await state.update_data({key: None})
    await message.answer(f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ *{pending['name']}* –¥–æ–±–∞–≤–ª–µ–Ω–æ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.", parse_mode="Markdown")
    await _show_block_selection(message, state)


@workouts_router.callback_query(F.data.startswith("use_in_workout_"))
async def use_exercise_in_workout(callback: CallbackQuery, state: FSMContext):
    ex_id = int(callback.data.split("_")[-1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
    current_state = await state.get_state()
    if current_state != CreateWorkoutStates.searching_exercise_for_block:
        await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.", show_alert=True)
        return

    data = await state.get_data()
    block = data.get("searching_in_block")
    if not block:
        await callback.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ç–µ—Ä—è–Ω.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    async with db_manager.pool.acquire() as conn:
        ex = await conn.fetchrow("SELECT name FROM exercises WHERE id = $1", ex_id)
    if not ex:
        await callback.answer("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–ª–æ–∫
    selected = data.get("selected_blocks", {})
    selected.setdefault(block, {"description": "", "exercises": []})
    selected[block]["exercises"].append({
        "id": ex_id,
        "name": ex["name"],
        "sets": None, "reps_min": None, "reps_max": None,
        "one_rm_percent": None, "rest_seconds": None
    })
    await state.update_data(selected_blocks=selected)

    # –°–æ–æ–±—â–µ–Ω–∏–µ + –≤–æ–∑–≤—Ä–∞—Ç –∫ –±–ª–æ–∫—É
    await callback.message.edit_text(f"**{ex['name']}** –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–ª–æ–∫ *{block}*.")
    await _show_exercises_for_block(callback.message, state)
    await callback.answer()


async def _add_exercise_with_params(state: FSMContext, pending: dict, rest: int | None, message: Message):
    data = await state.get_data()
    cur = pending['block']
    sel = data.get('selected_blocks', {})
    sel.setdefault(cur, {"description": "", "exercises": []})
    entry = {
        "id": pending['id'],
        "name": pending['name'],
        "sets": data.get('config_sets'),
        "reps_min": data.get('config_reps_min'),
        "reps_max": data.get('config_reps_max'),
        "one_rm_percent": data.get('config_one_rm_percent'),
        "rest_seconds": rest
    }
    sel[cur]['exercises'].append(entry)
    await state.update_data(selected_blocks=sel, pending_exercise=None)
    for key in ["config_step", "config_sets", "config_reps_min", "config_reps_max", "config_one_rm_percent"]:
        await state.update_data({key: None})
    await message.answer(f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ *{entry['name']}* –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–ª–æ–∫ *{cur}*.", parse_mode="Markdown")
    await _show_block_selection(message, state)



# handlers/workouts.py (–¥–æ–±–∞–≤—å —ç—Ç–æ—Ç –∫–æ–¥ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞, –ø–µ—Ä–µ–¥ register_workout_handlers)

# === –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ ===
@workouts_router.callback_query(F.data.startswith("use_in_workout_"))
async def add_exercise_with_params_start(callback: CallbackQuery, state: FSMContext):
    ex_id = int(callback.data.split("_")[-1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    current_state = await state.get_state()
    if current_state != CreateWorkoutStates.searching_exercise_for_block:
        await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.", show_alert=True)
        return

    data = await state.get_data()
    block = data.get("searching_in_block")
    if not block:
        await callback.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ç–µ—Ä—è–Ω.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    async with db_manager.pool.acquire() as conn:
        ex = await conn.fetchrow("SELECT name, test_type FROM exercises WHERE id = $1", ex_id)
    if not ex:
        await callback.answer("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(
        pending_ex_id=ex_id,
        pending_ex_name=ex["name"],
        pending_ex_block=block,
        param_step="sets"  # –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–¥—Ö–æ–¥–æ–≤
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º 1–ü–ú
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    one_rm = None
    if ex['test_type'] == 'strength':  # —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–∏–ª–æ–≤—ã—Ö
        async with db_manager.pool.acquire() as conn:
            orm = await conn.fetchrow("SELECT value FROM one_rep_max WHERE user_id = $1 AND exercise_id = $2", user['id'], ex_id)
        if orm:
            one_rm = orm['value']

    await state.update_data(pending_one_rm=one_rm)

    # –ù–∞—á–∏–Ω–∞–µ–º –≤–≤–æ–¥
    await callback.message.edit_text(
        f"**–î–æ–±–∞–≤–ª–µ–Ω–∏–µ: {ex['name']}**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`–ø–æ–¥—Ö–æ–¥—ã –ø–æ–≤—Ç–æ—Ä—ã %1–ü–ú –æ—Ç–¥—ã—Ö_—Å–µ–∫`\n\n"
        "–ü—Ä–∏–º–µ—Ä: `3 10 75 90`\n"
        "‚Ä¢ 3 –ø–æ–¥—Ö–æ–¥–∞\n"
        "‚Ä¢ 10 –ø–æ–≤—Ç–æ—Ä–æ–≤\n"
        f"‚Ä¢ 75% –æ—Ç 1–ü–ú ({one_rm} –∫–≥ –µ—Å–ª–∏ –ø—Ä–æ–π–¥–µ–Ω —Ç–µ—Å—Ç)\n"
        "‚Ä¢ 90 —Å–µ–∫ –æ—Ç–¥—ã—Ö–∞\n\n"
        "–ò–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ %1–ü–ú: `3 10 - 90`",
        parse_mode="Markdown"
    )
    await state.set_state(CreateWorkoutStates.configuring_exercise)
    await callback.answer()

# === –û–ë–†–ê–ë–û–¢–ö–ê –í–í–û–î–ê –ü–ê–†–ê–ú–ï–¢–†–û–í ===


# handlers/workouts.py (–¥–æ–±–∞–≤—å —ç—Ç–æ—Ç –∫–æ–¥ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞, –ø–µ—Ä–µ–¥ register_workout_handlers)

# === –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ ===
@workouts_router.callback_query(F.data.startswith("use_in_workout_"))
async def add_exercise_with_params_start(callback: CallbackQuery, state: FSMContext):
    ex_id = int(callback.data.split("_")[-1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    current_state = await state.get_state()
    if current_state != CreateWorkoutStates.searching_exercise_for_block:
        await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.", show_alert=True)
        return

    data = await state.get_data()
    block = data.get("searching_in_block")
    if not block:
        await callback.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ç–µ—Ä—è–Ω.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    async with db_manager.pool.acquire() as conn:
        ex = await conn.fetchrow("SELECT name, test_type FROM exercises WHERE id = $1", ex_id)
    if not ex:
        await callback.answer("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.update_data(
        pending_ex_id=ex_id,
        pending_ex_name=ex["name"],
        pending_ex_block=block,
        param_step="sets"  # –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–¥—Ö–æ–¥–æ–≤
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º 1–ü–ú
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    one_rm = None
    if ex['test_type'] == 'strength':  # —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–∏–ª–æ–≤—ã—Ö
        async with db_manager.pool.acquire() as conn:
            orm = await conn.fetchrow("SELECT value FROM one_rep_max WHERE user_id = $1 AND exercise_id = $2", user['id'], ex_id)
        if orm:
            one_rm = orm['value']

    await state.update_data(pending_one_rm=one_rm)

    # –ù–∞—á–∏–Ω–∞–µ–º –≤–≤–æ–¥
    await callback.message.edit_text(
        f"**–î–æ–±–∞–≤–ª–µ–Ω–∏–µ: {ex['name']}**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`–ø–æ–¥—Ö–æ–¥—ã –ø–æ–≤—Ç–æ—Ä—ã %1–ü–ú –æ—Ç–¥—ã—Ö_—Å–µ–∫`\n\n"
        "–ü—Ä–∏–º–µ—Ä: `3 10 75 90`\n"
        "‚Ä¢ 3 –ø–æ–¥—Ö–æ–¥–∞\n"
        "‚Ä¢ 10 –ø–æ–≤—Ç–æ—Ä–æ–≤\n"
        f"‚Ä¢ 75% –æ—Ç 1–ü–ú ({one_rm} –∫–≥ –µ—Å–ª–∏ –ø—Ä–æ–π–¥–µ–Ω —Ç–µ—Å—Ç)\n"
        "‚Ä¢ 90 —Å–µ–∫ –æ—Ç–¥—ã—Ö–∞\n\n"
        "–ò–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ %1–ü–ú: `3 10 - 90`",
        parse_mode="Markdown"
    )
    await state.set_state(CreateWorkoutStates.configuring_exercise)
    await callback.answer()

# === –û–ë–†–ê–ë–û–¢–ö–ê –í–í–û–î–ê –ü–ê–†–ê–ú–ï–¢–†–û–í ===
async def process_param_input(message: Message, state: FSMContext):
    text = message.text.strip()
    data = await state.get_data()
    ex_id = data.get("pending_ex_id")
    ex_name = data.get("pending_ex_name")
    block = data.get("pending_ex_block")
    one_rm = data.get("pending_one_rm")

    if not all([ex_id, ex_name, block]):
        await message.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ç–µ—Ä—è–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    parts = text.split()
    if len(parts) != 4:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: `3 10 75 90` –∏–ª–∏ `3 10 - 90`")
        return

    try:
        sets = int(parts[0])
        reps = int(parts[1])
        percent = parts[2]
        rest = int(parts[3])

        if sets <= 0 or reps <= 0 or rest < 0:
            raise ValueError

        one_rm_percent = None
        if percent != "-":
            one_rm_percent = int(percent)
            if not (0 < one_rm_percent <= 200):
                raise ValueError

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ —á–∏—Å–ª–∞. –ü–æ–¥—Ö–æ–¥—ã/–ø–æ–≤—Ç–æ—Ä—ã/%/–æ—Ç–¥—ã—Ö –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ü–µ–ª—ã–º–∏.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å
    entry = {
        "id": ex_id,
        "name": ex_name,
        "sets": sets,
        "reps_min": reps,
        "reps_max": reps,
        "one_rm_percent": one_rm_percent,
        "rest_seconds": rest
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–ª–æ–∫
    selected = data.get("selected_blocks", {})
    selected.setdefault(block, {"description": "", "exercises": []})
    selected[block]["exercises"].append(entry)
    await state.update_data(selected_blocks=selected)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    param_text = f"{sets}√ó{reps}"
    if one_rm_percent:
        if one_rm:
            weight = round(one_rm * one_rm_percent / 100)
            param_text += f" ({weight} –∫–≥)"
        else:
            param_text += f" ({one_rm_percent}% –æ—Ç 1–ü–ú)"
    if rest > 0:
        param_text += f", –æ—Ç–¥—ã—Ö {rest} —Å–µ–∫"

    await message.answer(f"**{ex_name}** –¥–æ–±–∞–≤–ª–µ–Ω–æ: {param_text}")
    await _show_exercises_for_block(message, state)
    await state.clear()  # –æ—á–∏—â–∞–µ–º pending



# === –î–û–ë–ê–í–õ–ï–ù–ò–ï –£–ü–†–ê–ñ–ù–ï–ù–ò–Ø –° –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò (3 10 75 90) ===
@workouts_router.callback_query(F.data.startswith("use_in_workout_"))
async def add_exercise_with_params_start(callback: CallbackQuery, state: FSMContext):
    ex_id = int(callback.data.split("_")[-1])
    
    current_state = await state.get_state()
    if current_state != CreateWorkoutStates.searching_exercise_for_block:
        await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.", show_alert=True)
        return

    data = await state.get_data()
    block = data.get("searching_in_block")
    if not block:
        await callback.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ç–µ—Ä—è–Ω.", show_alert=True)
        return

    async with db_manager.pool.acquire() as conn:
        ex = await conn.fetchrow("SELECT name, test_type FROM exercises WHERE id = $1", ex_id)
    if not ex:
        await callback.answer("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    one_rm = None
    if ex['test_type'] == 'strength':
        async with db_manager.pool.acquire() as conn:
            orm = await conn.fetchrow("SELECT value FROM one_rep_max WHERE user_id = $1 AND exercise_id = $2", user['id'], ex_id)
        if orm:
            one_rm = orm['value']

    await state.update_data(
        pending_ex_id=ex_id,
        pending_ex_name=ex["name"],
        pending_ex_block=block,
        pending_one_rm=one_rm,
        param_step="sets"
    )

    await callback.message.edit_text(
        f"**–î–æ–±–∞–≤–ª–µ–Ω–∏–µ: {ex['name']}**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`–ø–æ–¥—Ö–æ–¥—ã –ø–æ–≤—Ç–æ—Ä—ã %1–ü–ú –æ—Ç–¥—ã—Ö_—Å–µ–∫`\n\n"
        "–ü—Ä–∏–º–µ—Ä: `3 10 75 90`\n"
        "‚Ä¢ 3 –ø–æ–¥—Ö–æ–¥–∞\n"
        "‚Ä¢ 10 –ø–æ–≤—Ç–æ—Ä–æ–≤\n"
        f"‚Ä¢ 75% –æ—Ç 1–ü–ú ({one_rm} –∫–≥ –µ—Å–ª–∏ –ø—Ä–æ–π–¥–µ–Ω —Ç–µ—Å—Ç)\n"
        "‚Ä¢ 90 —Å–µ–∫ –æ—Ç–¥—ã—Ö–∞\n\n"
        "–ò–ª–∏ –±–µ–∑ %: `3 10 - 90`",
        parse_mode="Markdown"
    )
    await state.set_state(CreateWorkoutStates.configuring_exercise)
    await callback.answer()





# === –î–û–ë–ê–í–õ–ï–ù–ò–ï –£–ü–†–ê–ñ–ù–ï–ù–ò–Ø –° –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò ===
@workouts_router.callback_query(F.data.startswith("use_in_workout_"))
async def add_exercise_with_params(callback: CallbackQuery, state: FSMContext):
    ex_id = int(callback.data.split("_")[-1])
    
    current_state = await state.get_state()
    if current_state != CreateWorkoutStates.searching_exercise_for_block:
        await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.", show_alert=True)
        return

    data = await state.get_data()
    block = data.get("searching_in_block")
    if not block:
        await callback.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ç–µ—Ä—è–Ω.", show_alert=True)
        return

    async with db_manager.pool.acquire() as conn:
        ex = await conn.fetchrow("SELECT name, test_type FROM exercises WHERE id = $1", ex_id)
    if not ex:
        await callback.answer("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    one_rm = None
    if ex['test_type'] == 'strength':
        async with db_manager.pool.acquire() as conn:
            orm = await conn.fetchrow("SELECT value FROM one_rep_max WHERE user_id = $1 AND exercise_id = $2", user['id'], ex_id)
        if orm:
            one_rm = orm['value']

    await state.update_data(
        pending_ex_id=ex_id,
        pending_ex_name=ex["name"],
        pending_ex_block=block,
        pending_one_rm=one_rm
    )

    await callback.message.edit_text(
        f"**–î–æ–±–∞–≤–ª–µ–Ω–∏–µ: {ex['name']}**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
        "`–ø–æ–¥—Ö–æ–¥—ã –ø–æ–≤—Ç–æ—Ä—ã %1–ü–ú –æ—Ç–¥—ã—Ö`\n\n"
        "–ü—Ä–∏–º–µ—Ä: `3 10 75 90`\n"
        f"‚Ä¢ 75% –æ—Ç 1–ü–ú = {round(one_rm * 0.75) if one_rm else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} –∫–≥\n"
        "‚Ä¢ –ò–ª–∏ –±–µ–∑ %: `3 10 - 90`",
        parse_mode="Markdown"
    )
    await state.set_state(CreateWorkoutStates.configuring_exercise)
    await callback.answer()

# ----------------- REGISTER -----------------
def register_workout_handlers(dp):
    #dp.include_router(workouts_router)
    logger.info("üèãÔ∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


__all__ = ["workouts_router", "register_workout_handlers", "process_workout_text_input"]