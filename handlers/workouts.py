# handlers/workouts.py
# -*- coding: utf-8 -*-
import logging
from typing import Optional, Dict, Any, List
from datetime import datetime

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database import db_manager
from states.workout_states import CreateWorkoutStates

logger = logging.getLogger(__name__)
workouts_router = Router()

# ----------------- UTIL -----------------
def parse_int_suffix(callback_data: str) -> Optional[int]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—É—Ñ—Ñ–∏–∫—Å –∫–∞–∫ int, –∏–Ω–∞—á–µ None."""
    try:
        part = callback_data.split("_")[-1]
        if part.isdigit():
            return int(part)
        return None
    except Exception:
        return None

def parse_callback_id(callback_data: str, prefix: Optional[str] = None) -> int:
    """–ü–∞—Ä—Å–∏—Ç id –∏ –±—Ä–æ—Å–∞–µ—Ç ValueError –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏."""
    if prefix and callback_data.startswith(prefix):
        tail = callback_data[len(prefix):]
        if tail.isdigit():
            return int(tail)
        raise ValueError(f"–ù–µ—Ç —á–∏—Å–ª–æ–≤–æ–≥–æ ID –≤ callback: {callback_data}")
    # fallback: –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑–¥–µ–ª –ø–æ—Å–ª–µ _
    n = parse_int_suffix(callback_data)
    if n is None:
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑ callback: {callback_data}")
    return n

async def safe_edit_or_send(message, text, reply_markup=None, parse_mode=None):
    """–ü–æ–ø—ã—Ç–∫–∞ edit_text, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî send message."""
    try:
        await message.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
    except Exception:
        await message.answer(text, reply_markup=reply_markup, parse_mode=parse_mode)

# ----------------- MENU -----------------
@workouts_router.callback_query(F.data.in_({"workouts_menu", "menu_workouts", "workouts_menu"}))
async def workouts_menu(callback: CallbackQuery):
    logger.info("üîπ –û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (callback=%s)", callback.data)
    kb = InlineKeyboardBuilder()
    kb.button(text="üèãÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="my_workouts")
    kb.button(text="üîç –ù–∞–π—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="find_workout")
    kb.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="create_workout")  # legacy short
    kb.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É (–Ω–æ–≤–æ–µ)", callback_data="create_workout_new")  # optional
    kb.button(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="workout_statistics")
    kb.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    kb.adjust(2)
    await safe_edit_or_send(callback.message, "üèãÔ∏è **–ú–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.as_markup(), parse_mode="Markdown")
    await callback.answer()

# ----------------- MY WORKOUTS -----------------
@workouts_router.callback_query(F.data.in_({"my_workouts", "workouts_my"}))
async def my_workouts(callback: CallbackQuery):
    logger.info("üîπ –ü–æ–ª—É—á–µ–Ω callback: my_workouts (from %s)", callback.from_user.id)
    try:
        user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
        async with db_manager.pool.acquire() as conn:
            rows = await conn.fetch("""
                SELECT w.id, w.name, w.unique_id, coalesce(count_we,0) as exercise_count, w.estimated_duration_minutes
                FROM (
                    SELECT w.*, (SELECT COUNT(*) FROM workout_exercises we WHERE we.workout_id = w.id) as count_we
                    FROM workouts w
                    WHERE w.created_by = $1 AND coalesce(w.is_active, true) = true
                    ORDER BY w.created_at DESC
                    LIMIT 50
                ) w
            """, user['id'])
        if not rows:
            kb = InlineKeyboardBuilder()
            kb.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é", callback_data="create_workout")
            kb.button(text="üîô –í –º–µ–Ω—é", callback_data="workouts_menu")
            kb.adjust(1)
            await safe_edit_or_send(callback.message, "üèãÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.", reply_markup=kb.as_markup())
            await callback.answer()
            return

        text = f"üèãÔ∏è **–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ({len(rows)}):**\n\n"
        kb = InlineKeyboardBuilder()
        for r in rows:
            cnt = r['exercise_count'] or 0
            text += f"**{r['name']}** ‚Äî {cnt} —É–ø—Ä. | –ö–æ–¥ `{r['unique_id']}`\n"
            kb.button(text=f"{r['name']} ({cnt})", callback_data=f"view_workout_{r['id']}")
        kb.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å", callback_data="create_workout")
        kb.button(text="üîô –í –º–µ–Ω—é", callback_data="workouts_menu")
        kb.adjust(1)
        await safe_edit_or_send(callback.message, text, reply_markup=kb.as_markup(), parse_mode="Markdown")
        await callback.answer()
    except Exception as e:
        logger.exception("my_workouts error: %s", e)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", show_alert=True)

# ----------------- VIEW DETAILS -----------------
@workouts_router.callback_query(F.data.startswith("view_workout_"))
async def view_workout_details(callback: CallbackQuery):
    try:
        wid = parse_callback_id(callback.data, "view_workout_")
        async with db_manager.pool.acquire() as conn:
            workout = await conn.fetchrow("""
                SELECT w.*, u.first_name as creator_name, u.last_name as creator_lastname
                FROM workouts w
                LEFT JOIN users u ON w.created_by = u.id
                WHERE w.id = $1 AND coalesce(w.is_active, true) = true
            """, wid)
            if not workout:
                await callback.answer("‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
            exercises = await conn.fetch("""
                SELECT we.*, e.name as exercise_name, e.muscle_group, e.category
                FROM workout_exercises we
                LEFT JOIN exercises e ON e.id = we.exercise_id
                WHERE we.workout_id = $1
                ORDER BY
                    CASE we.phase WHEN 'warmup' THEN 1 WHEN 'nervousprep' THEN 2 WHEN 'main' THEN 3 WHEN 'cooldown' THEN 4 ELSE 5 END,
                    we.order_in_phase
            """, wid)
        text = f"üè∑ **{workout['name']}**\n\n"
        if workout.get('description'):
            text += f"üìù _{workout['description']}_\n\n"
        text += f"üë§ –ê–≤—Ç–æ—Ä: {(workout.get('creator_name') or '')} {workout.get('creator_lastname') or ''}\n"
        text += f"‚è± –í—Ä–µ–º—è: ~{workout.get('estimated_duration_minutes') or 0} –º–∏–Ω\n"
        text += f"üí° –ö–æ–¥: `{workout.get('unique_id')}`\n\n"
        if exercises:
            phase_map = {'warmup': 'üî• –†–∞–∑–º–∏–Ω–∫–∞', 'nervousprep': '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ù–°', 'main': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è', 'cooldown': 'üßò –ó–∞–º–∏–Ω–∫–∞'}
            cur = None
            for ex in exercises:
                if ex['phase'] != cur:
                    cur = ex['phase']
                    text += f"\n**{phase_map.get(cur, cur)}:**\n"
                reps = f"{ex['reps_min']}" if ex['reps_min'] == ex['reps_max'] else f"{ex['reps_min']}-{ex['reps_max']}"
                text += f"‚Ä¢ **{ex['exercise_name']}** ‚Äî {ex['sets']}√ó{reps}"
                if ex.get('one_rm_percent'):
                    text += f" ({ex['one_rm_percent']}% 1–ü–ú)"
                if ex.get('rest_seconds'):
                    rs = ex['rest_seconds']
                    text += f" | –æ—Ç–¥—ã—Ö {rs//60}–º{rs%60}s" if rs >= 60 else f" | –æ—Ç–¥—ã—Ö {rs}s"
                text += "\n"
        else:
            text += "‚ö†Ô∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç."
        kb = InlineKeyboardBuilder()
        kb.button(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data=f"start_workout_{wid}")
        kb.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"workout_stats_{wid}")
        kb.button(text="üîó –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥", callback_data=f"copy_workout_code_{wid}")
        kb.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_workout_{wid}")
        kb.button(text="üîô –í –º–æ–∏", callback_data="my_workouts")
        kb.adjust(2, 2)
        await safe_edit_or_send(callback.message, text, reply_markup=kb.as_markup(), parse_mode="Markdown")
        await callback.answer()
    except Exception as e:
        logger.exception("view_workout_details error: %s", e)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", show_alert=True)

# ----------------- CREATE WORKOUT FLOW (FSM) -----------------
# We use create_ prefix for creation-related callbacks to avoid conflicts with player_workouts.py
@workouts_router.callback_query(F.data.in_({"create_workout", "create_workout_new", "workouts_create"}))
async def start_create_workout(callback: CallbackQuery, state: FSMContext):
    logger.info("üîπ –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (callback=%s) by %s", callback.data, callback.from_user.id)
    # ask name
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="create_cancel_workout")
    kb.adjust(1)
    await safe_edit_or_send(callback.message, "üèãÔ∏è **–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=kb.as_markup(), parse_mode="Markdown")
    await state.set_state(CreateWorkoutStates.waiting_workout_name)
    await callback.answer()

@workouts_router.callback_query(F.data.in_({"create_skip_description", "skip_workout_description", "skip_description"}))
async def skip_workout_description(callback: CallbackQuery, state: FSMContext):
    # allow legacy names too
    await state.update_data(description="")
    await show_block_selection_menu(callback.message, state)
    await callback.answer()

@workouts_router.callback_query(F.data == "create_cancel_workout")
async def create_cancel_workout(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    kb = InlineKeyboardBuilder()
    kb.button(text="üèãÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="my_workouts")
    kb.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å", callback_data="create_workout")
    kb.adjust(1)
    await safe_edit_or_send(callback.message, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.as_markup())
    await callback.answer()

async def show_block_selection_menu(message: Message, state: FSMContext):
    data = await state.get_data()
    name = data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    selected = data.get('selected_blocks', {})
    text = f"üîß **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {name}**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫–∏ –∏ –¥–æ–±–∞–≤—å—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n\n"
    blocks = [('warmup', 'üî• –†–∞–∑–º–∏–Ω–∫–∞'), ('nervousprep', '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ù–°'), ('main', 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è'), ('cooldown', 'üßò –ó–∞–º–∏–Ω–∫–∞')]
    for k, label in blocks:
        status = "‚úÖ" if k in selected else "‚≠ï"
        cnt = len(selected.get(k, {}).get('exercises', [])) if k in selected else 0
        text += f"{status} {label} ({cnt} —É–ø—Ä.)\n"
    kb = InlineKeyboardBuilder()
    # use create_ prefix to avoid conflict
    kb.button(text="‚ûï –†–∞–∑–º–∏–Ω–∫–∞", callback_data="create_add_warmup_block")
    kb.button(text="‚ûï –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ù–°", callback_data="create_add_cns_block")
    kb.button(text="‚ûï –û—Å–Ω–æ–≤–Ω–∞—è", callback_data="create_add_main_block")
    kb.button(text="‚ûï –ó–∞–º–∏–Ω–∫–∞", callback_data="create_add_cooldown_block")
    kb.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="create_finish_workout")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="create_cancel_workout")
    kb.adjust(2)
    try:
        await message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="Markdown")
    except Exception:
        await message.answer(text, reply_markup=kb.as_markup(), parse_mode="Markdown")
    await state.set_state(CreateWorkoutStates.selecting_blocks)

# handle adding block - creation namespace
@workouts_router.callback_query(F.data.in_({"create_add_warmup_block", "create_add_cns_block", "create_add_main_block", "create_add_cooldown_block"}))
async def create_add_block(callback: CallbackQuery, state: FSMContext):
    mapping = {
        "create_add_warmup_block": "warmup",
        "create_add_cns_block": "nervousprep",
        "create_add_main_block": "main",
        "create_add_cooldown_block": "cooldown"
    }
    phase = mapping.get(callback.data)
    if not phase:
        await callback.answer()
        return
    await state.update_data(current_block=phase)
    kb = InlineKeyboardBuilder()
    kb.button(text="üìù –î–æ–±–∞–≤–∏—Ç—å/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–∫–∞", callback_data="create_add_block_description")
    kb.button(text="üîç –ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π", callback_data="create_search_ex_for_block")
    kb.button(text="üîô –ö –≤—ã–±–æ—Ä—É –±–ª–æ–∫–æ–≤", callback_data="create_back_to_blocks")
    kb.adjust(1)
    names = {'warmup': '–†–∞–∑–º–∏–Ω–∫–∞', 'nervousprep': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ù–°', 'main': '–û—Å–Ω–æ–≤–Ω–∞—è', 'cooldown': '–ó–∞–º–∏–Ω–∫–∞'}
    await safe_edit_or_send(callback.message, f"üìã **{names.get(phase)}**\n\n–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=kb.as_markup(), parse_mode="Markdown")
    await callback.answer()

@workouts_router.callback_query(F.data == "create_add_block_description")
async def create_add_block_description(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞:")
    await state.set_state(CreateWorkoutStates.adding_block_description)
    await callback.answer()

# search exercises for block (creation namespace)
@workouts_router.callback_query(F.data == "create_search_ex_for_block")
async def create_search_ex_for_block(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üîç –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–∏—Å–µ–¥, –∂–∏–º)")
    await state.set_state("searching_exercise_for_block")
    await callback.answer()

# handle exercise search result text
@workouts_router.callback_query(F.data.startswith("create_add_ex_"))
async def create_add_ex_direct(callback: CallbackQuery, state: FSMContext):
    # pattern create_add_ex_{id}
    ex_id = parse_int_suffix(callback.data.split("create_add_ex_")[-1])
    await callback.answer()

# add exercise callback (legacy and create_ compatible)
@workouts_router.callback_query(F.data.startswith("add_block_ex_") | F.data.startswith("create_add_block_ex_"))
async def add_block_exercise(callback: CallbackQuery, state: FSMContext):
    try:
        # accept either add_block_ex_123 or create_add_block_ex_123
        prefix = "add_block_ex_"
        if callback.data.startswith("create_add_block_ex_"):
            prefix = "create_add_block_ex_"
        ex_id = parse_callback_id(callback.data, prefix)
        async with db_manager.pool.acquire() as conn:
            row = await conn.fetchrow("SELECT id, name FROM exercises WHERE id = $1", ex_id)
        if not row:
            await callback.answer("‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        data = await state.get_data()
        cur = data.get('current_block', 'main')
        sel = data.get('selected_blocks', {})
        sel.setdefault(cur, {"description": "", "exercises": []})
        sel[cur]["exercises"].append({
            "id": row['id'],
            "name": row['name'],
            "sets": 3,
            "reps_min": 8,
            "reps_max": 12,
            "one_rm_percent": None,
            "rest_seconds": 90
        })
        await state.update_data(selected_blocks=sel)
        await callback.message.edit_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: *{row['name']}*", parse_mode="Markdown")
        await callback.answer()
    except ValueError:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å ID —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", show_alert=True)
    except Exception as e:
        logger.exception("add_block_exercise error: %s", e)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", show_alert=True)

# finish creation
@workouts_router.callback_query(F.data.in_({"create_finish_workout", "finish_workout_creation", "finish_workout"}))
async def finish_create_workout(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        sel = data.get('selected_blocks', {})
        total = sum(len(b.get('exercises', [])) for b in sel.values())
        if total == 0:
            await callback.answer("‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ!", show_alert=True)
            return
        user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
        async with db_manager.pool.acquire() as conn:
            wid = await conn.fetchval("""
                INSERT INTO workouts (name, description, created_by, visibility, difficulty_level, estimated_duration_minutes, created_at, is_active)
                VALUES ($1,$2,$3,'private','intermediate',$4, now(), true) RETURNING id
            """, data.get('name'), data.get('description',''), user['id'], total * 8)
            order = 0
            for phase, block in sel.items():
                for ex in block.get('exercises', []):
                    order += 1
                    await conn.execute("""
                        INSERT INTO workout_exercises (workout_id, exercise_id, phase, order_in_phase, sets, reps_min, reps_max, one_rm_percent, rest_seconds, notes)
                        VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)
                    """, wid, ex['id'], phase, order, ex['sets'], ex['reps_min'], ex['reps_max'], ex.get('one_rm_percent'), ex.get('rest_seconds'), ex.get('notes'))
            unique_id = await conn.fetchval("SELECT unique_id FROM workouts WHERE id = $1", wid)
        await callback.message.edit_text(f"üéâ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! –ö–æ–¥: `{unique_id}`\nüèãÔ∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {total}", parse_mode="Markdown")
        await state.clear()
        await callback.answer()
    except Exception as e:
        logger.exception("finish_create_workout error: %s", e)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", show_alert=True)

# ----------------- START / FINISH (player-side) -----------------
@workouts_router.callback_query(F.data.startswith("start_workout_"))
async def start_workout(callback: CallbackQuery):
    wid = parse_int_suffix(callback.data)
    if wid is None:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", show_alert=True)
        return
    async with db_manager.pool.acquire() as conn:
        workout = await conn.fetchrow("SELECT name, unique_id FROM workouts WHERE id = $1", wid)
    if not workout:
        await callback.answer("‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data=f"finish_workout_{wid}")
    kb.button(text="üìã –î–µ—Ç–∞–ª–∏", callback_data=f"view_workout_{wid}")
    kb.adjust(1)
    await safe_edit_or_send(callback.message, f"‚ñ∂Ô∏è –ù–∞—á–∏–Ω–∞–µ–º: **{workout['name']}**\n\n–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ ¬´–ó–∞–≤–µ—Ä—à–∏–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É¬ª", reply_markup=kb.as_markup(), parse_mode="Markdown")
    await callback.answer()

@workouts_router.callback_query(F.data.startswith("finish_workout_"))
async def finish_workout(callback: CallbackQuery, state: FSMContext):
    # BE SAFE: ensure last part is numeric
    n = parse_int_suffix(callback.data)
    if n is None:
        logger.warning("‚ùó finish_workout got non-numeric suffix: %s", callback.data)
        await callback.answer()
        return
    wid = n
    await state.update_data(finishing_workout_id=wid)
    await callback.message.edit_text("‚úÖ –û—Ü–µ–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ —à–∫–∞–ª–µ 1-10 (RPE):")
    await state.set_state("waiting_rpe")
    await callback.answer()

# ----------------- copying code / edit / delete / stats -----------------
@workouts_router.callback_query(F.data.startswith("copy_workout_code_"))
async def copy_workout_code(callback: CallbackQuery):
    try:
        wid = parse_callback_id(callback.data, "copy_workout_code_")
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥", show_alert=True)
        return
    async with db_manager.pool.acquire() as conn:
        row = await conn.fetchrow("SELECT unique_id, name FROM workouts WHERE id = $1", wid)
    if not row:
        await callback.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    text = f"üîó –ö–æ–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: `{row['unique_id']}`\n{row['name']}"
    kb = InlineKeyboardBuilder()
    kb.button(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data=f"view_workout_{wid}")
    kb.button(text="üîô –í –º–æ–∏", callback_data="my_workouts")
    kb.adjust(1)
    await safe_edit_or_send(callback.message, text, reply_markup=kb.as_markup(), parse_mode="Markdown")
    await callback.answer("–ö–æ–¥ –ø–æ–∫–∞–∑–∞–Ω")

@workouts_router.callback_query(F.data.startswith("edit_workout_"))
async def edit_workout(callback: CallbackQuery, state: FSMContext):
    try:
        wid = parse_callback_id(callback.data, "edit_workout_")
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID", show_alert=True)
        return
    async with db_manager.pool.acquire() as conn:
        w = await conn.fetchrow("SELECT id, name, description, created_by FROM workouts WHERE id = $1", wid)
    if not w:
        await callback.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    if w['created_by'] != user['id']:
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", show_alert=True)
        return
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"rename_workout_{wid}")
    kb.button(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"change_desc_workout_{wid}")
    kb.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_workout_{wid}")
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"view_workout_{wid}")
    kb.adjust(1)
    await safe_edit_or_send(callback.message, f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {w['name']}", reply_markup=kb.as_markup())
    await callback.answer()

@workouts_router.callback_query(F.data.startswith("rename_workout_"))
async def rename_workout(callback: CallbackQuery, state: FSMContext):
    n = parse_int_suffix(callback.data)
    if n is None:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID", show_alert=True)
        return
    await state.update_data(editing_workout_id=n)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
    await state.set_state("renaming_workout")
    await callback.answer()

@workouts_router.callback_query(F.data.startswith("change_desc_workout_"))
async def change_desc_workout(callback: CallbackQuery, state: FSMContext):
    n = parse_int_suffix(callback.data)
    if n is None:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID", show_alert=True)
        return
    await state.update_data(editing_workout_id=n)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    await state.set_state("changing_workout_description")
    await callback.answer()

@workouts_router.callback_query(F.data.startswith("delete_workout_"))
async def delete_workout(callback: CallbackQuery):
    n = parse_int_suffix(callback.data)
    if n is None:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID", show_alert=True)
        return
    wid = n
    try:
        async with db_manager.pool.acquire() as conn:
            await conn.execute("UPDATE workouts SET is_active = false WHERE id = $1", wid)
        await callback.message.edit_text("‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
        await callback.answer()
    except Exception as e:
        logger.exception("delete_workout error: %s", e)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

# ----------------- CENTRAL TEXT HANDLER -----------------
async def process_workout_text_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/–ø–æ–∏—Å–∫–∞."""
    current_state = await state.get_state()
    try:
        # name
        if current_state in (CreateWorkoutStates.waiting_workout_name, CreateWorkoutStates.waiting_workout_name.state, "waiting_workout_name", "waiting_name"):
            name = message.text.strip()
            if len(name) < 3:
                await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω. 3 —Å–∏–º–≤–æ–ª–∞).")
                return
            await state.update_data(name=name)
            kb = InlineKeyboardBuilder()
            kb.button(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="create_skip_description")
            kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="create_cancel_workout")
            kb.adjust(2)
            await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: *{name}*\n\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª", reply_markup=kb.as_markup(), parse_mode="Markdown")
            await state.set_state(CreateWorkoutStates.waiting_workout_description)
            return

        # description
        if current_state in (CreateWorkoutStates.waiting_workout_description, CreateWorkoutStates.waiting_workout_description.state, "waiting_description", "waiting_workout_description"):
            desc = message.text.strip()
            await state.update_data(description=desc)
            await show_block_selection_menu(message, state)
            return

        # block description
        if current_state in (CreateWorkoutStates.adding_block_description, CreateWorkoutStates.adding_block_description.state, "adding_block_description"):
            desc = message.text.strip()
            d = await state.get_data()
            cur = d.get('current_block', 'main')
            sel = d.get('selected_blocks', {})
            sel.setdefault(cur, {"description": "", "exercises": []})
            sel[cur]['description'] = desc
            await state.update_data(selected_blocks=sel)
            await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
            await show_block_selection_menu(message, state)
            return

        # searching exercises for block
        if current_state in ("searching_exercise_for_block",):
            q = message.text.strip().lower()
            async with db_manager.pool.acquire() as conn:
                exs = await conn.fetch("""
                    SELECT id, name, category, muscle_group
                    FROM exercises
                    WHERE LOWER(name) LIKE $1 OR LOWER(category) LIKE $1 OR LOWER(muscle_group) LIKE $1
                    ORDER BY name
                    LIMIT 10
                """, f"%{q}%")
            if not exs:
                await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return
            kb = InlineKeyboardBuilder()
            for e in exs:
                cat = e.get('category') or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
                # we provide create_add_block_ex_ for creation flow
                kb.button(text=f"üí™ {e['name']} ({cat})", callback_data=f"create_add_block_ex_{e['id']}")
            kb.button(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="create_search_ex_for_block")
            kb.button(text="üîô –ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º –±–ª–æ–∫–∞", callback_data="create_back_to_blocks")
            kb.adjust(1)
            await message.answer(f"üîé –ù–∞–π–¥–µ–Ω–æ: {len(exs)}", reply_markup=kb.as_markup())
            await state.set_state("searching_exercise_for_block")
            return

        # renaming workout
        if current_state == "renaming_workout":
            new = message.text.strip()
            if len(new) < 3:
                await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
                return
            d = await state.get_data()
            wid = d.get('editing_workout_id')
            if not wid:
                await message.answer("‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ç–µ—Ä—è–Ω.")
                await state.clear()
                return
            async with db_manager.pool.acquire() as conn:
                await conn.execute("UPDATE workouts SET name = $1 WHERE id = $2", new, wid)
            await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
            await state.clear()
            return

        # changing workout description
        if current_state == "changing_workout_description":
            new = message.text.strip()
            d = await state.get_data()
            wid = d.get('editing_workout_id')
            if not wid:
                await message.answer("‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Ç–µ—Ä—è–Ω.")
                await state.clear()
                return
            async with db_manager.pool.acquire() as conn:
                await conn.execute("UPDATE workouts SET description = $1 WHERE id = $2", new, wid)
            await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
            await state.clear()
            return

        # waiting for RPE
        if current_state == "waiting_rpe":
            try:
                rpe_val = int(message.text.strip())
                if rpe_val < 1 or rpe_val > 10:
                    await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
                    return
                await state.update_data(last_rpe=rpe_val)
                await message.answer("üì¶ –£–∫–∞–∂–∏—Ç–µ –æ–±—â–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Å (–∫–≥) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")
                await state.set_state("waiting_weight")
            except ValueError:
                await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
            return

        # waiting for weight after workout finish
        if current_state == "waiting_weight":
            d = await state.get_data()
            wid = d.get('finishing_workout_id')
            txt = message.text.strip().lower()
            weight_val = None
            if txt not in ("–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip", "-"):
                try:
                    weight_val = float(txt.replace(",", "."))
                except Exception:
                    await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–≤ –∫–≥) –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
                    return
            user = await db_manager.get_user_by_telegram_id(message.from_user.id)
            rpe = d.get('last_rpe', None)
            created = datetime.utcnow()
            # try save session/results (best-effort)
            try:
                async with db_manager.pool.acquire() as conn:
                    await conn.execute("""
                        INSERT INTO workout_sessions (user_id, workout_id, started_at, completed_at, status, rpe)
                        VALUES ($1,$2,now(), now(), 'completed', $3)
                    """, user['id'], wid, rpe)
            except Exception:
                logger.exception("Failed to insert workout_session")
            await message.answer("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω (–∏–ª–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å). –°–ø–∞—Å–∏–±–æ!")
            await state.clear()
            return

    except Exception as e:
        logger.exception("process_workout_text_input error: %s", e)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞.")
        await state.clear()

# ----------------- REGISTER -----------------
def register_workout_handlers(dp):
    """–ü–æ–¥–∫–ª—é—á–∏—Ç—å router –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É. –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–∑–æ–≤–µ."""
    try:
        dp.include_router(workouts_router)
        logger.info("‚úÖ workouts_router –ø–æ–¥–∫–ª—é—á–µ–Ω!")
    except RuntimeError as e:
        # Router —É–∂–µ –±—ã–ª –ø–æ–¥–∫–ª—é—á–µ–Ω ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        logger.warning("workouts_router —É–∂–µ –ø–æ–¥–∫–ª—é—á—ë–Ω: %s", e)

# —ç–∫—Å–ø–æ—Ä—Ç
__all__ = ["workouts_router", "register_workout_handlers", "process_workout_text_input"]
