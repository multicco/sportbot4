# ===== –ü–û–õ–ù–´–ô –§–ê–ô–õ handlers/workouts.py =====
import asyncio
import logging
from typing import Optional, List, Dict
from datetime import datetime

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database import db_manager
from states.workout_states import CreateWorkoutStates

logger = logging.getLogger(__name__)

# –†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
workouts_router = Router()

# ===== –£–¢–ò–õ–ò–¢–´ =====
def parse_callback_id(callback_data: str, expected_prefix: str = None) -> int:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ ID –∏–∑ callback_data"""
    try:
        # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω –ø—Ä–µ—Ñ–∏–∫—Å, –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ —É–±—Ä–∞—Ç—å
        if expected_prefix and callback_data.startswith(expected_prefix):
            return int(callback_data.replace(expected_prefix, ""))

        # –ò–Ω–∞—á–µ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ _
        parts = callback_data.split("_")
        if len(parts) < 2:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback_data}")

        return int(parts[-1])

    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data '{callback_data}': {e}")
        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑ callback_data: {callback_data}")

# ===== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –¢–†–ï–ù–ò–†–û–í–û–ö =====
@workouts_router.callback_query(F.data == "workouts_menu")
async def workouts_menu(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üèãÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="my_workouts")
    keyboard.button(text="üîç –ù–∞–π—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="find_workout")
    keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="create_workout")
    keyboard.button(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="workout_statistics")
    keyboard.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    keyboard.adjust(2)

    await callback.message.edit_text(
        "üèãÔ∏è **–ú–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫**\n\n"
        "üÜï **–ë–ª–æ—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:**\n"
        "‚Ä¢ üî• –†–∞–∑–º–∏–Ω–∫–∞\n"
        "‚Ä¢ ‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã\n"
        "‚Ä¢ üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å\n"
        "‚Ä¢ üßò –ó–∞–º–∏–Ω–∫–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

# ===== –ú–û–ò –¢–†–ï–ù–ò–†–û–í–ö–ò =====
@workouts_router.callback_query(F.data == "my_workouts")
async def my_workouts(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = await db_manager.get_user_by_telegram_id(callback.from_user.id)

        async with db_manager.pool.acquire() as conn:
            workouts = await conn.fetch("""
                SELECT w.*, COUNT(we.id) as exercise_count
                FROM workouts w
                LEFT JOIN workout_exercises we ON w.id = we.workout_id
                WHERE w.created_by = $1 AND w.is_active = true
                GROUP BY w.id
                ORDER BY w.created_at DESC
                LIMIT 10
            """, user['id'])

            if workouts:
                text = f"üèãÔ∏è **–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ({len(workouts)}):**\n\n"
                keyboard = InlineKeyboardBuilder()

                for workout in workouts:
                    exercise_count = workout['exercise_count'] or 0
                    duration = workout['estimated_duration_minutes']

                    button_text = f"üèãÔ∏è {workout['name']}"
                    if exercise_count > 0:
                        button_text += f" ({exercise_count} —É–ø—Ä.)"

                    keyboard.button(
                        text=button_text,
                        callback_data=f"view_workout_{workout['id']}"
                    )

                    # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                    text += f"**{workout['name']}**\n"
                    text += f"üìã –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {exercise_count} | ‚è±Ô∏è ~{duration}–º–∏–Ω\n"
                    text += f"üÜî –ö–æ–¥: `{workout['unique_id']}`\n\n"

                keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é", callback_data="create_workout")
                keyboard.button(text="üîô –ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º", callback_data="workouts_menu")
                keyboard.adjust(1)

            else:
                text = ("üèãÔ∏è **–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏**\n\n"
                       "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n\n"
                       "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å –±–ª–æ—á–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π!")

                keyboard = InlineKeyboardBuilder()
                keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é", callback_data="create_workout")
                keyboard.button(text="üîô –ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º", callback_data="workouts_menu")

            await callback.message.edit_text(
                text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
            await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ my_workouts: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", show_alert=True)

# ===== –ü–†–û–°–ú–û–¢–† –î–ï–¢–ê–õ–ï–ô –¢–†–ï–ù–ò–†–û–í–ö–ò =====
@workouts_router.callback_query(F.data.startswith("view_workout_"))
async def view_workout_details(callback: CallbackQuery):
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    try:
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ callback_data
        workout_id = parse_callback_id(callback.data, "view_workout_")

        logger.info(f"–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ID: {workout_id}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ –ë–î
        async with db_manager.pool.acquire() as conn:
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
            workout = await conn.fetchrow("""
                SELECT w.*, u.first_name as creator_name, u.last_name as creator_lastname
                FROM workouts w
                LEFT JOIN users u ON w.created_by = u.id  
                WHERE w.id = $1 AND w.is_active = true
            """, workout_id)

            if not workout:
                await callback.answer("‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return

            # –ü–æ–ª—É—á–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            exercises = await conn.fetch("""
                SELECT we.*, e.name as exercise_name, e.muscle_group, e.category
                FROM workout_exercises we
                JOIN exercises e ON we.exercise_id = e.id
                WHERE we.workout_id = $1
                ORDER BY 
                    CASE we.phase 
                        WHEN 'warmup' THEN 1
                        WHEN 'nervous_prep' THEN 2  
                        WHEN 'main' THEN 3
                        WHEN 'cooldown' THEN 4
                        ELSE 5
                    END,
                    we.order_in_phase
            """, workout_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        creator_name = workout['creator_name']
        if workout['creator_lastname']:
            creator_name += f" {workout['creator_lastname']}"

        text = f"üèãÔ∏è **{workout['name']}**\n\n"

        if workout['description']:
            text += f"üìù _{workout['description']}_\n\n"

        text += f"üë§ **–ê–≤—Ç–æ—Ä:** {creator_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n"
        text += f"‚è±Ô∏è **–í—Ä–µ–º—è:** ~{workout['estimated_duration_minutes']} –º–∏–Ω\n"
        text += f"üìà **–£—Ä–æ–≤–µ–Ω—å:** {workout['difficulty_level'].title()}\n"
        text += f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {workout.get('category', 'general').title()}\n"
        text += f"üÜî **–ö–æ–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:** `{workout['unique_id']}`\n"
        text += f"üë• **–î–æ—Å—Ç—É–ø:** {workout['visibility'].title()}\n\n"

        if exercises:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ —Ñ–∞–∑–∞–º
            phase_names = {
                'warmup': 'üî• –†–∞–∑–º–∏–Ω–∫–∞',
                'nervous_prep': '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã', 
                'main': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å',
                'cooldown': 'üßò –ó–∞–º–∏–Ω–∫–∞'
            }

            current_phase = None
            exercise_count = 0

            for exercise in exercises:
                # –ù–æ–≤–∞—è —Ñ–∞–∑–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if exercise['phase'] != current_phase:
                    current_phase = exercise['phase']
                    phase_display = phase_names.get(current_phase, current_phase.title())
                    text += f"\n**{phase_display}:**\n"

                exercise_count += 1

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
                if exercise['reps_min'] == exercise['reps_max']:
                    reps_text = f"{exercise['reps_min']}"
                else:
                    reps_text = f"{exercise['reps_min']}-{exercise['reps_max']}"

                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–∏
                text += f"‚Ä¢ **{exercise['exercise_name']}**\n"
                text += f"  üìä {exercise['sets']} –ø–æ–¥—Ö. √ó {reps_text} –ø–æ–≤—Ç."

                # –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç 1–ü–ú –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                if exercise['one_rm_percent']:
                    text += f" ({exercise['one_rm_percent']}% 1–ü–ú)"

                # –û—Ç–¥—ã—Ö –º–µ–∂–¥—É –ø–æ–¥—Ö–æ–¥–∞–º–∏
                if exercise['rest_seconds'] and exercise['rest_seconds'] > 0:
                    rest_min = exercise['rest_seconds'] // 60
                    rest_sec = exercise['rest_seconds'] % 60
                    if rest_min > 0:
                        text += f" | –û—Ç–¥—ã—Ö: {rest_min}–º–∏–Ω {rest_sec}—Å" if rest_sec > 0 else f" | –û—Ç–¥—ã—Ö: {rest_min}–º–∏–Ω"
                    else:
                        text += f" | –û—Ç–¥—ã—Ö: {rest_sec}—Å"

                text += f"\n  üéØ {exercise['muscle_group']} | {exercise['category']}\n"

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
                if exercise.get('notes'):
                    text += f"  üìù _{exercise['notes']}_\n"

                text += "\n"

            text += f"üìã **–í—Å–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:** {exercise_count}"
        else:
            text += "‚ö†Ô∏è –í —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π."

        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardBuilder()

        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        keyboard.button(
            text="üèÉ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", 
            callback_data=f"start_workout_{workout_id}"
        )
        keyboard.button(
            text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
            callback_data=f"workout_stats_{workout_id}"
        )

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è  
        keyboard.button(
            text="üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥", 
            callback_data=f"copy_workout_code_{workout_id}"
        )
        keyboard.button(
            text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", 
            callback_data=f"edit_workout_{workout_id}"
        )

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        keyboard.button(
            text="üîô –ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º", 
            callback_data="workouts_menu"
        )
        keyboard.button(
            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
            callback_data="main_menu"
        )

        keyboard.adjust(2, 2, 2)  # –ü–µ—Ä–≤—ã–µ 4 –∫–Ω–æ–ø–∫–∏ –≤ 2 —Ä—è–¥–∞ –ø–æ 2, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–æ–∂–µ –ø–æ 2

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(), 
            parse_mode="Markdown"
        )
        await callback.answer()

    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ID —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {e}")
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ view_workout_details: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", show_alert=True)

# ===== –°–û–ó–î–ê–ù–ò–ï –¢–†–ï–ù–ò–†–û–í–ö–ò =====
@workouts_router.callback_query(F.data == "create_workout")
async def start_create_workout(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    await callback.message.edit_text(
        "üèãÔ∏è **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏**\n\n"
        "üÜï **–ë–ª–æ—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:**\n"
        "‚Ä¢ üî• –†–∞–∑–º–∏–Ω–∫–∞ - –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–ª–∞\n"
        "‚Ä¢ ‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ù–° - –∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã\n"
        "‚Ä¢ üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å - –≥–ª–∞–≤–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞\n"
        "‚Ä¢ üßò –ó–∞–º–∏–Ω–∫–∞ - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n"
        "_–ù–∞–ø—Ä–∏–º–µ—Ä: \"–°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤–µ—Ä—Ö–∞\" –∏–ª–∏ \"–û–§–ü –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤\"_",
        parse_mode="Markdown"
    )
    await state.set_state(CreateWorkoutStates.waiting_workout_name)

    await callback.answer()

@workouts_router.callback_query(F.data == "skip_workout_description")
async def skip_description(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    await state.update_data(description="")
    await show_block_selection_menu(callback.message, state)
    await callback.answer()

# ===== –§–£–ù–ö–¶–ò–ò –°–û–ó–î–ê–ù–ò–Ø –ë–õ–û–ö–û–í =====
async def show_block_selection_menu(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –±–ª–æ–∫–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    data = await state.get_data()
    selected_blocks = data.get('selected_blocks', {})

    text = f"üèóÔ∏è **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {data['name']}**\n\n"
    text += f"üìã **–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫–∏ –¥–ª—è –≤–∞—à–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:**\n\n"

    blocks = {
        'warmup': 'üî• –†–∞–∑–º–∏–Ω–∫–∞',
        'nervous_prep': '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã',   
        'main': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å',
        'cooldown': 'üßò –ó–∞–º–∏–Ω–∫–∞'
    }

    for block_key, block_name in blocks.items():
        status = "‚úÖ" if block_key in selected_blocks else "‚≠ï"
        text += f"{status} **{block_name}**"
        if block_key in selected_blocks:
            exercises_count = len(selected_blocks[block_key].get('exercises', []))
            text += f" ({exercises_count} —É–ø—Ä.)"
            if selected_blocks[block_key].get('description'):
                text += f"\n _{selected_blocks[block_key]['description'][:50]}..._"
        text += "\n\n"

    keyboard = InlineKeyboardBuilder()

    for block_key, block_name in blocks.items():
        action = "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å" if block_key in selected_blocks else "‚ûï –î–æ–±–∞–≤–∏—Ç—å"
        keyboard.button(
            text=f"{action} {block_name.split(' ', 1)[1]}", 
            callback_data=f"select_block_{block_key}"
        )

    if selected_blocks:
        keyboard.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="finish_workout_creation")

    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_workout_creation")
    keyboard.adjust(2)


    try:
        await message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
    except:
        await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")

    await state.set_state(CreateWorkoutStates.selecting_blocks)

@workouts_router.callback_query(F.data.startswith("select_block_"))
async def select_workout_block(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –±–ª–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    block_key = callback.data.split("_", 2)[2]

    block_info = {
        'warmup': {
            'name': 'üî• –†–∞–∑–º–∏–Ω–∫–∞',
            'description': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–ª–∞ –∫ –Ω–∞–≥—Ä—É–∑–∫–µ, —Ä–∞–∑–æ–≥—Ä–µ–≤ –º—ã—à—Ü –∏ —Å—É—Å—Ç–∞–≤–æ–≤',
            'examples': '–õ–µ–≥–∫–æ–µ –∫–∞—Ä–¥–∏–æ, –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞, —Å—É—Å—Ç–∞–≤–Ω–∞—è –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞'
        },
        'nervous_prep': {
            'name': '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã',
            'description': '–ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π',
            'examples': '–í–∑—Ä—ã–≤–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è, –∞–∫—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –ø–ª–∏–æ–º–µ—Ç—Ä–∏–∫–∞'
        },
        'main': {
            'name': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å',
            'description': '–ì–ª–∞–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞',
            'examples': '–û—Å–Ω–æ–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, —Å–∏–ª–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã'
        },
        'cooldown': {
            'name': 'üßò –ó–∞–º–∏–Ω–∫–∞',
            'description': '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
            'examples': '–°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞, –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ'
        }
    }

    info = block_info[block_key]
    await state.update_data(current_block=block_key)

    text = f"üìã **{info['name']}**\n\n"
    text += f"**–û–ø–∏—Å–∞–Ω–∏–µ:**\n{info['description']}\n\n"
    text += f"**–ü—Ä–∏–º–µ—Ä—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:**\n{info['examples']}\n\n"
    text += f"**–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º –±–ª–æ–∫–æ–º?**"

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìù –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–∫–∞", callback_data="add_block_description")
    keyboard.button(text="‚è≠Ô∏è –°—Ä–∞–∑—É –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º", callback_data="skip_block_description")
    keyboard.button(text="üóëÔ∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –±–ª–æ–∫", callback_data="skip_entire_block")
    keyboard.button(text="üîô –ö –≤—ã–±–æ—Ä—É –±–ª–æ–∫–æ–≤", callback_data="back_to_blocks")
    keyboard.adjust(1)

    await callback.message.edit_text(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

@workouts_router.callback_query(F.data == "add_block_description")
async def add_block_description(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –±–ª–æ–∫—É"""
    data = await state.get_data()
    block_key = data.get('current_block')

    block_names = {
        'warmup': 'üî• –†–∞–∑–º–∏–Ω–∫–∞',
        'nervous_prep': '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã',
        'main': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å',   
        'cooldown': 'üßò –ó–∞–º–∏–Ω–∫–∞'
    }

    await callback.message.edit_text(
        f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–∫–∞: {block_names[block_key]}**\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞:\n"
        f"_–ù–∞–ø—Ä–∏–º–µ—Ä: \"10 –º–∏–Ω—É—Ç –ª–µ–≥–∫–æ–≥–æ –∫–∞—Ä–¥–∏–æ + —Å—É—Å—Ç–∞–≤–Ω–∞—è —Ä–∞–∑–º–∏–Ω–∫–∞\"_\n\n"
        f"–ò–ª–∏ –æ–ø–∏—à–∏—Ç–µ —Ü–µ–ª–∏ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞.",
        parse_mode="Markdown"
    )
    await state.set_state(CreateWorkoutStates.adding_block_description)
    await callback.answer()

# ===== –ó–ê–í–ï–†–®–ï–ù–ò–ï –°–û–ó–î–ê–ù–ò–Ø –¢–†–ï–ù–ò–†–û–í–ö–ò =====
@workouts_router.callback_query(F.data == "finish_workout_creation")
async def finish_workout_creation(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    data = await state.get_data()
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    selected_blocks = data.get('selected_blocks', {})

    try:
        total_exercises = sum(len(block_data['exercises']) for block_data in selected_blocks.values())

        if total_exercises == 0:
            await callback.answer("‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ!")
            return

        async with db_manager.pool.acquire() as conn:
            workout_id = await conn.fetchval("""
                INSERT INTO workouts (name, description, created_by, visibility, difficulty_level, estimated_duration_minutes)
                VALUES ($1, $2, $3, 'private', 'intermediate', $4)
                RETURNING id
            """, data['name'], data.get('description', ''), user['id'], total_exercises * 8)

            workout_unique_id = await conn.fetchval("SELECT unique_id FROM workouts WHERE id = $1", workout_id)

            exercise_order = 0
            for phase, block_data in selected_blocks.items():
                for exercise in block_data['exercises']:
                    exercise_order += 1
                    await conn.execute("""
                        INSERT INTO workout_exercises (
                            workout_id, exercise_id, phase, order_in_phase, sets,   
                            reps_min, reps_max, one_rm_percent, rest_seconds
                        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
                    """, workout_id, exercise['id'], phase, exercise_order, exercise['sets'],   
                    exercise['reps_min'], exercise['reps_max'],   
                    exercise['one_rm_percent'], exercise['rest_seconds'])

        text = f"üéâ **–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n"
        text += f"üèãÔ∏è **–ù–∞–∑–≤–∞–Ω–∏–µ:** {data['name']}\n"
        text += f"üÜî **–ö–æ–¥:** `{workout_unique_id}`\n"
        text += f"üìã **–í—Å–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:** {total_exercises}\n\n"

        block_names = {
            'warmup': 'üî• –†–∞–∑–º–∏–Ω–∫–∞',
            'nervous_prep': '‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ù–°',
            'main': 'üí™ –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å',
            'cooldown': 'üßò –ó–∞–º–∏–Ω–∫–∞'
        }

        for phase, block_data in selected_blocks.items():
            if block_data['exercises']:
                text += f"**{block_names[phase]}:** {len(block_data['exercises'])} —É–ø—Ä.\n"
                if block_data.get('description'):
                    text += f" _{block_data['description']}_\n"

        text += f"\nüí° **–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–¥–æ–º** `{workout_unique_id}` —Å –¥—Ä—É–≥–∏–º–∏!"

        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üèãÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="my_workouts")
        keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="create_workout")
        keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        keyboard.adjust(2)

        await callback.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )

        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    await callback.answer()


@workouts_router.callback_query(F.data == "cancel_workout_creation")
async def cancel_workout_creation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    await state.clear()
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üèãÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="my_workouts")
    keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é", callback_data="create_workout")
    keyboard.button(text="üîô –ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º", callback_data="workouts_menu")
    keyboard.adjust(2)
    
    await callback.message.edit_text(
        "‚ùå **–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ**\n\n"
        "–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()



# ===== –î–†–£–ì–ò–ï –§–£–ù–ö–¶–ò–ò =====
@workouts_router.callback_query(F.data.startswith("start_workout_"))
async def start_workout_session(callback: CallbackQuery):
    """–ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    try:
        workout_id = parse_callback_id(callback.data, "start_workout_")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
        async with db_manager.pool.acquire() as conn:
            workout = await conn.fetchrow(
                "SELECT name, unique_id FROM workouts WHERE id = $1", 
                workout_id
            )

            if workout:
                text = f"üèÉ **–ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!**\n\n"
                text += f"üèãÔ∏è **{workout['name']}**\n"
                text += f"üÜî –ö–æ–¥: `{workout['unique_id']}`\n\n"
                text += f"‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n\n"
                text += f"–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç:\n"
                text += f"‚Ä¢ ‚è±Ô∏è –¢–∞–π–º–µ—Ä –æ—Ç–¥—ã—Ö–∞\n"
                text += f"‚Ä¢ üìä –í–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
                text += f"‚Ä¢ üìà –û—Ü–µ–Ω–∫–∞ RPE\n"
                text += f"‚Ä¢ üí™ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –≤–µ—Å–æ–≤"

                keyboard = InlineKeyboardBuilder()
                keyboard.button(text="üîô –ö –¥–µ—Ç–∞–ª—è–º", callback_data=f"view_workout_{workout_id}")
                keyboard.button(text="üèãÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="my_workouts")

                await callback.message.edit_text(
                    text,
                    reply_markup=keyboard.as_markup(),
                    parse_mode="Markdown"
                )
            else:
                await callback.answer("‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)

    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ ID —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", show_alert=True)

@workouts_router.callback_query(F.data.startswith("copy_workout_code_"))
async def copy_workout_code(callback: CallbackQuery):
    """–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    try:
        workout_id = parse_callback_id(callback.data, "copy_workout_code_")

        async with db_manager.pool.acquire() as conn:
            workout = await conn.fetchrow(
                "SELECT unique_id, name FROM workouts WHERE id = $1", 
                workout_id
            )

            if workout:
                text = f"üìã **–ö–æ–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!**\n\n"
                text += f"üèãÔ∏è **{workout['name']}**\n"
                text += f"üÜî –ö–æ–¥: `{workout['unique_id']}`\n\n"
                text += f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º,\n"
                text += f"—á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å\n"
                text += f"–≤–∞—à—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!"

                keyboard = InlineKeyboardBuilder()
                keyboard.button(text="üîô –ö –¥–µ—Ç–∞–ª—è–º", callback_data=f"view_workout_{workout_id}")
                keyboard.button(text="üèãÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="my_workouts")

                await callback.message.edit_text(
                    text,
                    reply_markup=keyboard.as_markup(),
                    parse_mode="Markdown"
                )
                await callback.answer("‚úÖ –ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
            else:
                await callback.answer("‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)

    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ ID —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)

# ===== –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –ë–£–î–£–©–ò–• –§–£–ù–ö–¶–ò–ô =====
@workouts_router.callback_query(F.data.in_([
    "find_workout", "workout_statistics", "edit_workout", "workout_stats"
]))
async def feature_coming_soon(callback: CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"""
    feature_names = {
        "find_workout": "–ü–æ–∏—Å–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫",
        "workout_statistics": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫",   
        "edit_workout": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
        "workout_stats": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ ID –≤ callback_data
    feature_key = callback.data
    if "_" in callback.data:
        feature_key = "_".join(callback.data.split("_")[:-1])

    feature_name = feature_names.get(feature_key, "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è")

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º", callback_data="workouts_menu")

    await callback.message.edit_text(
        f"üöß **{feature_name}**\n\n"
        f"–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        f"–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!\n\n"
        f"**–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
        f"‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        f"‚Ä¢ üìà –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n"
        f"‚Ä¢ üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é\n"
        f"‚Ä¢ üì± –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–û–ì–û –í–í–û–î–ê =====
async def process_workout_text_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    current_state = await state.get_state()

    if current_state == CreateWorkoutStates.waiting_workout_name:
        await process_workout_name(message, state)
    elif current_state == CreateWorkoutStates.waiting_workout_description:
        await process_workout_description(message, state)

    else:
        await message.answer(
            "‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            parse_mode="Markdown"
        )
        await state.clear()

async def process_workout_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    workout_name = message.text.strip()

    if len(workout_name) < 3:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
        return

    if len(workout_name) > 100:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    await state.update_data(name=workout_name)

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="skip_workout_description")

    await message.answer(
        f"‚úÖ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {workout_name}\n\n"
        f"üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n"
        f"_–ù–∞–ø—Ä–∏–º–µ—Ä: \"–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Å–∏–ª—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –≥—Ä—É–ø–ø –º—ã—à—Ü\"_\n\n"
        f"–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await state.set_state(CreateWorkoutStates.waiting_workout_description)  # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û



async def process_workout_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    description = message.text.strip()
    await state.update_data(description=description)
    await show_block_selection_menu(message, state)

async def process_block_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –±–ª–æ–∫–∞"""
    description = message.text.strip()

    if len(description) > 200:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    await state.update_data(current_block_description=description)

    await message.answer(
        f"‚úÖ **–û–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:**\n\n"
        f"_{description}_\n\n"
        f"–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –±–ª–æ–∫...",
        parse_mode="Markdown"
    )

    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏—è show_block_exercises_menu, –Ω–æ –æ–Ω–∞ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞
async def notify_team_about_workout(team_id: int, workout_id: int, workout_name: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–µ –æ –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ"""
    from main import bot
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ —Å telegram_id
    players = await teams_database.get_team_players(team_id)
    
    notified_count = 0
    for player in players:
        if player.telegram_id:
            try:
                await bot.send_message(
                    player.telegram_id,
                    f"üèãÔ∏è **–ù–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞!**\n\n"
                    f"üìã {workout_name}\n"
                    f"üÜî –ö–æ–¥: `{workout_id}`\n\n"
                    f"–ù–∞–∂–º–∏—Ç–µ /myteam –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.",
                    parse_mode="Markdown"
                )
                notified_count += 1
            except Exception as e:
                logger.error(f"Failed to notify player {player.id}: {e}")
    
    logger.info(f"Notified {notified_count} players about workout {workout_id}")
    return notified_count

# ===== –§–£–ù–ö–¶–ò–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò =====
def register_workout_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    dp.include_router(workouts_router)
    logger.info("üèãÔ∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
