# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î–ù–û–ô –°–ò–°–¢–ï–ú–´ =====

from aiogram import F
from aiogram.types import CallbackQuery
from keyboards.main_keyboards_old import get_coming_soon_keyboard

def register_team_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤
    dp.callback_query.register(feature_coming_soon, F.data == "create_team")
    dp.callback_query.register(feature_coming_soon, F.data == "add_student")
    dp.callback_query.register(feature_coming_soon, F.data == "my_teams")
    dp.callback_query.register(feature_coming_soon, F.data == "my_students")
    
    # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
    dp.callback_query.register(feature_coming_soon, F.data == "join_team")
    dp.callback_query.register(feature_coming_soon, F.data == "find_coach")
    dp.callback_query.register(feature_coming_soon, F.data == "my_team")
    
    # –§—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–∑–∞–≥–ª—É—à–∫–∏)
    dp.callback_query.register(feature_coming_soon, F.data == "my_workouts")
    dp.callback_query.register(feature_coming_soon, F.data == "find_workout")
    dp.callback_query.register(feature_coming_soon, F.data == "search_by_muscle")

async def feature_coming_soon(callback: CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"""
    
    feature_names = {
        "my_workouts": "–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
        "find_workout": "–ü–æ–∏—Å–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", 
        "search_by_muscle": "–ü–æ–∏—Å–∫ –ø–æ –º—ã—à—Ü–∞–º",
        "create_team": "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã",
        "add_student": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ",
        "my_teams": "–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã",
        "my_students": "–ú–æ–∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–µ", 
        "join_team": "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–∞–Ω–¥–µ",
        "find_coach": "–ü–æ–∏—Å–∫ —Ç—Ä–µ–Ω–µ—Ä–∞",
        "my_team": "–ú–æ—è –∫–æ–º–∞–Ω–¥–∞"
    }
    
    feature_name = feature_names.get(callback.data, "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è")
    keyboard = get_coming_soon_keyboard()
    
    await callback.message.edit_text(
        f"üöß **{feature_name}**\n\n"
        f"–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        f"–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

# ===== –ó–ê–ì–û–¢–û–í–ö–ò –î–õ–Ø –ë–£–î–£–©–ò–• –§–£–ù–ö–¶–ò–ô =====

async def create_team(callback: CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–±—É–¥—É—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    pass

async def add_student(callback: CallbackQuery):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ (–±—É–¥—É—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–æ–ø–µ—á–Ω–æ–≥–æ
    pass

async def my_teams(callback: CallbackQuery):
    """–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã (–±—É–¥—É—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–∞–Ω–¥
    pass

async def my_students(callback: CallbackQuery):
    """–ú–æ–∏ –ø–æ–¥–æ–ø–µ—á–Ω—ã–µ (–±—É–¥—É—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö
    pass

async def join_team(callback: CallbackQuery):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–∞–Ω–¥–µ (–±—É–¥—É—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–∞–Ω–¥–µ
    pass

async def find_coach(callback: CallbackQuery):
    """–ü–æ–∏—Å–∫ —Ç—Ä–µ–Ω–µ—Ä–∞ (–±—É–¥—É—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ —Ç—Ä–µ–Ω–µ—Ä–∞
    pass

async def my_team(callback: CallbackQuery):
    """–ú–æ—è –∫–æ–º–∞–Ω–¥–∞ (–±—É–¥—É—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã
    pass





# ============== –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –ú–û–î–£–õ–Ø teams.py ==============
# –î–æ–±–∞–≤—å —ç—Ç–æ—Ç –∫–æ–¥ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ teams.py

# ============== –ü–†–û–°–ú–û–¢–† –ö–û–ú–ê–ù–î ==============

@teams_router.callback_query(F.data == "my_teams")
async def show_my_teams(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_teams = await db.get_user_teams(callback.from_user.id)

        if not user_teams:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∫–æ–º–∞–Ω–¥—É", callback_data="create_team")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="teams_main")]
            ])

            await callback.message.edit_text(
                "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–∞–Ω–¥</b>\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–æ–ø–µ—á–Ω—ã–º–∏!",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await callback.answer()
            return

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã
        buttons = []
        for team in user_teams:
            user_role = await db.get_user_role_in_team(callback.from_user.id, team.id)
            role_emoji = get_role_emoji(user_role)

            button_text = f"{role_emoji} {team.name} ({len(team.members)} —á–µ–ª.)"
            buttons.append([InlineKeyboardButton(
                text=button_text, 
                callback_data=f"team_menu_{team.id}"
            )])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons.extend([
            [InlineKeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="create_team")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="teams_main")]
        ])

        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback.message.edit_text(
            f"üë• <b>–í–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã ({len(user_teams)})</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n\n"
            "<i>üëë - –ö–∞–ø–∏—Ç–∞–Ω, ‚≠ê - –ü–æ–º–æ—â–Ω–∏–∫, üë§ - –£—á–∞—Å—Ç–Ω–∏–∫</i>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"Error in show_my_teams: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@teams_router.callback_query(F.data.startswith("team_menu_"))
async def show_team_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥—ã"""
    try:
        team_id = int(callback.data.split("_")[-1])
        team = await db.get_team(team_id)

        if not team:
            await callback.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        user_role = await db.get_user_role_in_team(callback.from_user.id, team_id)
        if not user_role:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
            return

        keyboard = get_team_management_keyboard(team_id, user_role)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã
        active_members = len([m for m in team.members if m.is_active])
        role_emoji = get_role_emoji(user_role)
        role_name = get_role_name(user_role)

        description_text = team.description if team.description else "<i>–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</i>"

        await callback.message.edit_text(
            f"üèÜ <b>{team.name}</b>\n\n"
            f"üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description_text}\n\n"
            f"{role_emoji} <b>–í–∞—à–∞ —Ä–æ–ª—å:</b> {role_name}\n"
            f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {active_members}\n"
            f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {team.created_at.strftime('%d.%m.%Y')}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"Error in show_team_menu: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# ============== –ü–†–û–°–ú–û–¢–† –£–ß–ê–°–¢–ù–ò–ö–û–í ==============

@teams_router.callback_query(F.data.startswith("team_members_"))
async def show_team_members(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã"""
    try:
        team_id = int(callback.data.split("_")[-1])
        team = await db.get_team(team_id)

        if not team:
            await callback.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        user_role = await db.get_user_role_in_team(callback.from_user.id, team_id)
        if not user_role:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
            return

        if not team.members:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data=f"add_member_{team_id}")],
                [InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–µ", callback_data=f"team_menu_{team_id}")]
            ])

            await callback.message.edit_text(
                f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã "{team.name}"</b>\n\n"
                "–ü–æ–∫–∞ —á—Ç–æ –≤ –∫–æ–º–∞–Ω–¥–µ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç.\n"
                "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await callback.answer()
            return

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Ä–æ–ª–∏ –∏ –¥–∞—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        sorted_members = sorted(team.members, key=lambda m: (
            0 if m.role == 'captain' else 1 if m.role == 'assistant' else 2,
            m.joined_at
        ))

        members_text = ""
        for i, member in enumerate(sorted_members, 1):
            role_emoji = get_role_emoji(member.role)
            username_text = f"@{member.username}" if member.username else "–±–µ–∑ username"

            full_name = member.first_name
            if member.last_name:
                full_name += f" {member.last_name}"

            members_text += (
                f"{i}. {role_emoji} <b>{full_name}</b>\n"
                f"   {username_text}\n"
                f"   <i>–í –∫–æ–º–∞–Ω–¥–µ —Å {member.joined_at.strftime('%d.%m.%Y')}</i>\n\n"
            )

        keyboard = get_members_keyboard(team_id, user_role=user_role)

        text = (
            f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã "{team.name}"</b>\n"
            f"–í—Å–µ–≥–æ: {len(sorted_members)}\n\n{members_text}"
        )

        # Telegram –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(text) > 4000:
            text = text[:3900] + "...\n\n<i>–°–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏</i>"

        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"Error in show_team_members: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# ============== –î–û–ë–ê–í–õ–ï–ù–ò–ï –£–ß–ê–°–¢–ù–ò–ö–û–í ==============

@teams_router.callback_query(F.data.startswith("add_member_"))
async def start_add_member(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    try:
        team_id = int(callback.data.split("_")[-1])
        team = await db.get_team(team_id)

        if not team:
            await callback.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        user_role = await db.get_user_role_in_team(callback.from_user.id, team_id)
        if user_role not in ['captain', 'assistant']:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if len(team.members) >= team.max_members:
            await callback.message.edit_text(
                f"‚ùå <b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>\n\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ: {team.max_members}\n"
                "–£–¥–∞–ª–∏—Ç–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"team_menu_{team_id}")]
                ]),
                parse_mode="HTML"
            )
            await callback.answer()
            return

        await state.set_state(TeamStates.waiting_member_search)
        await state.update_data(team_id=team_id)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì± –ü–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data=f"add_by_phone_{team_id}")],
            [InlineKeyboardButton(text="üÜî –ü–æ Telegram ID", callback_data=f"add_by_id_{team_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"team_menu_{team_id}")]
        ])

        await callback.message.edit_text(
            f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ "{team.name}"</b>\n\n"
            "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞?\n\n"
            "<b>–°–ø–æ—Å–æ–±—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b>\n"
            "üîç <b>–ü–æ –ø–æ–∏—Å–∫—É:</b> –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ @username\n"
            "üì± <b>–ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> –ø–æ–ø—Ä–æ—Å–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É\n"
            "üÜî <b>–ü–æ ID:</b> –µ—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ Telegram ID\n\n"
            "<i>–°–µ–π—á–∞—Å –≤ –∫–æ–º–∞–Ω–¥–µ: {len(team.members)}/{team.max_members}</i>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"Error in start_add_member: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@teams_router.message(TeamStates.waiting_member_search)
async def process_member_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    try:
        data = await state.get_data()
        team_id = data['team_id']
        search_query = message.text.strip()

        if len(search_query) < 2:
            await message.answer(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_cancel_keyboard(f"team_menu_{team_id}")
            )
            return

        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        # –°–µ–π—á–∞—Å —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        found_users = []

        # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å user_id –µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ
        if search_query.isdigit():
            user_id = int(search_query)
            if TeamValidator.validate_user_id(user_id):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
                team = await db.get_team(team_id)
                is_member = any(member.user_id == user_id for member in team.members)

                if not is_member:
                    found_users.append({
                        'id': user_id,
                        'name': f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}',
                        'username': None
                    })

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–∏—Å–∫ –ø–æ username
        elif search_query.startswith('@'):
            username = search_query[1:]  # –£–±–∏—Ä–∞–µ–º @
            found_users.append({
                'id': 999999,  # –ó–∞–≥–ª—É—à–∫–∞ ID
                'name': f'–ù–∞–π–¥–µ–Ω –ø–æ @{username}',
                'username': username
            })

        # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
        else:
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏/—Ñ–∞–º–∏–ª–∏–∏
            found_users.append({
                'id': 888888,  # –ó–∞–≥–ª—É—à–∫–∞ ID
                'name': f'–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {search_query}',
                'username': None
            })

        if not found_users:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"add_member_{team_id}")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"team_menu_{team_id}")]
            ])

            await message.answer(
                "üòî <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—á–Ω—ã–π @username\n"
                "‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ Telegram",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        buttons = []
        for user in found_users:
            username_text = f"@{user['username']}" if user['username'] else f"ID: {user['id']}"
            buttons.append([InlineKeyboardButton(
                text=f"üë§ {user['name']} ({username_text})",
                callback_data=f"select_user_{user['id']}"
            )])

        buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"team_menu_{team_id}")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        await state.set_state(TeamStates.waiting_member_confirm)

        await message.answer(
            f"üîç <b>–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(found_users)}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—É:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"Error in process_member_search: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

@teams_router.callback_query(F.data.startswith("select_user_"))
async def confirm_add_member(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    try:
        user_id = int(callback.data.split("_")[-1])
        data = await state.get_data()
        team_id = data['team_id']

        team = await db.get_team(team_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
        is_member = any(member.user_id == user_id for member in team.members)
        if is_member:
            await callback.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        success = await db.add_member_to_team(
            team_id=team_id,
            user_id=user_id,
            username=None,  # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–∏–ª–∏ –±—ã –∏–∑ –ø–æ–∏—Å–∫–∞
            first_name=f"–£—á–∞—Å—Ç–Ω–∏–∫ {user_id}",
            last_name=None
        )

        if success:
            await state.clear()

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data=f"team_members_{team_id}")],
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data=f"add_member_{team_id}")],
                [InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–µ", callback_data=f"team_menu_{team_id}")]
            ])

            await callback.message.edit_text(
                f"‚úÖ <b>–£—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_id}\n"
                f"üèÜ <b>–ö–æ–º–∞–Ω–¥–∞:</b> {team.name}\n"
                f"üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤ –∫–æ–º–∞–Ω–¥–µ {len(team.members) + 1} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await callback.answer("‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞")

    except Exception as e:
        logger.error(f"Error in confirm_add_member: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# ============== –£–î–ê–õ–ï–ù–ò–ï –£–ß–ê–°–¢–ù–ò–ö–û–í ==============

@teams_router.callback_query(F.data.startswith("remove_member_"))
async def start_remove_member(callback: CallbackQuery):
    """–ù–∞—á–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    try:
        team_id = int(callback.data.split("_")[-1])
        team = await db.get_team(team_id)

        if not team:
            await callback.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        user_role = await db.get_user_role_in_team(callback.from_user.id, team_id)
        if user_role != 'captain':
            await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –∫–∞–ø–∏—Ç–∞–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–∏—Å–∫–ª—é—á–∞—è –∫–∞–ø–∏—Ç–∞–Ω–∞)
        removable_members = [m for m in team.members if m.role != 'captain' and m.is_active]

        if not removable_members:
            await callback.message.edit_text(
                "‚ÑπÔ∏è <b>–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
                "–í –∫–æ–º–∞–Ω–¥–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.\n"
                "(–ö–∞–ø–∏—Ç–∞–Ω–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ–ª—å–∑—è)",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"team_members_{team_id}")]
                ]),
                parse_mode="HTML"
            )
            await callback.answer()
            return

        buttons = []
        for member in removable_members:
            role_emoji = get_role_emoji(member.role)
            full_name = member.first_name
            if member.last_name:
                full_name += f" {member.last_name}"

            buttons.append([InlineKeyboardButton(
                text=f"{role_emoji} {full_name}",
                callback_data=f"confirm_remove_{team_id}_{member.user_id}"
            )])

        buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"team_members_{team_id}")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback.message.edit_text(
            f"‚ûñ <b>–£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ "{team.name}"</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "<i>‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</i>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"Error in start_remove_member: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@teams_router.callback_query(F.data.startswith("confirm_remove_"))
async def confirm_remove_member(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    try:
        parts = callback.data.split("_")
        team_id = int(parts[2])
        user_id_to_remove = int(parts[3])

        team = await db.get_team(team_id)
        member_to_remove = next((m for m in team.members if m.user_id == user_id_to_remove), None)

        if not member_to_remove:
            await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üóë –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"final_remove_{team_id}_{user_id_to_remove}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"remove_member_{team_id}")]
        ])

        full_name = member_to_remove.first_name
        if member_to_remove.last_name:
            full_name += f" {member_to_remove.last_name}"

        await callback.message.edit_text(
            f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞?\n\n"
            f"üë§ <b>–£—á–∞—Å—Ç–Ω–∏–∫:</b> {full_name}\n"
            f"üèÜ <b>–ö–æ–º–∞–Ω–¥–∞:</b> {team.name}\n\n"
            "<i>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</i>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"Error in confirm_remove_member: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@teams_router.callback_query(F.data.startswith("final_remove_"))
async def final_remove_member(callback: CallbackQuery):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    try:
        parts = callback.data.split("_")
        team_id = int(parts[2])
        user_id_to_remove = int(parts[3])

        success = await db.remove_member_from_team(
            team_id=team_id,
            user_id=user_id_to_remove,
            removed_by=callback.from_user.id
        )

        if success:
            team = await db.get_team(team_id)

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üë• –ö —É—á–∞—Å—Ç–Ω–∏–∫–∞–º", callback_data=f"team_members_{team_id}")],
                [InlineKeyboardButton(text="üèÜ –ö –∫–æ–º–∞–Ω–¥–µ", callback_data=f"team_menu_{team_id}")]
            ])

            await callback.message.edit_text(
                f"‚úÖ <b>–£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω</b>\n\n"
                f"–£—á–∞—Å—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ–º–∞–Ω–¥—ã "{team.name}".\n\n"
                f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å—Ç–∞–ª–æ:</b> {len(team.members)}",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await callback.answer("‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω!")
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞")

    except Exception as e:
        logger.error(f"Error in final_remove_member: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# ============== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ú–ê–ù–î ==============

@teams_router.callback_query(F.data == "teams_stats")
async def show_teams_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_teams = await db.get_user_teams(callback.from_user.id)

        if not user_teams:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É", callback_data="create_team")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="teams_main")]
            ])

            await callback.message.edit_text(
                "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await callback.answer()
            return

        total_members = 0
        total_captains = 0
        total_assistants = 0
        oldest_team = None
        newest_team = None
        largest_team = None

        stats_text = ""

        for team in user_teams:
            members_count = len(team.members)
            total_members += members_count

            # –ü–æ–¥—Å—á–µ—Ç —Ä–æ–ª–µ–π
            for member in team.members:
                if member.role == 'captain':
                    total_captains += 1
                elif member.role == 'assistant':
                    total_assistants += 1

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
            if not oldest_team or team.created_at < oldest_team.created_at:
                oldest_team = team
            if not newest_team or team.created_at > newest_team.created_at:
                newest_team = team

            # –°–∞–º–∞—è –±–æ–ª—å—à–∞—è –∫–æ–º–∞–Ω–¥–∞
            if not largest_team or members_count > len(largest_team.members):
                largest_team = team

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            user_role = await db.get_user_role_in_team(callback.from_user.id, team.id)
            role_emoji = get_role_emoji(user_role)
            stats_text += f"{role_emoji} <b>{team.name}</b>: {members_count} —á–µ–ª.\n"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë• –ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã", callback_data="my_teams")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="teams_main")]
        ])

        await callback.message.edit_text(
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–∏—Ö –∫–æ–º–∞–Ω–¥</b>\n\n"
            f"üèÜ <b>–í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥:</b> {len(user_teams)}\n"
            f"üë• <b>–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {total_members}\n"
            f"üëë <b>–í—ã –∫–∞–ø–∏—Ç–∞–Ω –≤:</b> {total_captains} –∫–æ–º–∞–Ω–¥–∞—Ö\n"
            f"‚≠ê <b>–í—ã –ø–æ–º–æ—â–Ω–∏–∫ –≤:</b> {total_assistants} –∫–æ–º–∞–Ω–¥–∞—Ö\n\n"
            f"üìà <b>–°–∞–º–∞—è –±–æ–ª—å—à–∞—è –∫–æ–º–∞–Ω–¥–∞:</b> {largest_team.name} ({len(largest_team.members)} —á–µ–ª.)\n"
            f"üìÖ <b>–°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è:</b> {oldest_team.name} ({oldest_team.created_at.strftime('%d.%m.%Y')})\n"
            f"üÜï <b>–°–∞–º–∞—è –Ω–æ–≤–∞—è:</b> {newest_team.name} ({newest_team.created_at.strftime('%d.%m.%Y')})\n\n"
            f"<b>–í–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã:</b>\n{stats_text}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"Error in show_teams_stats: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# ============== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–¢–ú–ï–ù–´ ==============

@teams_router.callback_query(TeamStates.waiting_team_name, F.data == "teams_main")
@teams_router.callback_query(TeamStates.waiting_team_description, F.data == "teams_main")
@teams_router.callback_query(TeamStates.waiting_member_search, F.data.contains("team_menu_"))
async def cancel_operation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await state.clear()

    if callback.data == "teams_main":
        await teams_main_callback(callback)
    elif callback.data.startswith("team_menu_"):
        await show_team_menu(callback)

    await callback.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

print("–°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –º–æ–¥—É–ª—è teams.py —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")

__all__ = [
    'register_team_handlers',
    'feature_coming_soon'
]


