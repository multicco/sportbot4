# ===== –ë–ê–¢–ê–†–ï–ò –¢–ï–°–¢–û–í - handlers/test_batteries.py =====

from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database import db_manager
from utils.validators import validate_test_data
import secrets
import string
import asyncio

# ===== –°–û–°–¢–û–Ø–ù–ò–Ø FSM =====
from aiogram.fsm.state import State, StatesGroup

class CreateBatteryStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞—Ç–∞—Ä–µ–∏ —Ç–µ—Å—Ç–æ–≤"""
    waiting_name = State()
    waiting_description = State()
    selecting_exercises = State()

class EditBatteryStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞—Ç–∞—Ä–µ–∏ —Ç–µ—Å—Ç–æ–≤"""
    adding_exercises = State()

class JoinBatteryStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –±–∞—Ç–∞—Ä–µ–µ"""
    waiting_battery_code = State()

# ===== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –î–õ–Ø –¢–†–ï–ù–ï–†–û–í =====
async def coach_batteries_main_menu(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–∞—Ç–∞—Ä–µ–π —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞"""
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    
    if user['role'] not in ['coach', 'admin']:
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –±–∞—Ç–∞—Ä–µ—è–º–∏!")
        return
    
    try:
        async with db_manager.pool.acquire() as conn:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞—Ç–∞—Ä–µ–π —Ç—Ä–µ–Ω–µ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã)
            try:
                stats = await conn.fetchrow("""
                    SELECT 
                        COUNT(*) as total_batteries,
                        COUNT(*) FILTER (WHERE is_active = true) as active_batteries
                    FROM test_sets WHERE created_by = $1
                """, user['id'])
            except:
                stats = {'total_batteries': 0, 'active_batteries': 0}
    
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üìã –ú–æ–∏ –±–∞—Ç–∞—Ä–µ–∏", callback_data="my_batteries")
        keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –±–∞—Ç–∞—Ä–µ—é", callback_data="create_battery")
        keyboard.button(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã", callback_data="team_analytics")
        keyboard.button(text="üîô –ö —Ç–µ—Å—Ç–∞–º", callback_data="tests_menu")
        keyboard.adjust(2)
        
        text = f"üìã **–ë–∞—Ç–∞—Ä–µ–∏ —Ç–µ—Å—Ç–æ–≤ - –¢—Ä–µ–Ω–µ—Ä—Å–∫–∞—è –ø–∞–Ω–µ–ª—å**\n\n"
        
        total_batteries = stats['total_batteries'] or 0
        if total_batteries > 0:
            text += f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            text += f"‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –±–∞—Ç–∞—Ä–µ–π: **{total_batteries}**\n"
            text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∞—Ç–∞—Ä–µ–π: **{stats['active_batteries'] or 0}**\n\n"
        
        text += f"üí° **–ö–æ–Ω—Ü–µ–ø—Ü–∏—è –±–∞—Ç–∞—Ä–µ–π —Ç–µ—Å—Ç–æ–≤:**\n"
        text += f"‚Ä¢ '–¢–µ—Å—Ç —Å–∏–ª—ã –º–µ–∂—Å–µ–∑–æ–Ω' (5-10 —Å–∏–ª–æ–≤—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π)\n"
        text += f"‚Ä¢ '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏' (—Å–ø—Ä–∏–Ω—Ç—ã, —á–µ–ª–Ω–æ—á–Ω—ã–π –±–µ–≥)\n"
        text += f"‚Ä¢ '–û—Ü–µ–Ω–∫–∞ –Ω–æ–≤–∏—á–∫–æ–≤' (–∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –±–∞—Ç–∞—Ä–µ—è)\n\n"
        
        text += f"üéØ **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
        text += f"‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –±–∞—Ç–∞—Ä–µ–π —Ç–µ—Å—Ç–æ–≤\n"
        text += f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ 5-10 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –±–∞—Ç–∞—Ä–µ—é\n"
        text += f"‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–π (–¥–∞–∂–µ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏)\n"
        text += f"‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–π –∫–æ–º–∞–Ω–¥–µ\n"
        text += f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
        
        text += f"**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**"
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await callback.answer()

# ===== –ú–û–ò –ë–ê–¢–ê–†–ï–ò –¢–ï–°–¢–û–í =====
async def my_batteries(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞—Ç–∞—Ä–µ–∏ —Ç–µ—Å—Ç–æ–≤ —Ç—Ä–µ–Ω–µ—Ä–∞"""
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    
    try:
        async with db_manager.pool.acquire() as conn:
            batteries = await conn.fetch("""
                SELECT 
                    ts.*,
                    COUNT(DISTINCT tse.id) as exercises_count,
                    COUNT(DISTINCT tsp.id) as participants_count
                FROM test_sets ts
                LEFT JOIN test_set_exercises tse ON ts.id = tse.test_set_id
                LEFT JOIN test_set_participants tsp ON ts.id = tsp.test_set_id
                WHERE ts.created_by = $1 AND ts.is_active = true
                GROUP BY ts.id
                ORDER BY ts.created_at DESC
                LIMIT 10
            """, user['id'])
        
        if batteries:
            text = f"üìã **–í–∞—à–∏ –±–∞—Ç–∞—Ä–µ–∏ —Ç–µ—Å—Ç–æ–≤ ({len(batteries)}):**\n\n"
            
            keyboard = InlineKeyboardBuilder()
            
            for battery in batteries:
                text += f"üìã **{battery['name']}**\n"
                text += f"üìä –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {battery['exercises_count']} ‚Ä¢ üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {battery['participants_count']}\n"
                text += f"üîí –ö–æ–¥: `{battery['access_code']}`\n"
                
                if battery['description']:
                    text += f"üìù _{battery['description'][:50]}{'...' if len(battery['description']) > 50 else ''}_\n"
                
                text += f"üìÖ {battery['created_at'].strftime('%d.%m.%Y')}\n\n"
                
                keyboard.button(
                    text=f"üìã {battery['name'][:25]}{'...' if len(battery['name']) > 25 else ''}", 
                    callback_data=f"view_battery_{battery['id']}"
                )
            
            keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é", callback_data="create_battery")
            keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="coach_batteries")
            keyboard.adjust(1)
            
        else:
            text = f"üìã **–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–∞—Ç–∞—Ä–µ–π —Ç–µ—Å—Ç–æ–≤**\n\n"
            text += f"–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –±–∞—Ç–∞—Ä–µ—é –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã!\n\n"
            text += f"üí° **–ü—Ä–∏–º–µ—Ä –±–∞—Ç–∞—Ä–µ–π:**\n"
            text += f"‚Ä¢ '–¢–µ—Å—Ç —Å–∏–ª—ã –º–µ–∂—Å–µ–∑–æ–Ω'\n"
            text += f"‚Ä¢ '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–æ–≤–∏—á–∫–æ–≤'\n"
            text += f"‚Ä¢ '–ö–æ–Ω—Ç—Ä–æ–ª—å –ø–æ—Å–ª–µ —Ç—Ä–∞–≤–º—ã'"
            
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –±–∞—Ç–∞—Ä–µ—é", callback_data="create_battery")
            keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="coach_batteries")
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await callback.answer()

# ===== –°–û–ó–î–ê–ù–ò–ï –ë–ê–¢–ê–†–ï–ò –¢–ï–°–¢–û–í =====
async def create_battery(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –±–∞—Ç–∞—Ä–µ–∏ —Ç–µ—Å—Ç–æ–≤"""
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    
    if user['role'] not in ['coach', 'admin']:
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–∞—Ç–∞—Ä–µ–∏ —Ç–µ—Å—Ç–æ–≤!")
        return
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="my_batteries")
    
    await callback.message.edit_text(
        "üìã **–°–æ–∑–¥–∞–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏ —Ç–µ—Å—Ç–æ–≤**\n\n"
        "üéØ **–ß—Ç–æ —Ç–∞–∫–æ–µ –±–∞—Ç–∞—Ä–µ—è —Ç–µ—Å—Ç–æ–≤?**\n"
        "–≠—Ç–æ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏\n"
        "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∞—Å–ø–µ–∫—Ç–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤.\n\n"
        "üìã **–ü—Ä–∏–º–µ—Ä—ã –±–∞—Ç–∞—Ä–µ–π:**\n"
        "‚Ä¢ '–¢–µ—Å—Ç —Å–∏–ª—ã –º–µ–∂—Å–µ–∑–æ–Ω'\n"
        "‚Ä¢ '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏'\n"
        "‚Ä¢ '–í—Ö–æ–¥–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–æ–≤–∏—á–∫–æ–≤'\n"
        "‚Ä¢ '–ö–æ–Ω—Ç—Ä–æ–ª—å –ø–æ—Å–ª–µ —Ç—Ä–∞–≤–º—ã'\n\n"
        "üìù **–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏ —Ç–µ—Å—Ç–æ–≤:**\n"
        "_–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤_",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await state.set_state(CreateBatteryStates.waiting_name)
    await callback.answer()

async def process_battery_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–∞—Ç–∞—Ä–µ–∏ —Ç–µ—Å—Ç–æ–≤"""
    battery_name = message.text.strip()
    
    if len(battery_name) < 3:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
        return
        
    if len(battery_name) > 100:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(name=battery_name)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="skip_battery_description")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_battery_creation")
    
    await message.answer(
        f"‚úÖ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {battery_name}\n\n"
        f"üìù **–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏** (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n"
        f"_–ù–∞–ø—Ä–∏–º–µ—Ä: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏–ª–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ –º–µ–∂—Å–µ–∑–æ–Ω—å—è'_\n\n"
        f"–ò–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥:",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await state.set_state(CreateBatteryStates.waiting_description)

async def process_battery_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –±–∞—Ç–∞—Ä–µ–∏ —Ç–µ—Å—Ç–æ–≤"""
    description = message.text.strip()
    
    if len(description) > 500:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(description=description)
    await save_battery_to_database(message, state)

async def skip_battery_description(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏"""
    await state.update_data(description="")
    await save_battery_to_database(callback.message, state)
    await callback.answer()

async def save_battery_to_database(message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏ —Ç–µ—Å—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    data = await state.get_data()
    user = await db_manager.get_user_by_telegram_id(message.from_user.id)
    
    try:
        async with db_manager.pool.acquire() as conn:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É test_sets)
            test_set_id = await conn.fetchval("""
                INSERT INTO test_sets (name, description, created_by, visibility)
                VALUES ($1, $2, $3, $4)
                RETURNING id
            """, data['name'], data.get('description', ''), user['id'], 'private')
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
            test_set = await conn.fetchrow("""
                SELECT access_code FROM test_sets WHERE id = $1
            """, test_set_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
        text = f"üéâ **–ë–∞—Ç–∞—Ä–µ—è —Ç–µ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n"
        text += f"üìã **–ù–∞–∑–≤–∞–Ω–∏–µ:** {data['name']}\n"
        text += f"üëÅÔ∏è **–í–∏–¥–∏–º–æ—Å—Ç—å:** üîí –ü—Ä–∏–≤–∞—Ç–Ω–∞—è\n"
        text += f"üÜî **–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞:** `{test_set['access_code']}`\n\n"
        
        if data.get('description'):
            text += f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {data['description']}\n\n"
        
        text += f"üéØ **–ß—Ç–æ –¥–∞–ª—å—à–µ:**\n"
        text += f"‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –±–∞—Ç–∞—Ä–µ—é\n"
        text += f"‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–¥–æ–º `{test_set['access_code']}` —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n"
        text += f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–º–∞–Ω–¥—ã\n\n"
        text += f"üí° **–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –ø–æ –∫–æ–¥—É!**"
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", callback_data=f"add_exercises_{test_set_id}")
        keyboard.button(text="üìã –ú–æ–∏ –±–∞—Ç–∞—Ä–µ–∏", callback_data="my_batteries")
        keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        keyboard.adjust(1)
        
        await message.answer(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞—Ç–∞—Ä–µ–∏ —Ç–µ—Å—Ç–æ–≤: {e}")

# ===== –ü–†–û–°–ú–û–¢–† –ë–ê–¢–ê–†–ï–ò =====
async def view_battery_details(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –±–∞—Ç–∞—Ä–µ–∏"""
    battery_id = int(callback.data.split("_")[2])  # view_battery_{id}
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    
    try:
        async with db_manager.pool.acquire() as conn:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞—Ç–∞—Ä–µ–µ
            battery = await conn.fetchrow("""
                SELECT ts.*, COUNT(DISTINCT tse.id) as exercises_count,
                       COUNT(DISTINCT tsp.id) as participants_count
                FROM test_sets ts
                LEFT JOIN test_set_exercises tse ON ts.id = tse.test_set_id
                LEFT JOIN test_set_participants tsp ON ts.id = tsp.test_set_id
                WHERE ts.id = $1 AND ts.created_by = $2
                GROUP BY ts.id
            """, battery_id, user['id'])
            
            if not battery:
                await callback.answer("‚ùå –ë–∞—Ç–∞—Ä–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –±–∞—Ç–∞—Ä–µ–µ
            exercises = await conn.fetch("""
                SELECT tse.id, e.name, e.muscle_group, e.test_type
                FROM test_set_exercises tse
                JOIN exercises e ON tse.exercise_id = e.id
                WHERE tse.test_set_id = $1
                ORDER BY tse.id
            """, battery_id)
        
        text = f"üìã **{battery['name']}**\n\n"
        text += f"üîí **–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞:** `{battery['access_code']}`\n"
        text += f"üë• **–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {battery['participants_count']}\n"
        text += f"üìä **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:** {battery['exercises_count']}\n"
        text += f"üìÖ **–°–æ–∑–¥–∞–Ω–æ:** {battery['created_at'].strftime('%d.%m.%Y')}\n\n"
        
        if battery['description']:
            text += f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {battery['description']}\n\n"
        
        if exercises:
            text += f"üèãÔ∏è **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –±–∞—Ç–∞—Ä–µ–µ:**\n"
            for i, ex in enumerate(exercises, 1):
                test_emoji = {
                    'strength': 'üèãÔ∏è',
                    'endurance': '‚è±Ô∏è',
                    'speed': 'üèÉ',
                    'quantity': 'üî¢',
                    'none': 'üí™'
                }.get(ex['test_type'] if ex['test_type'] else 'none', 'üí™')
                text += f"{i}. {test_emoji} {ex['name']} ‚Ä¢ {ex['muscle_group']}\n"
        else:
            text += f"üì≠ **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç**\n"
            text += f"–î–æ–±–∞–≤—å—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥–ª–∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç—ã."
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", callback_data=f"add_exercises_{battery_id}")
        keyboard.button(text="üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_battery_{battery_id}")
        keyboard.button(text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data=f"battery_results_{battery_id}")
        keyboard.button(text="üìã –ú–æ–∏ –±–∞—Ç–∞—Ä–µ–∏", callback_data="my_batteries")
        keyboard.adjust(1)
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await callback.answer()

# ===== –î–û–ë–ê–í–õ–ï–ù–ò–ï –£–ü–†–ê–ñ–ù–ï–ù–ò–ô –í –ë–ê–¢–ê–†–ï–Æ =====
async def add_exercises_to_battery(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –±–∞—Ç–∞—Ä–µ—é"""
    battery_id = int(callback.data.split("_")[2])  # add_exercises_{id}
    await state.update_data(editing_battery_id=battery_id)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data="search_for_battery")
    keyboard.button(text="üìÇ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="browse_cat_for_battery")
    keyboard.button(text="üí™ –ü–æ –≥—Ä—É–ø–ø–∞–º –º—ã—à—Ü", callback_data="browse_muscle_for_battery")
    keyboard.button(text="üîô –ö –±–∞—Ç–∞—Ä–µ–µ", callback_data=f"view_battery_{battery_id}")
    keyboard.adjust(1)
    
    text = f"‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –±–∞—Ç–∞—Ä–µ—é**\n\n"
    text += f"üéØ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
    text += f"‚Ä¢ –û–±—ã—á–Ω–æ –±–∞—Ç–∞—Ä–µ—è —Å–æ–¥–µ—Ä–∂–∏—Ç 5-10 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n"
    text += f"‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ü–µ–ª—å\n"
    text += f"‚Ä¢ –ö–æ–º–±–∏–Ω–∏—Ä—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Ç–µ—Å—Ç–æ–≤\n\n"
    text += f"**–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:**"
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await state.set_state(EditBatteryStates.adding_exercises)
    await callback.answer()

async def search_exercises_for_battery(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –±–∞—Ç–∞—Ä–µ–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    await callback.message.edit_text(
        "üîç **–ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –±–∞—Ç–∞—Ä–µ–∏**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n"
        "_–ù–∞–ø—Ä–∏–º–µ—Ä: –∂–∏–º, –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è, –ø–ª–∞–Ω–∫–∞, –±–µ–≥_\n\n"
        "üí° **–ù–∞–π–¥–µ–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞—Ç–∞—Ä–µ—é**",
        parse_mode="Markdown"
    )
    await callback.answer()

async def browse_categories_for_battery(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –±–∞—Ç–∞—Ä–µ–∏"""
    try:
        async with db_manager.pool.acquire() as conn:
            categories = await conn.fetch("SELECT DISTINCT category FROM exercises ORDER BY category")
        
        keyboard = InlineKeyboardBuilder()
        
        for cat in categories:
            keyboard.button(
                text=f"üìÇ {cat['category']}", 
                callback_data=f"battery_cat_{cat['category']}"
            )
        
        keyboard.button(text="üîô –ö –¥–æ–±–∞–≤–ª–µ–Ω–∏—é", callback_data="back_to_add_exercises")
        keyboard.adjust(2)
        
        await callback.message.edit_text(
            "üìÇ **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –±–∞—Ç–∞—Ä–µ–∏:**\n\n"
            "üí° **–í—ã–±—Ä–∞–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞—Ç–∞—Ä–µ—é**",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await callback.answer()

async def browse_muscle_groups_for_battery(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä—É–ø–ø –º—ã—à—Ü –¥–ª—è –±–∞—Ç–∞—Ä–µ–∏"""
    try:
        async with db_manager.pool.acquire() as conn:
            muscle_groups = await conn.fetch("SELECT DISTINCT muscle_group FROM exercises ORDER BY muscle_group")
        
        keyboard = InlineKeyboardBuilder()
        
        for mg in muscle_groups:
            keyboard.button(
                text=f"üí™ {mg['muscle_group']}", 
                callback_data=f"battery_muscle_{mg['muscle_group']}"
            )
        
        keyboard.button(text="üîô –ö –¥–æ–±–∞–≤–ª–µ–Ω–∏—é", callback_data="back_to_add_exercises")
        keyboard.adjust(2)
        
        await callback.message.edit_text(
            "üí™ **–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –º—ã—à—Ü –¥–ª—è –±–∞—Ç–∞—Ä–µ–∏:**\n\n"
            "üí° **–í—ã–±—Ä–∞–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞—Ç–∞—Ä–µ—é**",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await callback.answer()

async def show_battery_category_exercises(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞—Ç–∞—Ä–µ—é"""
    category = callback.data[12:]  # –£–±–∏—Ä–∞–µ–º "battery_cat_"
    
    try:
        async with db_manager.pool.acquire() as conn:
            exercises = await conn.fetch(
                "SELECT id, name, muscle_group, test_type FROM exercises WHERE category = $1 ORDER BY name",
                category
            )
        
        if exercises:
            text = f"üìÇ **{category} - –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞—Ç–∞—Ä–µ—é:**\n\n"
            
            keyboard = InlineKeyboardBuilder()
            
            for ex in exercises:
                test_emoji = {
                    'strength': 'üèãÔ∏è',
                    'endurance': '‚è±Ô∏è',
                    'speed': 'üèÉ',
                    'quantity': 'üî¢',
                    'none': 'üí™'
                }.get(ex['test_type'] if ex['test_type'] else 'none', 'üí™')
                
                keyboard.button(
                    text=f"‚ûï {test_emoji} {ex['name']}", 
                    callback_data=f"add_to_battery_{ex['id']}"
                )
            
            keyboard.button(text="üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="browse_cat_for_battery")
            keyboard.adjust(1)
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
        else:
            await callback.message.edit_text(f"‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await callback.answer()

async def show_battery_muscle_exercises(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –º—ã—à—Ü –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞—Ç–∞—Ä–µ—é"""
    muscle_group = callback.data[15:]  # –£–±–∏—Ä–∞–µ–º "battery_muscle_"
    
    try:
        async with db_manager.pool.acquire() as conn:
            exercises = await conn.fetch(
                "SELECT id, name, category, test_type FROM exercises WHERE muscle_group = $1 ORDER BY name",
                muscle_group
            )
        
        if exercises:
            text = f"üí™ **{muscle_group} - –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞—Ç–∞—Ä–µ—é:**\n\n"
            
            keyboard = InlineKeyboardBuilder()
            
            for ex in exercises:
                test_emoji = {
                    'strength': 'üèãÔ∏è',
                    'endurance': '‚è±Ô∏è',
                    'speed': 'üèÉ',
                    'quantity': 'üî¢',
                    'none': 'üí™'
                }.get(ex['test_type'] if ex['test_type'] else 'none', 'üí™')
                
                keyboard.button(
                    text=f"‚ûï {test_emoji} {ex['name']}", 
                    callback_data=f"add_to_battery_{ex['id']}"
                )
            
            keyboard.button(text="üîô –ö –≥—Ä—É–ø–ø–∞–º –º—ã—à—Ü", callback_data="browse_muscle_for_battery")
            keyboard.adjust(1)
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
        else:
            await callback.message.edit_text(f"‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã '{muscle_group}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await callback.answer()

async def add_exercise_to_battery(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –±–∞—Ç–∞—Ä–µ—é"""
    exercise_id = int(callback.data.split("_")[3])  # add_to_battery_{id}
    data = await state.get_data()
    battery_id = data.get('editing_battery_id')
    
    if not battery_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –±–∞—Ç–∞—Ä–µ—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
        return
    
    try:
        async with db_manager.pool.acquire() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –µ—â–µ –Ω–µ—Ç –≤ –±–∞—Ç–∞—Ä–µ–µ
            existing = await conn.fetchrow("""
                SELECT id FROM test_set_exercises 
                WHERE test_set_id = $1 AND exercise_id = $2
            """, battery_id, exercise_id)
            
            if existing:
                await callback.answer("‚ö†Ô∏è –≠—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞—Ç–∞—Ä–µ—é!")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
            await conn.execute("""
                INSERT INTO test_set_exercises (test_set_id, exercise_id)
                VALUES ($1, $2)
            """, battery_id, exercise_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
            exercise = await conn.fetchrow("SELECT name FROM exercises WHERE id = $1", exercise_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞—Ç–∞—Ä–µ–µ
            battery = await conn.fetchrow("""
                SELECT ts.name, COUNT(DISTINCT tse.id) as exercises_count
                FROM test_sets ts
                LEFT JOIN test_set_exercises tse ON ts.id = tse.test_set_id
                WHERE ts.id = $1
                GROUP BY ts.id, ts.name
            """, battery_id)
        
        await callback.answer(f"‚úÖ '{exercise['name']}' –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
        text = f"‚úÖ **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞—Ç–∞—Ä–µ—é!**\n\n"
        text += f"üìã **–ë–∞—Ç–∞—Ä–µ—è:** {battery['name']}\n"
        text += f"‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–æ:** {exercise['name']}\n"
        text += f"üìä **–í—Å–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:** {battery['exercises_count']}\n\n"
        text += f"**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**"
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data=f"add_exercises_{battery_id}")
        keyboard.button(text="üìã –ö –±–∞—Ç–∞—Ä–µ–µ", callback_data=f"view_battery_{battery_id}")
        keyboard.button(text="üìã –ú–æ–∏ –±–∞—Ç–∞—Ä–µ–∏", callback_data="my_batteries")
        keyboard.adjust(1)
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")
        print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {e}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏


# ===== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –î–õ–Ø –ò–ì–†–û–ö–û–í =====
async def player_batteries_main_menu(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–∞—Ç–∞—Ä–µ–π —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤"""
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìã –ú–æ–∏ –±–∞—Ç–∞—Ä–µ–∏", callback_data="my_assigned_batteries")
    keyboard.button(text="üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –ø–æ –∫–æ–¥—É", callback_data="join_battery")
    keyboard.button(text="üìà –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="my_battery_results")
    keyboard.button(text="üîô –ö —Ç–µ—Å—Ç–∞–º", callback_data="tests_menu")
    keyboard.adjust(1)
    
    try:
        async with db_manager.pool.acquire() as conn:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            stats = await conn.fetchrow("""
                SELECT 
                    COUNT(DISTINCT tsp.test_set_id) as joined_batteries
                FROM test_set_participants tsp
                WHERE tsp.user_id = $1
            """, user['id'])
        
        joined_batteries = stats['joined_batteries'] or 0
        
        text = f"üìã **–ú–æ–∏ –±–∞—Ç–∞—Ä–µ–∏ —Ç–µ—Å—Ç–æ–≤**\n\n"
        
        if joined_batteries > 0:
            text += f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            text += f"‚Ä¢ –£—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –±–∞—Ç–∞—Ä–µ—è—Ö: **{joined_batteries}**\n\n"
            
            text += f"üéØ **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
            text += f"‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –±–∞—Ç–∞—Ä–µ–∏\n"
            text += f"‚Ä¢ –ü—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç—ã –∏–∑ –±–∞—Ç–∞—Ä–µ–π\n"
            text += f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
            text += f"‚Ä¢ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –Ω–æ–≤—ã–º –±–∞—Ç–∞—Ä–µ—è–º –ø–æ –∫–æ–¥—É\n\n"
        else:
            text += f"üÜï **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –±–∞—Ç–∞—Ä–µ–π —Ç–µ—Å—Ç–æ–≤!**\n\n"
            text += f"üìã **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n"
            text += f"‚Ä¢ –¢—Ä–µ–Ω–µ—Ä —Å–æ–∑–¥–∞–µ—Ç –±–∞—Ç–∞—Ä–µ—é —Ç–µ—Å—Ç–æ–≤\n"
            text += f"‚Ä¢ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç–µ—Å—å –ø–æ –∫–æ–¥—É\n"
            text += f"‚Ä¢ –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã\n"
            text += f"‚Ä¢ –¢—Ä–µ–Ω–µ—Ä –≤–∏–¥–∏—Ç –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\n"
        
        text += f"**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**"
        
    except Exception as e:
        text = f"üìã **–ú–æ–∏ –±–∞—Ç–∞—Ä–µ–∏ —Ç–µ—Å—Ç–æ–≤**\n\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}"
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

# ===== –ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–ï –ö –ë–ê–¢–ê–†–ï–ï =====
async def join_battery(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –±–∞—Ç–∞—Ä–µ–µ"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="player_batteries")
    
    await callback.message.edit_text(
        "üîó **–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –±–∞—Ç–∞—Ä–µ–µ —Ç–µ—Å—Ç–æ–≤**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞—Ç–∞—Ä–µ–µ —Ç–µ—Å—Ç–æ–≤:\n"
        "_–ù–∞–ø—Ä–∏–º–µ—Ä: `TS-AB12` –∏–ª–∏ `TS-XY-98`_\n\n"
        "üí° **–ì–¥–µ –≤–∑—è—Ç—å –∫–æ–¥:**\n"
        "‚Ä¢ –£ –≤–∞—à–µ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞\n"
        "‚Ä¢ –í –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –∫–æ–º–∞–Ω–¥—ã\n"
        "‚Ä¢ –ù–∞ –¥–æ—Å–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å–ø–æ—Ä—Ç–∑–∞–ª–∞",
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await state.set_state(JoinBatteryStates.waiting_battery_code)
    await callback.answer()

async def process_battery_code(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –±–∞—Ç–∞—Ä–µ–∏"""
    code = message.text.strip().upper()
    user = await db_manager.get_user_by_telegram_id(message.from_user.id)
    
    try:
        async with db_manager.pool.acquire() as conn:
            # –ò—â–µ–º –±–∞—Ç–∞—Ä–µ—é –ø–æ –∫–æ–¥—É
            battery = await conn.fetchrow("""
                SELECT ts.*, COUNT(DISTINCT tse.id) as exercises_count
                FROM test_sets ts
                LEFT JOIN test_set_exercises tse ON ts.id = tse.test_set_id
                WHERE ts.access_code = $1 AND ts.is_active = true
                GROUP BY ts.id
            """, code)
            
            if not battery:
                await message.answer(
                    f"‚ùå **–ë–∞—Ç–∞—Ä–µ—è —Å –∫–æ–¥–æ–º '{code}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞**\n\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω –ª–∏ —É–∂–µ
            existing = await conn.fetchrow("""
                SELECT id FROM test_set_participants 
                WHERE test_set_id = $1 AND user_id = $2
            """, battery['id'], user['id'])
            
            if existing:
                await message.answer(
                    f"‚ö†Ô∏è **–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –±–∞—Ç–∞—Ä–µ–µ!**\n\n"
                    f"üìã **{battery['name']}**"
                )
                await state.clear()
                return
            
            # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –∫ –±–∞—Ç–∞—Ä–µ–µ
            await conn.execute("""
                INSERT INTO test_set_participants (test_set_id, user_id)
                VALUES ($1, $2)
            """, battery['id'], user['id'])
        
        text = f"üéâ **–£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –±–∞—Ç–∞—Ä–µ–µ!**\n\n"
        text += f"üìã **–ù–∞–∑–≤–∞–Ω–∏–µ:** {battery['name']}\n"
        text += f"üìä **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:** {battery['exercises_count']}\n"
        text += f"üìÖ **–°–æ–∑–¥–∞–Ω–æ:** {battery['created_at'].strftime('%d.%m.%Y')}\n\n"
        
        if battery['description']:
            text += f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {battery['description']}\n\n"
        
        text += f"üéØ **–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç—ã –∏–∑ —ç—Ç–æ–π –±–∞—Ç–∞—Ä–µ–∏!**\n"
        text += f"–ù–∞–π–¥–∏—Ç–µ –µ—ë –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –±–∞—Ç–∞—Ä–µ–∏'."
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üìã –ú–æ–∏ –±–∞—Ç–∞—Ä–µ–∏", callback_data="my_assigned_batteries")
        keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        keyboard.adjust(1)
        
        await message.answer(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")

# ===== –ó–ê–ì–õ–£–®–ö–ò =====
async def my_assigned_batteries(callback: CallbackQuery):
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞"""
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - –º–æ–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –±–∞—Ç–∞—Ä–µ–∏")

async def my_battery_results(callback: CallbackQuery):
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞"""
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–∞—Ç–∞—Ä–µ–π")

async def edit_battery(callback: CallbackQuery):
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞"""
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏")

async def battery_results(callback: CallbackQuery):
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞"""
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")

async def cancel_battery_creation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞—Ç–∞—Ä–µ–∏"""
    await state.clear()
    await my_batteries(callback)

async def back_to_add_exercises(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
    data = await state.get_data()
    battery_id = data.get('editing_battery_id')
    callback.data = f"add_exercises_{battery_id}"
    await add_exercises_to_battery(callback, state)

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô =====
async def process_battery_text_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è –±–∞—Ç–∞—Ä–µ–π"""
    current_state = await state.get_state()
    
    if current_state == CreateBatteryStates.waiting_name:
        await process_battery_name(message, state)
    elif current_state == CreateBatteryStates.waiting_description:
        await process_battery_description(message, state)
    elif current_state == JoinBatteryStates.waiting_battery_code:
        await process_battery_code(message, state)
    elif current_state == EditBatteryStates.adding_exercises:
        await search_exercises_for_battery_text(message, state)
    else:
        await message.answer("üöß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")

async def search_exercises_for_battery_text(message: Message, state: FSMContext):
    """–ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –±–∞—Ç–∞—Ä–µ–∏ –ø–æ —Ç–µ–∫—Å—Ç—É"""
    search_term = message.text.lower()
    data = await state.get_data()
    battery_id = data.get('editing_battery_id')
    
    try:
        async with db_manager.pool.acquire() as conn:
            exercises = await conn.fetch("""
                SELECT id, name, category, muscle_group, test_type
                FROM exercises 
                WHERE LOWER(name) LIKE $1 
                   OR LOWER(category) LIKE $1
                   OR LOWER(muscle_group) LIKE $1
                ORDER BY name
                LIMIT 15
            """, f"%{search_term}%")
        
        if exercises:
            text = f"üîç **–ù–∞–π–¥–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {len(exercises)}**\n\n"
            text += f"üí° **–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞—Ç–∞—Ä–µ—é:**\n\n"
            
            keyboard = InlineKeyboardBuilder()
            
            for ex in exercises:
                test_emoji = {
                    'strength': 'üèãÔ∏è',
                    'endurance': '‚è±Ô∏è',
                    'speed': 'üèÉ',
                    'quantity': 'üî¢',
                    'none': 'üí™'
                }.get(ex['test_type'] if ex['test_type'] else 'none', 'üí™')
                
                keyboard.button(
                    text=f"‚ûï {test_emoji} {ex['name']}", 
                    callback_data=f"add_to_battery_{ex['id']}"
                )
            
            keyboard.button(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data=f"add_exercises_{battery_id}")
            keyboard.button(text="üîô –ö –±–∞—Ç–∞—Ä–µ–µ", callback_data=f"view_battery_{battery_id}")
            keyboard.adjust(1)
            
            await message.answer(
                text, 
                reply_markup=keyboard.as_markup(), 
                parse_mode="Markdown"
            )
        else:
            text = f"‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n" \
                   f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞."
            
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data=f"add_exercises_{battery_id}")
            keyboard.button(text="üîô –ö –±–∞—Ç–∞—Ä–µ–µ", callback_data=f"view_battery_{battery_id}")
            
            await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

# ===== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í =====
def register_battery_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–∞—Ç–∞—Ä–µ–π —Ç–µ—Å—Ç–æ–≤"""
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–∞—Ç–∞—Ä–µ–π
    dp.callback_query.register(coach_batteries_main_menu, F.data == "coach_batteries")
    dp.callback_query.register(player_batteries_main_menu, F.data == "player_batteries")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏
    dp.callback_query.register(my_batteries, F.data == "my_batteries")
    dp.callback_query.register(create_battery, F.data == "create_battery")
    dp.callback_query.register(skip_battery_description, F.data == "skip_battery_description")
    dp.callback_query.register(cancel_battery_creation, F.data == "cancel_battery_creation")
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–µ–π
    dp.callback_query.register(view_battery_details, F.data.startswith("view_battery_"))
    dp.callback_query.register(add_exercises_to_battery, F.data.startswith("add_exercises_"))
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    dp.callback_query.register(search_exercises_for_battery, F.data == "search_for_battery")
    dp.callback_query.register(browse_categories_for_battery, F.data == "browse_cat_for_battery")
    dp.callback_query.register(browse_muscle_groups_for_battery, F.data == "browse_muscle_for_battery")
    dp.callback_query.register(show_battery_category_exercises, F.data.startswith("battery_cat_"))
    dp.callback_query.register(show_battery_muscle_exercises, F.data.startswith("battery_muscle_"))
    dp.callback_query.register(add_exercise_to_battery, F.data.startswith("add_to_battery_"))
    dp.callback_query.register(back_to_add_exercises, F.data == "back_to_add_exercises")
    
    # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –±–∞—Ç–∞—Ä–µ–µ
    dp.callback_query.register(join_battery, F.data == "join_battery")
    dp.callback_query.register(my_assigned_batteries, F.data == "my_assigned_batteries")
    dp.callback_query.register(my_battery_results, F.data == "my_battery_results")
    
    # –ó–∞–≥–ª—É—à–∫–∏
    dp.callback_query.register(edit_battery, F.data.startswith("edit_battery_"))
    dp.callback_query.register(battery_results, F.data.startswith("battery_results_"))

__all__ = [
    'register_battery_handlers',
    'process_battery_text_input',
    'coach_batteries_main_menu',
    'player_batteries_main_menu'
]