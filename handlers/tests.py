# ===== –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô handlers/tests.py –ë–ï–ó –ö–ù–û–ü–ö–ò –¢–†–ï–ù–ò–†–û–í–û–ö =====

from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database import db_manager
from utils.validators import validate_test_data

# ===== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –¢–ï–°–¢–û–í =====
async def tests_menu(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç–µ—Å—Ç–æ–≤ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –±–∞—Ç–∞—Ä–µ–∏ –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ"""
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    
    # –°–û–ó–î–ê–ï–ú –ö–õ–ê–í–ò–ê–¢–£–†–£ –ü–†–Ø–ú–û –ó–î–ï–°–¨
    keyboard = InlineKeyboardBuilder()
    
    if user['role'] in ['coach', 'admin']:
        keyboard.button(text="üìã –ë–∞—Ç–∞—Ä–µ–∏ —Ç–µ—Å—Ç–æ–≤", callback_data="coach_batteries")
        keyboard.button(text="üìä –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã", callback_data="individual_tests_menu")
        keyboard.button(text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã", callback_data="team_analytics")
        keyboard.button(text="üåê –ü—É–±–ª–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã", callback_data="public_test_sets")
    else:
        keyboard.button(text="üìã –ú–æ–∏ –±–∞—Ç–∞—Ä–µ–∏ —Ç–µ—Å—Ç–æ–≤", callback_data="player_batteries")
        keyboard.button(text="üî¨ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã", callback_data="individual_tests_menu")
        keyboard.button(text="üèÜ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="my_achievements")
        keyboard.button(text="üåê –ü—É–±–ª–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã", callback_data="public_test_sets")
    
    keyboard.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    keyboard.adjust(2)
    
    text = f"üìä **–°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –û–ë–ù–û–í–õ–ï–ù–û!**\n\n"
    
    if user['role'] in ['coach', 'admin']:
        text += f"üë®‚Äçüè´ **–¢—Ä–µ–Ω–µ—Ä—Å–∫–∞—è –ø–∞–Ω–µ–ª—å:**\n"
        text += f"‚Ä¢ üìã **–ë–∞—Ç–∞—Ä–µ–∏ —Ç–µ—Å—Ç–æ–≤** - –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê!\n"
        text += f"‚Ä¢ üìä **–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã** - –∫–∞–∫ —Ä–∞–Ω—å—à–µ\n\n"
    else:
        text += f"üë§ **–ü–∞–Ω–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞:**\n"
        text += f"‚Ä¢ üìã **–ú–æ–∏ –±–∞—Ç–∞—Ä–µ–∏ —Ç–µ—Å—Ç–æ–≤** - –ù–û–í–û–ï!\n"
        text += f"‚Ä¢ üî¨ **–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã** - –∫–∞–∫ —Ä–∞–Ω—å—à–µ\n\n"
    
    text += f"üéØ **–ë–∞—Ç–∞—Ä–µ–∏ —Ç–µ—Å—Ç–æ–≤:**\n"
    text += f"–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –Ω–∞–±–æ—Ä—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ —Ç–µ–º–∞–º!\n\n"
    text += f"**–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:**"
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

# ===== –ë–ê–¢–ê–†–ï–ò –¢–ï–°–¢–û–í - –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø –ù–ê –ù–û–í–´–ô –ú–û–î–£–õ–¨ =====
async def coach_batteries_menu(callback: CallbackQuery):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å –±–∞—Ç–∞—Ä–µ–π"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è
    from handlers.test_batteries import coach_batteries_main_menu
    await coach_batteries_main_menu(callback)

async def player_batteries_menu(callback: CallbackQuery):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å –±–∞—Ç–∞—Ä–µ–π"""
    from handlers.test_batteries import player_batteries_main_menu
    await player_batteries_main_menu(callback)

# ===== –û–ë–©–ò–ï –ó–ê–ì–õ–£–®–ö–ò =====
async def team_analytics(callback: CallbackQuery):
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞"""
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã")

async def public_test_sets(callback: CallbackQuery):
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞"""
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - –ø—É–±–ª–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã")

async def my_achievements(callback: CallbackQuery):
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞"""
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")

# ===== –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´ =====
async def individual_tests_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üìä –ú–æ–∏ —Ç–µ—Å—Ç—ã", callback_data="my_tests")
    keyboard.button(text="üî¨ –ù–æ–≤—ã–π —Ç–µ—Å—Ç", callback_data="new_test_menu") 
    keyboard.button(text="üìà –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="test_progress")
    keyboard.button(text="üèÜ –†–µ–∫–æ—Ä–¥—ã", callback_data="test_records")
    keyboard.button(text="üîô –ö —Ç–µ—Å—Ç–∞–º", callback_data="tests_menu")
    keyboard.adjust(2)
    
    text = f"üî¨ **–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã**\n\n"
    text += f"üìä **–í–µ–¥–∏—Ç–µ –ª–∏—á–Ω—ã–µ —Ä–µ–∫–æ—Ä–¥—ã –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º:**\n"
    text += f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ª—é–±–æ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–∏\n"
    text += f"‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–∏–ø —Ç–µ—Å—Ç–∞\n"
    text += f"‚Ä¢ –°—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏\n\n"
    text += f"üí° **–¢–∏–ø—ã —Ç–µ—Å—Ç–æ–≤:**\n"
    text += f"üèãÔ∏è –°–∏–ª–æ–≤—ã–µ - —Ä–∞—Å—á–µ—Ç 1–ü–ú –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º\n"
    text += f"‚è±Ô∏è –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å - –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è\n"
    text += f"üèÉ –°–∫–æ—Ä–æ—Å—Ç—å - –≤—Ä–µ–º—è –Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é\n"
    text += f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ - –º–∞–∫—Å–∏–º—É–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n\n"
    text += f"**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**"
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

async def new_test_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –ø–æ–∏—Å–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data="search_by_name")
    keyboard.button(text="üìÇ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="search_by_category")
    keyboard.button(text="üí™ –ü–æ –≥—Ä—É–ø–ø–∞–º –º—ã—à—Ü", callback_data="search_by_muscle")
    keyboard.button(text="üîô –ö –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º —Ç–µ—Å—Ç–∞–º", callback_data="individual_tests_menu")
    keyboard.adjust(1)
    
    await callback.message.edit_text(
        "üîç **–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:**\n\n"
        "üí° **–õ—é–±–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ!**\n"
        "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–∏–ø —Ç–µ—Å—Ç–∞:\n\n"
        
        "üèãÔ∏è **–°–∏–ª–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è** ‚Üí —Ç–µ—Å—Ç —Å —Ä–∞—Å—á–µ—Ç–æ–º 1–ü–ú –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º\n"
        "‚è±Ô∏è **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å** ‚Üí —Ç–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è\n"
        "üèÉ **–°–∫–æ—Ä–æ—Å—Ç–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è** ‚Üí —Ç–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é\n"
        "üî¢ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ** ‚Üí —Ç–µ—Å—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n\n"
        
        "**–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:**",
        
        reply_markup=keyboard.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

async def search_exercise_by_name_for_test(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞"""
    await callback.message.edit_text(
        "üîç **–ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n"
        "_–ù–∞–ø—Ä–∏–º–µ—Ä: –∂–∏–º, –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è, –ø–ª–∞–Ω–∫–∞, –±–µ–≥_\n\n"
        "üí° **–ù–∞–π–¥–µ–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!**",
        parse_mode="Markdown"
    )
    await state.set_state("waiting_search_for_test")
    await callback.answer()

async def search_by_category_for_test(callback: CallbackQuery):
    """–ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        async with db_manager.pool.acquire() as conn:
            categories = await conn.fetch("SELECT DISTINCT category FROM exercises ORDER BY category")
        
        keyboard = InlineKeyboardBuilder()
        
        for cat in categories:
            keyboard.button(
                text=f"üìÇ {cat['category']}", 
                callback_data=f"test_cat_{cat['category']}"
            )
        
        keyboard.button(text="üîô –ö –ø–æ–∏—Å–∫—É —Ç–µ—Å—Ç–∞", callback_data="new_test_menu")
        keyboard.adjust(2)
        
        await callback.message.edit_text(
            "üìÇ **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**\n\n"
            "üí° **–ù–∞–π–¥–µ–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å—Ä–∞–∑—É –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å!**",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await callback.answer()

async def search_by_muscle_for_test(callback: CallbackQuery):
    """–ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ –≥—Ä—É–ø–ø–∞–º –º—ã—à—Ü –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        async with db_manager.pool.acquire() as conn:
            muscle_groups = await conn.fetch("SELECT DISTINCT muscle_group FROM exercises ORDER BY muscle_group")
        
        keyboard = InlineKeyboardBuilder()
        
        for mg in muscle_groups:
            keyboard.button(
                text=f"üí™ {mg['muscle_group']}", 
                callback_data=f"test_muscle_{mg['muscle_group']}"
            )
        
        keyboard.button(text="üîô –ö –ø–æ–∏—Å–∫—É —Ç–µ—Å—Ç–∞", callback_data="new_test_menu")
        keyboard.adjust(2)
        
        await callback.message.edit_text(
            "üí™ **–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –º—ã—à—Ü –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**\n\n"
            "üí° **–ù–∞–π–¥–µ–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å—Ä–∞–∑—É –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å!**",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await callback.answer()

async def show_test_category_exercises(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    category = callback.data[9:]  # –£–±–∏—Ä–∞–µ–º "test_cat_"
    
    try:
        async with db_manager.pool.acquire() as conn:
            exercises = await conn.fetch(
                "SELECT id, name, muscle_group, test_type FROM exercises WHERE category = $1 ORDER BY name",
                category
            )
        
        if exercises:
            text = f"üìÇ **{category} - —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**\n\n"
            text += f"üí° **–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç:**\n\n"
            
            keyboard = InlineKeyboardBuilder()
            
            for ex in exercises:
                test_emoji = {
                    'strength': 'üèãÔ∏è',
                    'endurance': '‚è±Ô∏è', 
                    'speed': 'üèÉ',
                    'quantity': 'üî¢',
                    'none': 'üí™'
                }.get(ex['test_type'] if ex['test_type'] else 'none', 'üí™')
                
                keyboard.button(
                    text=f"{test_emoji} {ex['name']} ‚Ä¢ {ex['muscle_group']}", 
                    callback_data=f"test_{ex['id']}"
                )
            
            keyboard.button(text="üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="search_by_category")
            keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            keyboard.adjust(1)
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
        else:
            await callback.message.edit_text(f"‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await callback.answer()

async def show_test_muscle_exercises(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –º—ã—à—Ü –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    muscle_group = callback.data[12:]  # –£–±–∏—Ä–∞–µ–º "test_muscle_"
    
    try:
        async with db_manager.pool.acquire() as conn:
            exercises = await conn.fetch(
                "SELECT id, name, category, test_type FROM exercises WHERE muscle_group = $1 ORDER BY name",
                muscle_group
            )
        
        if exercises:
            text = f"üí™ **{muscle_group} - —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**\n\n"
            text += f"üí° **–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç:**\n\n"
            
            keyboard = InlineKeyboardBuilder()
            
            for ex in exercises:
                test_emoji = {
                    'strength': 'üèãÔ∏è',
                    'endurance': '‚è±Ô∏è', 
                    'speed': 'üèÉ',
                    'quantity': 'üî¢',
                    'none': 'üí™'
                }.get(ex['test_type'] if ex['test_type'] else 'none', 'üí™')
                
                keyboard.button(
                    text=f"{test_emoji} {ex['name']} ({ex['category']})", 
                    callback_data=f"test_{ex['id']}"
                )
            
            keyboard.button(text="üîô –ö –≥—Ä—É–ø–ø–∞–º –º—ã—à—Ü", callback_data="search_by_muscle")
            keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            keyboard.adjust(1)
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
        else:
            await callback.message.edit_text(f"‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã '{muscle_group}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await callback.answer()

async def handle_test_exercise_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞"""
    search_term = message.text.lower()
    
    try:
        async with db_manager.pool.acquire() as conn:
            exercises = await conn.fetch("""
                SELECT id, name, category, muscle_group, test_type
                FROM exercises 
                WHERE LOWER(name) LIKE $1 
                   OR LOWER(category) LIKE $1
                   OR LOWER(muscle_group) LIKE $1
                ORDER BY name
                LIMIT 15
            """, f"%{search_term}%")
        
        if exercises:
            text = f"üîç **–ù–∞–π–¥–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {len(exercises)}**\n\n"
            text += f"üí° **–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç:**\n\n"
            
            keyboard = InlineKeyboardBuilder()
            
            for ex in exercises:
                test_emoji = {
                    'strength': 'üèãÔ∏è',
                    'endurance': '‚è±Ô∏è', 
                    'speed': 'üèÉ',
                    'quantity': 'üî¢',
                    'none': 'üí™'
                }.get(ex['test_type'] if ex['test_type'] else 'none', 'üí™')
                
                keyboard.button(
                    text=f"{test_emoji} {ex['name']} ‚Ä¢ {ex['muscle_group']}", 
                    callback_data=f"test_{ex['id']}"
                )
            
            keyboard.button(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_test_menu")
            keyboard.button(text="üîô –ö –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º", callback_data="individual_tests_menu")
            keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            keyboard.adjust(1)
            
            await message.answer(
                text, 
                reply_markup=keyboard.as_markup(), 
                parse_mode="Markdown"
            )
        else:
            text = f"‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n" \
                   f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞."
            
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_test_menu")
            keyboard.button(text="üîô –ö –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º", callback_data="individual_tests_menu")
            keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            
            await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
            
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

# ===== –ü–†–û–•–û–ñ–î–ï–ù–ò–ï –¢–ï–°–¢–û–í –° –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–û–ô =====
async def start_exercise_test(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    exercise_id = int(callback.data[5:])  # –£–±–∏—Ä–∞–µ–º "test_"
    
    try:
        async with db_manager.pool.acquire() as conn:
            exercise = await conn.fetchrow("SELECT * FROM exercises WHERE id = $1", exercise_id)
        
        if not exercise:
            await callback.answer("‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        await state.update_data(exercise_id=exercise_id, exercise=dict(exercise))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–µ—Å—Ç–∞
        test_type = exercise['test_type'] if exercise['test_type'] else 'strength'
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç", callback_data="new_test_menu")
        
        if test_type == 'strength':
            text = f"üèãÔ∏è **–°–∏–ª–æ–≤–æ–π —Ç–µ—Å—Ç: {exercise['name']}**\n\n"
            text += f"üí™ **–ì—Ä—É–ø–ø–∞ –º—ã—à—Ü:** {exercise['muscle_group']}\n"
            text += f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {exercise['category']}\n\n"
            text += f"üìù **–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:**\n"
            text += f"_–ù–∞–ø—Ä–∏–º–µ—Ä: 80 10 (80–∫–≥ –Ω–∞ 10 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π)_\n"
            text += f"_–ò–ª–∏: 80–∫–≥ 10—Ä–∞–∑_\n\n"
            text += f"üí° **1–ü–ú –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º:**\n"
            text += f"‚Ä¢ Brzycki ‚Ä¢ Epley ‚Ä¢ Lander"
            await state.set_state("waiting_strength_test_data")
            
        elif test_type == 'endurance':
            text = f"‚è±Ô∏è **–¢–µ—Å—Ç –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏: {exercise['name']}**\n\n"
            text += f"üí™ **–ì—Ä—É–ø–ø–∞ –º—ã—à—Ü:** {exercise['muscle_group']}\n"
            text += f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {exercise['category']}\n\n"
            text += f"üìù **–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è:**\n"
            text += f"_–ù–∞–ø—Ä–∏–º–µ—Ä: 90 (—Å–µ–∫—É–Ω–¥) –∏–ª–∏ 1:30 (–º–∏–Ω:—Å–µ–∫)_"
            await state.set_state("waiting_endurance_test_data")
            
        elif test_type == 'speed':
            text = f"üèÉ **–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π —Ç–µ—Å—Ç: {exercise['name']}**\n\n"
            text += f"üí™ **–ì—Ä—É–ø–ø–∞ –º—ã—à—Ü:** {exercise['muscle_group']}\n"
            text += f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {exercise['category']}\n\n"
            text += f"üìù **–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é:**\n"
            text += f"_–ù–∞–ø—Ä–∏–º–µ—Ä: 12.5 30 (12.5—Å–µ–∫ –Ω–∞ 30–º)_"
            await state.set_state("waiting_speed_test_data")
            
        elif test_type == 'quantity':
            text = f"üî¢ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç: {exercise['name']}**\n\n"
            text += f"üí™ **–ì—Ä—É–ø–ø–∞ –º—ã—à—Ü:** {exercise['muscle_group']}\n"
            text += f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {exercise['category']}\n\n"
            text += f"üìù **–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:**\n"
            text += f"_–ù–∞–ø—Ä–∏–º–µ—Ä: 25 (–æ—Ç–∂–∏–º–∞–Ω–∏–π)_"
            await state.set_state("waiting_quantity_test_data")
        
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∏–ª–æ–≤–æ–π —Ç–µ—Å—Ç —Å —Ä–∞—Å—á–µ—Ç–æ–º –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º
            text = f"üí™ **–°–∏–ª–æ–≤–æ–π —Ç–µ—Å—Ç: {exercise['name']}**\n\n"
            text += f"üí™ **–ì—Ä—É–ø–ø–∞ –º—ã—à—Ü:** {exercise['muscle_group']}\n"
            text += f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {exercise['category']}\n\n"
            text += f"üìù **–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:**\n"
            text += f"_–ù–∞–ø—Ä–∏–º–µ—Ä: 80 10 (80–∫–≥ –Ω–∞ 10 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π)_"
            await state.set_state("waiting_strength_test_data")
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await callback.answer()

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–û–í =====
async def process_strength_test_data(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏–ª–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å —Ä–∞—Å—á–µ—Ç–æ–º 1–ü–ú –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º"""
    test_data = message.text.strip()
    data = await state.get_data()
    exercise = data['exercise']
    user = await db_manager.get_user_by_telegram_id(message.from_user.id)
    
    validation = validate_test_data(test_data, 'strength')
    if not validation['valid']:
        await message.answer(validation['error'])
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º 1–ü–ú –ø–æ —Ç—Ä–µ–º —Ñ–æ—Ä–º—É–ª–∞–º
    weight = validation['weight']
    reps = validation['reps']
    
    # –§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á–µ—Ç–∞ 1–ü–ú
    brzycki = weight * (36 / (37 - reps)) if reps < 37 else weight
    epley = weight * (1 + reps / 30)
    lander = weight * (100 / (101.3 - 2.67123 * reps)) if reps < 37 else weight
    
    # –°—Ä–µ–¥–Ω–∏–π 1–ü–ú
    avg_1rm = (brzycki + epley + lander) / 3
    
    try:
        async with db_manager.pool.acquire() as conn:
            await conn.execute("""
                INSERT INTO test_results 
                (user_id, exercise_id, test_type, result_value, result_unit, test_weight, test_reps)
                VALUES ($1, $2, $3, $4, $5, $6, $7)
            """, user['id'], data['exercise_id'], 'strength', 
                 round(avg_1rm, 1), '–∫–≥', weight, reps)
        
        text = f"‚úÖ **–°–∏–ª–æ–≤–æ–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
        text += f"üèãÔ∏è **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:** {exercise['name']}\n"
        text += f"üí™ **–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:** {weight}–∫–≥ √ó {reps} —Ä–∞–∑\n\n"
        text += f"üìä **–†–∞—Å—á–µ—Ç–Ω—ã–π 1–ü–ú –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º:**\n"
        text += f"‚Ä¢ Brzycki: {brzycki:.1f}–∫–≥\n"
        text += f"‚Ä¢ Epley: {epley:.1f}–∫–≥\n"
        text += f"‚Ä¢ Lander: {lander:.1f}–∫–≥\n\n"
        text += f"üéØ **–°—Ä–µ–¥–Ω–∏–π 1–ü–ú: {avg_1rm:.1f}–∫–≥**\n"
        text += f"üìÖ **–î–∞—Ç–∞:** {message.date.strftime('%d.%m.%Y %H:%M')}\n\n"
        text += f"‚úÖ **–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é!**"
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üî¨ –ù–æ–≤—ã–π —Ç–µ—Å—Ç", callback_data="new_test_menu")
        keyboard.button(text="üìä –ú–æ–∏ —Ç–µ—Å—Ç—ã", callback_data="my_tests")
        keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        keyboard.adjust(1)
        
        await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

async def process_endurance_test_data(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏"""
    test_data = message.text.strip()
    data = await state.get_data()
    exercise = data['exercise']
    user = await db_manager.get_user_by_telegram_id(message.from_user.id)
    
    validation = validate_test_data(test_data, 'endurance')
    if not validation['valid']:
        await message.answer(validation['error'])
        return
    
    try:
        async with db_manager.pool.acquire() as conn:
            await conn.execute("""
                INSERT INTO test_results 
                (user_id, exercise_id, test_type, result_value, result_unit, duration_seconds)
                VALUES ($1, $2, $3, $4, $5, $6)
            """, user['id'], data['exercise_id'], 'endurance', 
                 validation['seconds'], '—Å–µ–∫', validation['seconds'])
        
        text = f"‚úÖ **–¢–µ—Å—Ç –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
        text += f"‚è±Ô∏è **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:** {exercise['name']}\n"
        text += f"üí™ **–†–µ–∑—É–ª—å—Ç–∞—Ç:** {validation['formatted_time']}\n"
        text += f"üìÖ **–î–∞—Ç–∞:** {message.date.strftime('%d.%m.%Y %H:%M')}\n\n"
        text += f"‚úÖ **–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é!**"
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üî¨ –ù–æ–≤—ã–π —Ç–µ—Å—Ç", callback_data="new_test_menu")
        keyboard.button(text="üìä –ú–æ–∏ —Ç–µ—Å—Ç—ã", callback_data="my_tests")
        keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        keyboard.adjust(1)
        
        await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

async def process_speed_test_data(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    test_data = message.text.strip()
    data = await state.get_data()
    exercise = data['exercise']
    user = await db_manager.get_user_by_telegram_id(message.from_user.id)
    
    validation = validate_test_data(test_data, 'speed')
    if not validation['valid']:
        await message.answer(validation['error'])
        return
    
    try:
        async with db_manager.pool.acquire() as conn:
            await conn.execute("""
                INSERT INTO test_results 
                (user_id, exercise_id, test_type, result_value, result_unit, time_seconds, distance)
                VALUES ($1, $2, $3, $4, $5, $6, $7)
            """, user['id'], data['exercise_id'], 'speed', 
                 validation['time'], '—Å–µ–∫', validation['time'], validation['distance'])
        
        text = f"‚úÖ **–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
        text += f"üèÉ **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:** {exercise['name']}\n"
        text += f"üí™ **–†–µ–∑—É–ª—å—Ç–∞—Ç:** {validation['time']}—Å–µ–∫ –Ω–∞ {validation['distance']}–º\n"
        text += f"üìÖ **–î–∞—Ç–∞:** {message.date.strftime('%d.%m.%Y %H:%M')}\n\n"
        text += f"‚úÖ **–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é!**"
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üî¨ –ù–æ–≤—ã–π —Ç–µ—Å—Ç", callback_data="new_test_menu")
        keyboard.button(text="üìä –ú–æ–∏ —Ç–µ—Å—Ç—ã", callback_data="my_tests")
        keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        keyboard.adjust(1)
        
        await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

async def process_quantity_test_data(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    test_data = message.text.strip()
    data = await state.get_data()
    exercise = data['exercise']
    user = await db_manager.get_user_by_telegram_id(message.from_user.id)
    
    validation = validate_test_data(test_data, 'quantity')
    if not validation['valid']:
        await message.answer(validation['error'])
        return
    
    try:
        async with db_manager.pool.acquire() as conn:
            await conn.execute("""
                INSERT INTO test_results 
                (user_id, exercise_id, test_type, result_value, result_unit, max_reps)
                VALUES ($1, $2, $3, $4, $5, $6)
            """, user['id'], data['exercise_id'], 'quantity', 
                 validation['reps'], '—Ä–∞–∑', validation['reps'])
        
        text = f"‚úÖ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
        text += f"üî¢ **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:** {exercise['name']}\n"
        text += f"üí™ **–†–µ–∑—É–ª—å—Ç–∞—Ç:** {validation['reps']} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π\n"
        text += f"üìÖ **–î–∞—Ç–∞:** {message.date.strftime('%d.%m.%Y %H:%M')}\n\n"
        text += f"‚úÖ **–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é!**"
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üî¨ –ù–æ–≤—ã–π —Ç–µ—Å—Ç", callback_data="new_test_menu")
        keyboard.button(text="üìä –ú–æ–∏ —Ç–µ—Å—Ç—ã", callback_data="my_tests")
        keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        keyboard.adjust(1)
        
        await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

# ===== –ü–†–û–°–ú–û–¢–† –¢–ï–°–¢–û–í =====
async def my_tests(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    
    try:
        async with db_manager.pool.acquire() as conn:
            tests = await conn.fetch("""
                SELECT tr.*, e.name as exercise_name, e.muscle_group
                FROM test_results tr
                JOIN exercises e ON tr.exercise_id = e.id
                WHERE tr.user_id = $1
                ORDER BY tr.tested_at DESC
                LIMIT 10
            """, user['id'])
        
        if tests:
            text = f"üìä **–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–µ—Å—Ç—ã ({len(tests)}):**\n\n"
            
            for test in tests:
                test_emoji = {
                    'strength': 'üèãÔ∏è',
                    'endurance': '‚è±Ô∏è',
                    'speed': 'üèÉ',
                    'quantity': 'üî¢'
                }.get(test['test_type'], 'üí™')
                
                text += f"{test_emoji} **{test['exercise_name']}**\n"
                text += f"üí™ {test['muscle_group']} ‚Ä¢ "
                
                if test['test_type'] == 'strength':
                    text += f"1–ü–ú {test['result_value']}–∫–≥"
                    if test['test_weight'] and test['test_reps']:
                        text += f" ({test['test_weight']}–∫–≥√ó{test['test_reps']})"
                elif test['test_type'] == 'endurance':
                    minutes = int(test['result_value'] // 60)
                    seconds = int(test['result_value'] % 60)
                    text += f"{minutes}:{seconds:02d}"
                elif test['test_type'] == 'speed':
                    text += f"{test['result_value']}—Å–µ–∫"
                    if test['distance']:
                        text += f" –Ω–∞ {test['distance']}–º"
                elif test['test_type'] == 'quantity':
                    text += f"{int(test['result_value'])} —Ä–∞–∑"
                
                text += f" ‚Ä¢ {test['tested_at'].strftime('%d.%m')}\n\n"
        else:
            text = f"üìä **–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤**\n\n"
            text += f"–ü—Ä–æ–π–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å!"
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üî¨ –ù–æ–≤—ã–π —Ç–µ—Å—Ç", callback_data="new_test_menu")
        keyboard.button(text="üìà –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="test_progress")
        keyboard.button(text="üîô –ö –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º", callback_data="individual_tests_menu")
        keyboard.adjust(1)
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await callback.answer()

async def test_progress(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ—Å—Ç–∞–º"""
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Ç–µ—Å—Ç–∞–º")

async def test_records(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ—Ä–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.answer("üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - –ª–∏—á–Ω—ã–µ —Ä–µ–∫–æ—Ä–¥—ã")

# ===== –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –¢–†–ï–ù–ò–†–û–í–û–ö =====
async def get_user_test_result_for_workout(user_id: int, exercise_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    try:
        async with db_manager.pool.acquire() as conn:
            result = await conn.fetchrow("""
                SELECT * FROM test_results 
                WHERE user_id = $1 AND exercise_id = $2 
                ORDER BY tested_at DESC LIMIT 1
            """, user_id, exercise_id)
        return result
    except:
        return None

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô =====
async def process_test_text_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    current_state = await state.get_state()
    
    if current_state == "waiting_search_for_test":
        await handle_test_exercise_search(message, state)
    elif current_state == "waiting_strength_test_data":
        await process_strength_test_data(message, state)
    elif current_state == "waiting_endurance_test_data":
        await process_endurance_test_data(message, state)
    elif current_state == "waiting_speed_test_data":
        await process_speed_test_data(message, state)
    elif current_state == "waiting_quantity_test_data":
        await process_quantity_test_data(message, state)
    else:
        await message.answer("‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")

# ===== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í =====
def register_test_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    
    # –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –¢–ï–°–¢–û–í
    dp.callback_query.register(tests_menu, F.data == "tests_menu")
    
    # –ë–ê–¢–ê–†–ï–ò –¢–ï–°–¢–û–í - –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø
    dp.callback_query.register(coach_batteries_menu, F.data == "coach_batteries")
    dp.callback_query.register(player_batteries_menu, F.data == "player_batteries")
    
    # –û–ë–©–ò–ï –ó–ê–ì–õ–£–®–ö–ò
    dp.callback_query.register(team_analytics, F.data == "team_analytics")
    dp.callback_query.register(public_test_sets, F.data == "public_test_sets")
    dp.callback_query.register(my_achievements, F.data == "my_achievements")
    
    # –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´
    dp.callback_query.register(individual_tests_menu, F.data == "individual_tests_menu")
    dp.callback_query.register(new_test_menu, F.data == "new_test_menu")
    dp.callback_query.register(my_tests, F.data == "my_tests")
    dp.callback_query.register(test_progress, F.data == "test_progress")
    dp.callback_query.register(test_records, F.data == "test_records")
    
    # –ü–û–ò–°–ö –£–ü–†–ê–ñ–ù–ï–ù–ò–ô –î–õ–Ø –¢–ï–°–¢–û–í
    dp.callback_query.register(search_exercise_by_name_for_test, F.data == "search_by_name")
    dp.callback_query.register(search_by_category_for_test, F.data == "search_by_category") 
    dp.callback_query.register(search_by_muscle_for_test, F.data == "search_by_muscle")
    
    # –ü–†–û–°–ú–û–¢–† –£–ü–†–ê–ñ–ù–ï–ù–ò–ô –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú/–ì–†–£–ü–ü–ê–ú
    dp.callback_query.register(show_test_category_exercises, F.data.startswith("test_cat_"))
    dp.callback_query.register(show_test_muscle_exercises, F.data.startswith("test_muscle_"))
    
    # –ü–†–û–•–û–ñ–î–ï–ù–ò–ï –¢–ï–°–¢–û–í
    dp.callback_query.register(start_exercise_test, F.data.startswith("test_"))

__all__ = [
    'register_test_handlers',
    'process_test_text_input',
    'get_user_test_result_for_workout'
]