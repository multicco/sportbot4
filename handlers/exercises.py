# handlers/workouts.py
import logging
from typing import Optional, Dict, Any, List
from datetime import datetime

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database import db_manager
from states.workout_states import CreateWorkoutStates

logger = logging.getLogger(__name__)
workouts_router = Router()


# -----------------------
#  HELPERS
# -----------------------
async def _safe_edit_or_send(message_obj, text: str, **kwargs):
    """
    –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å edit_text, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    try:
        await message_obj.edit_text(text, **kwargs)
    except Exception:
        # message_obj –º–æ–∂–µ—Ç –±—ã—Ç—å CallbackQuery.message –∏–ª–∏ Message
        try:
            await message_obj.answer(text, **kwargs)
        except Exception as e:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –Ω–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", e)


def _new_block_struct(name: str = "") -> Dict[str, Any]:
    return {"name": name, "description": "", "exercises": []}


# -----------------------
#  DEBUG: –ª–æ–≤–∏–º –í–°–ï callback (–≤—Ä–µ–º–µ–Ω–Ω–æ –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å)
# -----------------------
@workouts_router.callback_query()  # catch-all –¥–ª—è –∫–æ–ª–±–µ–∫–æ–≤ ‚Äî —É–¥–æ–±–Ω–æ –æ—Ç–ª–∞–∂–∏–≤–∞—Ç—å
async def _debug_all_callbacks(callback: CallbackQuery):
    logger.debug("üî∏ –ü–æ–ª—É—á–µ–Ω callback: %s (from %s)", callback.data, callback.from_user.id)
    # –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ‚Äî –¥–∞—ë–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
    # –Ω–æ –µ—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ö–µ–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–æ update –±—É–¥–µ—Ç –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ not handled –≤ –ª–æ–≥–∞—Ö aiogram


@workouts_router.message()  # debug –¥–ª—è –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ router –ø–æ–¥–∫–ª—é—á—ë–Ω)
async def _debug_all_messages(message: Message, state: FSMContext):
    current_state = await state.get_state()
    logger.debug("üí¨ DEBUG MESSAGE: text='%s' state=%s user=%s", message.text, current_state, message.from_user.id)
    # –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏


# === –ü–û–ò–°–ö –£–ü–†–ê–ñ–ù–ï–ù–ò–ô ===
@exercises_router.callback_query(F.data == "search_exercise")
async def search_exercise_menu(callback: CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(text="–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data="search_by_name")
    kb.button(text="–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="search_by_category")
    kb.button(text="–ü–æ –≥—Ä—É–ø–ø–µ –º—ã—à—Ü", callback_data="search_by_muscle")
    kb.button(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    kb.adjust(1)
    await callback.message.edit_text(
        "**–ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:",
        reply_markup=kb.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

# -----------------------
#  MENU: –≥–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –º–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
# -----------------------
@workouts_router.callback_query(F.data == "workouts_menu")
async def workouts_menu(callback: CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(text="üèãÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="workouts_my")
    kb.button(text="üîç –ù–∞–π—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="workouts_find")
    kb.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="create_workout")
    kb.button(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="workout_statistics")
    kb.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    kb.adjust(2)
    await callback.message.edit_text("üèãÔ∏è **–ú–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.as_markup(), parse_mode="Markdown")
    await callback.answer()


# -----------------------
#  –ú–û–ò –¢–†–ï–ù–ò–†–û–í–ö–ò (–∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫)
# -----------------------
@workouts_router.callback_query(F.data == "workouts_my")
async def my_workouts(callback: CallbackQuery):
    try:
        user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        async with db_manager.pool.acquire() as conn:
            rows = await conn.fetch(
                """
                SELECT w.id, w.name, w.unique_id, w.estimated_duration_minutes,
                       COUNT(we.id) AS exercise_count
                FROM workouts w
                LEFT JOIN workout_exercises we ON we.workout_id = w.id
                WHERE w.created_by = $1 AND w.is_active = true
                GROUP BY w.id
                ORDER BY w.created_at DESC
                LIMIT 20
                """,
                user["id"],
            )

        if not rows:
            kb = InlineKeyboardBuilder()
            kb.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é", callback_data="create_workout")
            kb.button(text="üîô –ö –º–µ–Ω—é", callback_data="workouts_menu")
            kb.adjust(1)
            await callback.message.edit_text("–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.", reply_markup=kb.as_markup())
            await callback.answer()
            return

        text = f"üèãÔ∏è **–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ({len(rows)})**\n\n"
        kb = InlineKeyboardBuilder()
        for r in rows:
            ex_count = r["exercise_count"] or 0
            text += f"‚Ä¢ **{r['name']}** ‚Äî {ex_count} —É–ø. ‚Äî ~{r['estimated_duration_minutes']} –º–∏–Ω\n"
            kb.button(text=f"{r['name']}", callback_data=f"view_workout_{r['id']}")
        kb.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é", callback_data="create_workout")
        kb.button(text="üîô –ö –º–µ–Ω—é", callback_data="workouts_menu")
        kb.adjust(1)
        await callback.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="Markdown")
        await callback.answer()

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ my_workouts: %s", e)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.", show_alert=True)


# -----------------------
#  –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
# -----------------------
def _format_time(seconds: Optional[int]) -> str:
    if not seconds:
        return ""
    m, s = divmod(seconds, 60)
    if m > 0:
        return f"{m}–º {s}—Å" if s else f"{m}–º"
    return f"{s}—Å"


@workouts_router.callback_query(F.data.startswith("view_workout_"))
async def view_workout_details(callback: CallbackQuery):
    try:
        workout_id = int(callback.data.split("_")[-1])
    except Exception:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", show_alert=True)
        return

    try:
        async with db_manager.pool.acquire() as conn:
            workout = await conn.fetchrow(
                """
                SELECT w.*, u.first_name as creator_name, u.last_name as creator_lastname
                FROM workouts w
                LEFT JOIN users u ON w.created_by = u.id
                WHERE w.id = $1 AND w.is_active = true
                """,
                workout_id,
            )
            if not workout:
                await callback.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return

            exercises = await conn.fetch(
                """
                SELECT we.*, e.name as exercise_name, e.muscle_group, e.category
                FROM workout_exercises we
                LEFT JOIN exercises e ON we.exercise_id = e.id
                WHERE we.workout_id = $1
                ORDER BY we.phase, we.order_in_phase
                """,
                workout_id,
            )

        creator = workout["creator_name"] or "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        if workout["creator_lastname"]:
            creator += f" {workout['creator_lastname']}"

        text = f"üèãÔ∏è **{workout['name']}**\n\n"
        if workout["description"]:
            text += f"üìù _{workout['description']}_\n\n"
        text += f"üë§ –ê–≤—Ç–æ—Ä: {creator}\n"
        text += f"‚è± ~{workout['estimated_duration_minutes']} –º–∏–Ω\n"
        text += f"üîñ –ö–æ–¥: `{workout['unique_id']}`\n\n"

        if exercises:
            phases = {}
            for ex in exercises:
                phase = ex["phase"] or "other"
                phases.setdefault(phase, []).append(ex)

            for phase, items in phases.items():
                text += f"**{phase.title()}:**\n"
                for it in items:
                    reps = f"{it['reps_min']}-{it['reps_max']}" if it["reps_min"] and it["reps_max"] else ""
                    one_rm = f" ({it['one_rm_percent']}% 1–ü–ú)" if it.get("one_rm_percent") else ""
                    rest = _format_time(it.get("rest_seconds"))
                    text += f"‚Ä¢ {it['exercise_name']} ‚Äî {it['sets']}x{reps}{one_rm} {(' | ' + rest) if rest else ''}\n"
                text += "\n"

        kb = InlineKeyboardBuilder()
        kb.button(text="‚ñ∂Ô∏è –ù–∞—á–∏–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data=f"start_workout_{workout_id}")
        kb.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"workout_stats_{workout_id}")
        kb.button(text="üîÅ –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥", callback_data=f"copy_workout_code_{workout_id}")
        kb.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_workout_{workout_id}")
        kb.button(text="üîô –ö –º–æ–∏–º", callback_data="workouts_my")
        kb.adjust(2)
        await callback.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="Markdown")
        await callback.answer()

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ view_workout_details: %s", e)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", show_alert=True)




# -----------------------
#  –°–û–ó–î–ê–ù–ò–ï –¢–†–ï–ù–ò–†–û–í–ö–ò
# -----------------------
@workouts_router.callback_query(F.data == "create_workout")
async def create_workout_start(callback: CallbackQuery, state: FSMContext):
    logger.info("create_workout_start by %s", callback.from_user.id)
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="create_cancel")
    kb.adjust(1)
    await _safe_edit_or_send(callback.message, "üèãÔ∏è **–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=kb.as_markup(), parse_mode="Markdown")
    await state.set_state(CreateWorkoutStates.waiting_workout_name)
    await callback.answer()


@workouts_router.callback_query(F.data == "create_cancel")
async def cancel_workout_creation(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    kb = InlineKeyboardBuilder()
    kb.button(text="üîô –í –º–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", callback_data="workouts_menu")
    kb.adjust(1)
    await _safe_edit_or_send(callback.message, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb.as_markup())
    await callback.answer()


# message handler: –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
@workouts_router.message(StateFilter(CreateWorkoutStates.waiting_workout_name))
async def handle_workout_name(message: Message, state: FSMContext):
    name = (message.text or "").strip()
    if not name or len(name) < 3:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ ‚Äî –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
        return
    await state.update_data(name=name)
    kb = InlineKeyboardBuilder()
    kb.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="skip_workout_description")
    kb.button(text="–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="add_workout_description")
    kb.adjust(1)
    await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: *{name}*\n\n–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ.", reply_markup=kb.as_markup(), parse_mode="Markdown")
    await state.set_state(CreateWorkoutStates.waiting_workout_description)


# callback: –Ω–∞–∂–∞–ª–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"
@workouts_router.callback_query(F.data == "skip_workout_description")
async def skip_workout_description(callback: CallbackQuery, state: FSMContext):
    await state.update_data(description="")
    await callback.answer("–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
    await show_block_selection_menu(callback.message, state)


# callback: –æ—Ç–∫—Ä—ã—Ç—å –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
@workouts_router.callback_query(F.data == "add_workout_description")
async def add_workout_description(callback: CallbackQuery):
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):", parse_mode="Markdown")
    # –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ ‚Äî handled —á–µ—Ä–µ–∑ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
    await callback.answer()


# message handler: –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
@workouts_router.message(StateFilter(CreateWorkoutStates.waiting_workout_description))
async def handle_workout_description(message: Message, state: FSMContext):
    desc = (message.text or "").strip()
    await state.update_data(description=desc)
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    await show_block_selection_menu(message, state)


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –±–ª–æ–∫–æ–≤
async def show_block_selection_menu(message_obj, state: FSMContext):
    data = await state.get_data()
    name = data.get("name", "<–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è>")
    selected = data.get("selected_blocks", {})

    text = f"üèó **–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {name}**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫—ã –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n\n"
    blocks_meta = [
        ("warmup", "üî• –†–∞–∑–º–∏–Ω–∫–∞"),
        ("nervous_prep", "‚ö° –¶–ù–°"),
        ("main", "üèãÔ∏è –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å"),
        ("cooldown", "üßò –ó–∞–º–∏–Ω–∫–∞"),
    ]
    for key, label in blocks_meta:
        if key in selected and selected[key].get("exercises"):
            cnt = len(selected[key]["exercises"])
            text += f"‚Ä¢ {label} ‚Äî {cnt} —É–ø.\n"
        else:
            text += f"‚Ä¢ {label}\n"

    kb = InlineKeyboardBuilder()
    for key, label in blocks_meta:
        kb.button(text=label, callback_data=f"add_block_{key}")
    kb.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="finish_workout_creation")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="create_cancel")
    kb.adjust(2)
    try:
        await message_obj.edit_text(text, reply_markup=kb.as_markup(), parse_mode="Markdown")
    except Exception:
        await message_obj.answer(text, reply_markup=kb.as_markup(), parse_mode="Markdown")

    await state.set_state(CreateWorkoutStates.selecting_blocks)


# callback: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞ (—Ä–∞–∑–Ω—ã–µ –±–ª–æ–∫–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∫ add_block_<key>)
@workouts_router.callback_query(F.data.startswith("add_block_"))
async def add_block(callback: CallbackQuery, state: FSMContext):
    key = callback.data.split("_", 2)[2]
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫ –≤ state
    await state.update_data(current_block=key)
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è ‚Üí –∑–∞—Ç–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    kb = InlineKeyboardBuilder()
    kb.button(text="–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–∫–∞", callback_data="add_block_description")
    kb.button(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–∫–∞", callback_data="skip_block_description")
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_constructor")
    kb.adjust(1)
    await callback.message.edit_text(f"‚úçÔ∏è –ë–ª–æ–∫: *{key}*", reply_markup=kb.as_markup(), parse_mode="Markdown")
    await state.set_state(CreateWorkoutStates.adding_block_description)
    await callback.answer()


@workouts_router.callback_query(F.data == "back_to_constructor")
async def back_to_constructor(callback: CallbackQuery, state: FSMContext):
    # –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏—è
    await show_block_selection_menu(callback.message, state)
    await callback.answer()


@workouts_router.callback_query(F.data == "add_block_description")
async def prompt_block_description(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):", parse_mode="Markdown")
    await state.set_state(CreateWorkoutStates.adding_block_description)
    await callback.answer()


@workouts_router.callback_query(F.data == "skip_block_description")
async def skip_block_description(callback: CallbackQuery, state: FSMContext):
    # –¥–æ–±–∞–≤–∏–º –ø—É—Å—Ç—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –±–ª–æ–∫–∞, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
    data = await state.get_data()
    sel = data.get("selected_blocks", {})
    current = data.get("current_block")
    if current:
        sel.setdefault(current, _new_block_struct())
        await state.update_data(selected_blocks=sel)
    await callback.answer("–û–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
    # –ø–µ—Ä–µ–π—Ç–∏ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    await show_block_exercises_menu(callback.message, state)


# message handler: –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –±–ª–æ–∫–∞
@workouts_router.message(StateFilter(CreateWorkoutStates.adding_block_description))
async def handle_block_description(message: Message, state: FSMContext):
    desc = (message.text or "").strip()
    data = await state.get_data()
    current = data.get("current_block")
    sel = data.get("selected_blocks", {})
    if not current:
        await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä.")
        return
    # –æ–±–Ω–æ–≤–ª—è–µ–º
    sel.setdefault(current, _new_block_struct())
    sel[current]["description"] = desc
    await state.update_data(selected_blocks=sel)
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    # –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –±–ª–æ–∫–∞
    await show_block_exercises_menu(message, state)


# –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞
async def show_block_exercises_menu(message_obj, state: FSMContext):
    data = await state.get_data()
    current = data.get("current_block")
    if not current:
        await _safe_edit_or_send(message_obj, "–ù–µ –≤—ã–±—Ä–∞–Ω –±–ª–æ–∫. –í–æ–∑–≤—Ä–∞—Ç –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä.")
        await show_block_selection_menu(message_obj, state)
        return

    text = f"üîé **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –±–ª–æ–∫–∞:** {current}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    kb = InlineKeyboardBuilder()
    kb.button(text="üîç –ù–∞–π—Ç–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", callback_data="search_exercise_for_block")
    kb.button(text="üìù –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é (—Ç–µ–∫—Å—Ç–æ–º)", callback_data="manual_add_exercise")
    kb.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–ª–æ–∫", callback_data="finish_current_block")
    kb.button(text="üîô –ö –±–ª–æ–∫–∞–º", callback_data="back_to_constructor")
    kb.adjust(1)

    try:
        await message_obj.edit_text(text, reply_markup=kb.as_markup(), parse_mode="Markdown")
    except Exception:
        await message_obj.answer(text, reply_markup=kb.as_markup(), parse_mode="Markdown")


# callback: manual add -> –ø–µ—Ä–µ–≤–æ–¥–∏–º FSM –≤ manual_exercise_input
@workouts_router.callback_query(F.data == "manual_add_exercise")
async def manual_add_exercise(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä.: –ü—Ä–∏—Å–µ–¥ 3x10 70% 90—Å):", parse_mode="Markdown")
    # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(CreateWorkoutStates.manual_exercise_input)
    await callback.answer()


# message handler: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
@workouts_router.message(StateFilter(CreateWorkoutStates.manual_exercise_input))
async def handle_manual_exercise_input(message: Message, state: FSMContext):
    text = (message.text or "").strip()
    if not text:
        await message.answer("–ü—É—Å—Ç–æ–π –≤–≤–æ–¥ ‚Äî –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.set_state(CreateWorkoutStates.adding_exercises)
        return

    data = await state.get_data()
    current = data.get("current_block")
    if not current:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫.")
        await state.set_state(CreateWorkoutStates.selecting_blocks)
        return

    sel = data.get("selected_blocks", {})
    sel.setdefault(current, _new_block_struct())
    # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    new_ex = {
        "id": None,
        "name": text,
        "sets": None,
        "reps_min": None,
        "reps_max": None,
        "one_rm_percent": None,
        "rest_seconds": None,
        "notes": None,
    }
    sel[current]["exercises"].append(new_ex)
    await state.update_data(selected_blocks=sel)

    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="manual_add_exercise")
    kb.button(text="üîô –ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º –±–ª–æ–∫–∞", callback_data="back_to_block_exercises")
    kb.adjust(1)
    await message.answer(f"‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ:\n{text}", reply_markup=kb.as_markup())
    # –æ—Å—Ç–∞—ë–º—Å—è –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π (–∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ adding_exercises)
    await state.set_state(CreateWorkoutStates.adding_exercises)


@workouts_router.callback_query(F.data == "back_to_block_exercises")
async def back_to_block_exercises(callback: CallbackQuery, state: FSMContext):
    await show_block_exercises_menu(callback.message, state)
    await callback.answer()


@workouts_router.callback_query(F.data == "finish_current_block")
async def finish_current_block(callback: CallbackQuery, state: FSMContext):
    # –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–ª–æ–∫–æ–≤
    await callback.answer("–ë–ª–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
    await show_block_selection_menu(callback.message, state)


# callback: –ø–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π ‚Äî –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å –≤ handlers.exercises, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
@workouts_router.callback_query(F.data == "search_exercise_for_block")
async def search_exercise_for_block(callback: CallbackQuery, state: FSMContext):
    # –µ—Å–ª–∏ –µ—Å—Ç—å –º–æ–¥—É–ª—å handlers.exercises –∏ —Ç–∞–º —Ñ—É–Ω–∫—Ü–∏—è searchexerciseforblock, –≤—ã–∑–æ–≤–µ–º –µ—ë
    try:
        from handlers import exercises as exercises_handler  # local import
        if hasattr(exercises_handler, "searchexerciseforblock"):
            await exercises_handler.searchexerciseforblock(callback, state)
            return
    except Exception:
        logger.debug("–ú–æ–¥—É–ª—å handlers.exercises –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –≤—ã–∑–æ–≤ –Ω–µ —É–¥–∞–ª—Å—è", exc_info=True)

    # fallback: –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    kb = InlineKeyboardBuilder()
    kb.button(text="üîç –ü–æ–∏—Å–∫ (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)", callback_data="noop")
    kb.button(text="üìù –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="manual_add_exercise")
    kb.button(text="üîô –ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º –±–ª–æ–∫–∞", callback_data="back_to_block_exercises")
    kb.adjust(1)
    await callback.message.edit_text("üîç –ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.as_markup(), parse_mode="Markdown")
    await callback.answer()


# Save workout to DB ‚Äî —Ç–æ–ª—å–∫–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
@workouts_router.callback_query(F.data == "finish_workout_creation")
async def finish_workout_creation(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    if not user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ", show_alert=True)
        return

    name = data.get("name")
    description = data.get("description", "")
    selected_blocks = data.get("selected_blocks", {})

    total_exercises = sum(len(block["exercises"]) for block in selected_blocks.values())
    if total_exercises == 0:
        await callback.answer("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", show_alert=True)
        return

    try:
        async with db_manager.pool.acquire() as conn:
            workout_id = await conn.fetchval(
                """
                INSERT INTO workouts (name, description, created_by, visibility, difficulty_level, estimated_duration_minutes, created_at)
                VALUES ($1, $2, $3, 'private', 'intermediate', $4, now())
                RETURNING id
                """,
                name, description, user["id"], max(5, total_exercises * 5),
            )

            # optionally compute unique_id (if table creates it via trigger, skip)
            unique_id = await conn.fetchval("SELECT unique_id FROM workouts WHERE id = $1", workout_id)

            order = 0
            for phase, block in selected_blocks.items():
                for ex in block["exercises"]:
                    order += 1
                    await conn.execute(
                        """
                        INSERT INTO workout_exercises (
                            workout_id, exercise_id, phase, order_in_phase, sets, reps_min, reps_max, one_rm_percent, rest_seconds, notes
                        ) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)
                        """,
                        workout_id,
                        ex.get("id"),
                        phase,
                        order,
                        ex.get("sets"),
                        ex.get("reps_min"),
                        ex.get("reps_max"),
                        ex.get("one_rm_percent"),
                        ex.get("rest_seconds"),
                        ex.get("notes"),
                    )

        # success message
        text = f"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ *{name}* —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n–ö–æ–¥: `{unique_id}`\n–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {total_exercises}"
        kb = InlineKeyboardBuilder()
        kb.button(text="üèãÔ∏è –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="workouts_my")
        kb.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â—ë", callback_data="create_workout")
        kb.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        kb.adjust(2)
        await callback.message.edit_text(text, reply_markup=kb.as_markup(), parse_mode="Markdown")
        await state.clear()
        await callback.answer()

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: %s", e)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", show_alert=True)


# -------------- simple features: start workout, copy code placeholders --------------
@workouts_router.callback_query(F.data.startswith("start_workout_"))
async def start_workout_session(callback: CallbackQuery):
    await callback.answer("–§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).")


@workouts_router.callback_query(F.data.startswith("copy_workout_code_"))
async def copy_workout_code(callback: CallbackQuery):
    await callback.answer("–ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä (—Å–∏–º—É–ª—è—Ü–∏—è).")


# -----------------------
#  REGISTRATION (call from handlers.__init__ or main)
# -----------------------
def register_workout_handlers(dp):
    """
    Must be called once (from handlers.__init__ or main.py).
    It will attach `workouts_router` to the dispatcher.
    """
    try:
        dp.include_router(workouts_router)
        logger.info("‚úÖ workouts_router –ø–æ–¥–∫–ª—é—á—ë–Ω!")
    except RuntimeError as e:
        # —É–∂–µ –ø–æ–¥–∫–ª—é—á—ë–Ω (–µ—Å–ª–∏ –∫–æ–¥ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ dev) ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        logger.warning("workouts_router —É–∂–µ –±—ã–ª –ø–æ–¥–∫–ª—é—á—ë–Ω: %s", e)


from aiogram import Router
import logging

logger = logging.getLogger(__name__)

exercises_router = Router()

def register_exercise_handlers(dp):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç router —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.
    """
    try:
        dp.include_router(exercises_router)
        logger.info("‚úÖ exercises_router –ø–æ–¥–∫–ª—é—á—ë–Ω!")
    except RuntimeError as e:
        logger.warning(f"‚ö†Ô∏è exercises_router —É–∂–µ –±—ã–ª –ø–æ–¥–∫–ª—é—á—ë–Ω: {e}")