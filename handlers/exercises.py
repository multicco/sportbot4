# ===== –ü–û–õ–ù–´–ô –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô EXERCISES.PY –ë–ï–ó –û–®–ò–ë–û–ö =====

from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database import db_manager
from states.exercise_states import CreateExerciseStates
from keyboards.exercise_keyboards import (
    get_exercise_search_keyboard, get_categories_keyboard, 
    get_equipment_keyboard, get_difficulty_keyboard
)
from utils.validators import (
    validate_exercise_name, validate_exercise_description,
    validate_exercise_instructions
)
from utils.formatters import format_exercise_info

def register_exercise_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
    
    # –ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    dp.callback_query.register(search_exercise_menu, F.data == "search_exercise")
    dp.callback_query.register(search_exercise_by_name, F.data == "search_by_name")
    dp.callback_query.register(search_by_category, F.data == "search_by_category")
    dp.callback_query.register(search_by_muscle_group, F.data == "search_by_muscle")
    dp.callback_query.register(show_category_exercises, F.data.startswith("cat_"))
    dp.callback_query.register(show_muscle_group_exercises, F.data.startswith("muscle_"))
    
    # –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    dp.callback_query.register(show_exercise_details, F.data.startswith("exercise_"))
    dp.callback_query.register(back_from_exercise_details, F.data == "back_from_exercise")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤)
    dp.callback_query.register(start_add_exercise, F.data == "add_new_exercise")
    dp.callback_query.register(cancel_exercise_creation, F.data == "cancel_exercise_creation")
    
    # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    dp.callback_query.register(select_existing_category, F.data == "select_existing_category")
    dp.callback_query.register(choose_category, F.data.startswith("choose_cat_"))
    dp.callback_query.register(create_new_category, F.data == "create_new_category")
    
    # –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –º—ã—à—Ü
    dp.callback_query.register(choose_muscle_group, F.data.startswith("choose_mg_"))
    dp.callback_query.register(create_new_muscle_group, F.data == "create_new_muscle_group")
    
    # –í—ã–±–æ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    dp.callback_query.register(choose_equipment, F.data.startswith("choose_eq_"))
    
    # –í—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    dp.callback_query.register(choose_difficulty, F.data.startswith("diff_"))

# ===== –ü–û–ò–°–ö –£–ü–†–ê–ñ–ù–ï–ù–ò–ô =====
async def search_exercise_menu(callback: CallbackQuery):
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    keyboard = get_exercise_search_keyboard(user['role'])
    
    base_text = (
        "üîç **–ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π**\n\n"
        "–ë–∞–∑–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø –º—ã—à—Ü\n"
        "–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏.\n\n"
        "üí° **–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!**\n\n"
    )
    
    if user['role'] in ['coach', 'admin']:
        trainer_text = "üÜï **–î–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤:** –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è!\n\n"
    else:
        trainer_text = ""
    
    full_text = base_text + trainer_text + "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:"
    
    await callback.message.edit_text(
        full_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()

async def search_exercise_by_name(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üîç **–ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `–∂–∏–º`, `–ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è`, `–ø–ª–∞–Ω–∫–∞`\n\n"
        "üí° **–ù–∞–π–¥–µ–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏!**",
        parse_mode="Markdown"
    )
    await state.set_state("waiting_search")
    await callback.answer()

async def search_by_category(callback: CallbackQuery):
    try:
        async with db_manager.pool.acquire() as conn:
            categories = await conn.fetch("SELECT DISTINCT category FROM exercises ORDER BY category")
        
        keyboard = get_categories_keyboard(categories)
        
        await callback.message.edit_text(
            "üìÇ **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:**\n\n"
            "üí° **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞**",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await callback.answer()

async def search_by_muscle_group(callback: CallbackQuery):
    """–ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ –≥—Ä—É–ø–ø–∞–º –º—ã—à—Ü"""
    try:
        async with db_manager.pool.acquire() as conn:
            muscle_groups = await conn.fetch("SELECT DISTINCT muscle_group FROM exercises ORDER BY muscle_group")
        
        keyboard = InlineKeyboardBuilder()
        
        for mg in muscle_groups:
            keyboard.button(
                text=f"üí™ {mg['muscle_group']}", 
                callback_data=f"muscle_{mg['muscle_group']}"
            )
        
        keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="search_exercise")
        keyboard.adjust(2)
        
        await callback.message.edit_text(
            "üí™ **–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –º—ã—à—Ü:**\n\n"
            "üí° **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞**",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await callback.answer()

async def show_category_exercises(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –° –ö–õ–ò–ö–ê–ë–ï–õ–¨–ù–´–ú–ò –ö–ù–û–ü–ö–ê–ú–ò"""
    category = callback.data[4:]
    
    try:
        async with db_manager.pool.acquire() as conn:
            exercises = await conn.fetch(
                "SELECT id, name, muscle_group, description, test_type FROM exercises WHERE category = $1 ORDER BY name",
                category
            )
        
        if exercises:
            text = f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}**\n\n"
            text += f"**–ù–∞–π–¥–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {len(exercises)}**\n"
            text += f"üí° **–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞**\n\n"
            
            keyboard = InlineKeyboardBuilder()
            
            for ex in exercises:
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞
                test_emoji = {
                    'strength': 'üèãÔ∏è',
                    'endurance': '‚è±Ô∏è', 
                    'speed': 'üèÉ',
                    'quantity': 'üî¢',
                    'none': 'üí™'
                }.get(ex['test_type'] if ex['test_type'] else 'none', 'üí™')
                
                keyboard.button(
                    text=f"{test_emoji} {ex['name']}", 
                    callback_data=f"exercise_{ex['id']}"
                )
            
            keyboard.button(text="üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="search_by_category")
            keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            keyboard.adjust(1)
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
        else:
            await callback.message.edit_text(f"‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await callback.answer()

async def show_muscle_group_exercises(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –º—ã—à—Ü –° –ö–õ–ò–ö–ê–ë–ï–õ–¨–ù–´–ú–ò –ö–ù–û–ü–ö–ê–ú–ò"""
    muscle_group = callback.data[7:]  # –£–±–∏—Ä–∞–µ–º "muscle_"
    
    try:
        async with db_manager.pool.acquire() as conn:
            exercises = await conn.fetch(
                "SELECT id, name, category, description, test_type FROM exercises WHERE muscle_group = $1 ORDER BY name",
                muscle_group
            )
        
        if exercises:
            text = f"üí™ **–ì—Ä—É–ø–ø–∞ –º—ã—à—Ü: {muscle_group}**\n\n"
            text += f"**–ù–∞–π–¥–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {len(exercises)}**\n"
            text += f"üí° **–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞**\n\n"
            
            keyboard = InlineKeyboardBuilder()
            
            for ex in exercises:
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞
                test_emoji = {
                    'strength': 'üèãÔ∏è',
                    'endurance': '‚è±Ô∏è', 
                    'speed': 'üèÉ',
                    'quantity': 'üî¢',
                    'none': 'üí™'
                }.get(ex['test_type'] if ex['test_type'] else 'none', 'üí™')
                
                keyboard.button(
                    text=f"{test_emoji} {ex['name']} ({ex['category']})", 
                    callback_data=f"exercise_{ex['id']}"
                )
            
            keyboard.button(text="üîô –ö –≥—Ä—É–ø–ø–∞–º –º—ã—à—Ü", callback_data="search_by_muscle")
            keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            keyboard.adjust(1)
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
        else:
            await callback.message.edit_text(f"‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã '{muscle_group}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await callback.answer()

# ===== –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –î–ï–¢–ê–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–† –£–ü–†–ê–ñ–ù–ï–ù–ò–Ø =====
async def show_exercise_details(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–∏"""
    exercise_id = int(callback.data.split("_")[1])
    
    try:
        async with db_manager.pool.acquire() as conn:
            exercise = await conn.fetchrow("""
                SELECT e.*, u.first_name as author_name 
                FROM exercises e
                LEFT JOIN users u ON e.created_by = u.id  
                WHERE e.id = $1
            """, exercise_id)
        
        if exercise:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            await state.update_data(current_exercise_id=exercise_id, last_search_context="details")
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–∏—á–Ω—ã–π —Ä–µ–∫–æ—Ä–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
            personal_record = await get_user_best_test_result(user['id'], exercise_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            text = format_exercise_info(dict(exercise))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            test_type_names = {
                'strength': 'üèãÔ∏è –°–∏–ª–æ–≤–æ–π —Ç–µ—Å—Ç',
                'endurance': '‚è±Ô∏è –¢–µ—Å—Ç –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏', 
                'speed': 'üèÉ –°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π —Ç–µ—Å—Ç',
                'quantity': 'üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç',
                'none': '‚ùå –ù–µ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–µ'
            }
            
            test_type = exercise['test_type'] if exercise['test_type'] else 'none'
            if test_type != 'none':
                text += f"\n\n**üî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:**\n"
                text += f"{test_type_names[test_type]}\n"
                text += f"üìä –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: {exercise['measurement_unit']}\n"
                
                if personal_record:
                    text += f"üèÜ **–í–∞—à —Ä–µ–∫–æ—Ä–¥:** {personal_record['result_value']} {personal_record['result_unit']}\n"
                    text += f"üìÖ –î–∞—Ç–∞: {personal_record['tested_at'].strftime('%d.%m.%Y')}\n"
                else:
                    text += f"üìù **–¢–µ—Å—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç** - –ø—Ä–æ–π–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π!\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ
            if exercise['author_name']:
                text += f"\nüë§ **–ê–≤—Ç–æ—Ä:** {exercise['author_name']}"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = InlineKeyboardBuilder()
            
            # –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
            if test_type != 'none':
                keyboard.button(text="üî¨ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data=f"test_{exercise_id}")
            
            # –ö–Ω–æ–ø–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
            keyboard.button(text="üèãÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ", callback_data=f"use_in_workout_{exercise_id}")
            
            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard.button(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="back_from_exercise")
            keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            keyboard.adjust(1)
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard.as_markup(),
                parse_mode="Markdown"
            )
        else:
            await callback.message.edit_text("‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    await callback.answer()

async def back_from_exercise_details(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥ –æ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    await search_exercise_menu(callback)

# ===== –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –£–ü–†–ê–ñ–ù–ï–ù–ò–Ø =====
async def start_add_exercise(callback: CallbackQuery, state: FSMContext):
    user = await db_manager.get_user_by_telegram_id(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if user['role'] not in ['coach', 'admin']:
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è!")
        return
    
    await callback.message.edit_text(
        "‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è**\n\n"
        "üèãÔ∏è **–í—ã —Å–æ–∑–¥–∞–µ—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã!**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ **–Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è**:\n"
        "_–ù–∞–ø—Ä–∏–º–µ—Ä: \"–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –Ω–∞ –Ω–∞–∫–ª–æ–Ω–Ω–æ–π —Å–∫–∞–º—å–µ\" –∏–ª–∏ \"–ü–ª–∞–Ω–∫–∞ —Å –ø–æ–¥—ä–µ–º–æ–º –Ω–æ–≥\"_",
        parse_mode="Markdown"
    )
    await state.set_state(CreateExerciseStates.waiting_name)
    await callback.answer()

async def cancel_exercise_creation(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå **–°–æ–∑–¥–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ**",
        parse_mode="Markdown"
    )
    await callback.answer()

async def select_existing_category(callback: CallbackQuery, state: FSMContext):
    try:
        async with db_manager.pool.acquire() as conn:
            categories = await conn.fetch("SELECT DISTINCT category FROM exercises ORDER BY category")
        
        keyboard = InlineKeyboardBuilder()
        
        for cat in categories:
            keyboard.button(
                text=f"üìÇ {cat['category']}", 
                callback_data=f"choose_cat_{cat['category']}"
            )
        
        keyboard.button(text="üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="create_new_category")
        keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_exercise_creation")
        keyboard.adjust(2)
        
        await callback.message.edit_text(
            "üìÇ **–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:**\n\n",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await callback.answer()

async def choose_category(callback: CallbackQuery, state: FSMContext):
    category = callback.data[11:]  # –£–±–∏—Ä–∞–µ–º "choose_cat_"
    await state.update_data(category=category)
    await ask_muscle_group(callback.message, state, edit=True)
    await callback.answer()

async def create_new_category(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üìù **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:\n"
        "_–ù–∞–ø—Ä–∏–º–µ—Ä: \"–ö—Ä–æ—Å—Å—Ñ–∏—Ç\", \"–†–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏—è\", \"–ô–æ–≥–∞\"_\n\n"
        "**–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:**\n"
        "‚Ä¢ –°–∏–ª–æ–≤—ã–µ\n"
        "‚Ä¢ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ\n"
        "‚Ä¢ –ö–∞—Ä–¥–∏–æ\n"
        "‚Ä¢ –†–∞—Å—Ç—è–∂–∫–∞",
        parse_mode="Markdown"
    )
    await state.set_state("waiting_new_category")
    await callback.answer()

async def ask_muscle_group(message: Message, state: FSMContext, edit: bool = False):
    try:
        async with db_manager.pool.acquire() as conn:
            muscle_groups = await conn.fetch("SELECT DISTINCT muscle_group FROM exercises ORDER BY muscle_group")
        
        keyboard = InlineKeyboardBuilder()
        
        for mg in muscle_groups:
            keyboard.button(
                text=f"üí™ {mg['muscle_group']}", 
                callback_data=f"choose_mg_{mg['muscle_group']}"
            )
        
        keyboard.button(text="üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É", callback_data="create_new_muscle_group")
        keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_exercise_creation")
        keyboard.adjust(3)
        
        text = "üí™ **–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –º—ã—à—Ü:**\n\n"
        
        if edit:
            await message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
        else:
            await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def choose_muscle_group(callback: CallbackQuery, state: FSMContext):
    muscle_group = callback.data[10:]  # –£–±–∏—Ä–∞–µ–º "choose_mg_"
    await state.update_data(muscle_group=muscle_group)
    await ask_equipment(callback.message, state, edit=True)
    await callback.answer()

async def create_new_muscle_group(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üí™ **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã –º—ã—à—Ü**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –º—ã—à—Ü:\n"
        "_–ù–∞–ø—Ä–∏–º–µ—Ä: \"–ü—Ä–µ–¥–ø–ª–µ—á—å—è\", \"–®–µ—è\", \"–°—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä—ã\"_",
        parse_mode="Markdown"
    )
    await state.set_state("waiting_new_muscle_group")
    await callback.answer()

async def ask_equipment(message: Message, state: FSMContext, edit: bool = False):
    keyboard = get_equipment_keyboard()
    text = "üèãÔ∏è **–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:**\n\n"
    
    if edit:
        await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

async def choose_equipment(callback: CallbackQuery, state: FSMContext):
    equipment = callback.data[10:]  # –£–±–∏—Ä–∞–µ–º "choose_eq_"
    
    if equipment == "–î—Ä—É–≥–æ–µ":
        await callback.message.edit_text(
            "üîß **–£–∫–∞–∂–∏—Ç–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:\n"
            "_–ù–∞–ø—Ä–∏–º–µ—Ä: \"TRX –ø–µ—Ç–ª–∏\", \"–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –º—è—á\"_",
            parse_mode="Markdown"
        )
        await state.set_state("waiting_custom_equipment")
        await callback.answer()
        return
    
    await state.update_data(equipment=equipment)
    await ask_difficulty(callback.message, state, edit=True)
    await callback.answer()

async def ask_difficulty(message: Message, state: FSMContext, edit: bool = False):
    keyboard = get_difficulty_keyboard()
    text = "‚≠ê **–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:**\n\n"
    
    if edit:
        await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

async def choose_difficulty(callback: CallbackQuery, state: FSMContext):
    difficulty = callback.data[5:]  # –£–±–∏—Ä–∞–µ–º "diff_"
    await state.update_data(difficulty_level=difficulty)
    
    await callback.message.edit_text(
        "üìù **–û–ø–∏—Å–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n"
        "_–ù–∞–ø—Ä–∏–º–µ—Ä: \"–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –≥—Ä—É–¥–Ω—ã—Ö –º—ã—à—Ü\"_",
        parse_mode="Markdown"
    )
    await state.set_state(CreateExerciseStates.waiting_description)
    await callback.answer()

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –í–í–û–î–ê –î–ê–ù–ù–´–• =====
async def process_exercise_name(message: Message, state: FSMContext):
    exercise_name = message.text.strip()
    validation = validate_exercise_name(exercise_name)
    
    if not validation['valid']:
        await message.answer(validation['error'])
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    try:
        async with db_manager.pool.acquire() as conn:
            existing = await conn.fetchrow(
                "SELECT name FROM exercises WHERE LOWER(name) = LOWER($1)", 
                exercise_name
            )
        
        if existing:
            await message.answer(f"‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ '{exercise_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ!")
            return
    
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return
    
    await state.update_data(name=exercise_name)
    await select_existing_category_for_new_exercise(message, state)

async def select_existing_category_for_new_exercise(message: Message, state: FSMContext):
    try:
        async with db_manager.pool.acquire() as conn:
            categories = await conn.fetch("SELECT DISTINCT category FROM exercises ORDER BY category")
        
        keyboard = InlineKeyboardBuilder()
        
        for cat in categories:
            keyboard.button(
                text=f"üìÇ {cat['category']}", 
                callback_data=f"choose_cat_{cat['category']}"
            )
        
        keyboard.button(text="üìù –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="create_new_category")
        keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_exercise_creation")
        keyboard.adjust(2)
        
        await message.answer(
            "üìÇ **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:**\n\n",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def process_exercise_description(message: Message, state: FSMContext):
    description = message.text.strip()
    validation = validate_exercise_description(description)
    
    if not validation['valid']:
        await message.answer(validation['error'])
        return
    
    await state.update_data(description=description)
    
    await message.answer(
        "üìã **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
        parse_mode="Markdown"
    )
    await state.set_state(CreateExerciseStates.waiting_instructions)

async def process_exercise_instructions(message: Message, state: FSMContext):
    instructions = message.text.strip()
    validation = validate_exercise_instructions(instructions)
    
    if not validation['valid']:
        await message.answer(validation['error'])
        return
    
    await state.update_data(instructions=instructions)
    await save_new_exercise(message, state)

async def save_new_exercise(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –ë–î"""
    data = await state.get_data()
    user = await db_manager.get_user_by_telegram_id(message.from_user.id)
    
    try:
        async with db_manager.pool.acquire() as conn:
            exercise_id = await conn.fetchval("""
                INSERT INTO exercises (
                    name, category, muscle_group, equipment, difficulty_level,
                    description, instructions, created_by
                ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
                RETURNING id
            """, 
                data['name'], data['category'], data['muscle_group'],
                data['equipment'], data['difficulty_level'], 
                data['description'], data['instructions'], user['id']
            )
        
        # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
        text = f"üéâ **–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!**\n\n"
        text += f"üí™ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {data['name']}\n"
        text += f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {data['category']}\n"
        text += f"üéØ **–ì—Ä—É–ø–ø–∞ –º—ã—à—Ü:** {data['muscle_group']}\n"
        text += f"üîß **–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:** {data['equipment']}\n"
        text += f"‚≠ê **–°–ª–æ–∂–Ω–æ—Å—Ç—å:** {data['difficulty_level']}\n"
        text += f"**ID —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:** {exercise_id}"
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="add_new_exercise")
        keyboard.button(text="üîç –ö –ø–æ–∏—Å–∫—É", callback_data="search_exercise")
        keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        keyboard.adjust(2)
        
        await message.answer(
            text,
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )
        
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–ò–°–ö–ê –£–ü–†–ê–ñ–ù–ï–ù–ò–ô =====
async def handle_exercise_search(message: Message, state: FSMContext):
    search_term = message.text.lower()
    
    try:
        async with db_manager.pool.acquire() as conn:
            exercises = await conn.fetch("""
                SELECT id, name, category, muscle_group, description, test_type 
                FROM exercises 
                WHERE LOWER(name) LIKE $1 
                   OR LOWER(category) LIKE $1
                   OR LOWER(muscle_group) LIKE $1
                ORDER BY name
                LIMIT 15
            """, f"%{search_term}%")
        
        if exercises:
            text = f"üîç **–ù–∞–π–¥–µ–Ω–æ: {len(exercises)} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π**\n\n"
            text += f"üí° **–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:**\n\n"
            
            keyboard = InlineKeyboardBuilder()
            
            for ex in exercises:
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞
                test_emoji = {
                    'strength': 'üèãÔ∏è',
                    'endurance': '‚è±Ô∏è', 
                    'speed': 'üèÉ',
                    'quantity': 'üî¢',
                    'none': 'üí™'
                }.get(ex['test_type'] if ex['test_type'] else 'none', 'üí™')
                
                keyboard.button(
                    text=f"{test_emoji} {ex['name']} ‚Ä¢ {ex['muscle_group']}", 
                    callback_data=f"exercise_{ex['id']}"
                )
            
            keyboard.button(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_by_name")
            keyboard.button(text="üîô –ö –ø–æ–∏—Å–∫—É", callback_data="search_exercise")
            keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            keyboard.adjust(1)
            
            await message.answer(
                text, 
                reply_markup=keyboard.as_markup(), 
                parse_mode="Markdown"
            )
        else:
            text = f"‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n" \
                   f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞."
            
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_by_name")
            keyboard.button(text="üîô –ö –ø–æ–∏—Å–∫—É", callback_data="search_exercise")
            keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            
            await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
            
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
async def get_user_best_test_result(user_id: int, exercise_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é"""
    try:
        async with db_manager.pool.acquire() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ user_tests
            table_exists = await conn.fetchval("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_name = 'user_tests'
                )
            """)
            
            if not table_exists:
                return None
            
            result = await conn.fetchrow("""
                SELECT result_value, result_unit, tested_at, test_type
                FROM user_tests 
                WHERE user_id = $1 AND exercise_id = $2 
                ORDER BY tested_at DESC
                LIMIT 1
            """, user_id, exercise_id)
        
        return dict(result) if result else None
    except Exception:
        return None

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –°–û–°–¢–û–Ø–ù–ò–ô =====
async def process_exercise_text_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–≤–æ–¥–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
    current_state = await state.get_state()
    
    if current_state == CreateExerciseStates.waiting_name:
        await process_exercise_name(message, state)
    
    elif current_state == "waiting_new_category":
        category = message.text.strip()
        if len(category) < 3 or len(category) > 50:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤")
            return
        await state.update_data(category=category)
        await ask_muscle_group(message, state)
    
    elif current_state == "waiting_new_muscle_group":
        muscle_group = message.text.strip()
        if len(muscle_group) < 3 or len(muscle_group) > 50:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –º—ã—à—Ü –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤")
            return
        await state.update_data(muscle_group=muscle_group)
        await ask_equipment(message, state)
    
    elif current_state == "waiting_custom_equipment":
        equipment = message.text.strip()
        if len(equipment) < 2 or len(equipment) > 50:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤")
            return
        await state.update_data(equipment=equipment)
        await ask_difficulty(message, state)
    
    elif current_state == CreateExerciseStates.waiting_description:
        await process_exercise_description(message, state)
    
    elif current_state == CreateExerciseStates.waiting_instructions:
        await process_exercise_instructions(message, state)
    
    elif current_state == "waiting_search":
        await handle_exercise_search(message, state)

__all__ = ['register_exercise_handlers', 'process_exercise_text_input']